ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB80:
  26              		.file 1 "..\\FreeRTOS\\tasks.c"
   1:..\FreeRTOS/tasks.c **** /*
   2:..\FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.0.0
   3:..\FreeRTOS/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS/tasks.c ****  *
   5:..\FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS/tasks.c ****  * subject to the following conditions:
  11:..\FreeRTOS/tasks.c ****  *
  12:..\FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS/tasks.c ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:..\FreeRTOS/tasks.c ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15:..\FreeRTOS/tasks.c ****  *
  16:..\FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:..\FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:..\FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:..\FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:..\FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:..\FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:..\FreeRTOS/tasks.c ****  *
  23:..\FreeRTOS/tasks.c ****  * http://www.FreeRTOS.org
  24:..\FreeRTOS/tasks.c ****  * http://aws.amazon.com/freertos
  25:..\FreeRTOS/tasks.c ****  *
  26:..\FreeRTOS/tasks.c ****  * 1 tab == 4 spaces!
  27:..\FreeRTOS/tasks.c ****  */
  28:..\FreeRTOS/tasks.c **** 
  29:..\FreeRTOS/tasks.c **** /* Standard includes. */
  30:..\FreeRTOS/tasks.c **** #include <stdlib.h>
  31:..\FreeRTOS/tasks.c **** #include <string.h>
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 2


  32:..\FreeRTOS/tasks.c **** 
  33:..\FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:..\FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  35:..\FreeRTOS/tasks.c **** task.h is included from an application file. */
  36:..\FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:..\FreeRTOS/tasks.c **** 
  38:..\FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  39:..\FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  40:..\FreeRTOS/tasks.c **** #include "task.h"
  41:..\FreeRTOS/tasks.c **** #include "timers.h"
  42:..\FreeRTOS/tasks.c **** #include "stack_macros.h"
  43:..\FreeRTOS/tasks.c **** 
  44:..\FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:..\FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:..\FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  47:..\FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  48:..\FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:..\FreeRTOS/tasks.c **** 
  50:..\FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:..\FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  52:..\FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:..\FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  54:..\FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  55:..\FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  56:..\FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  57:..\FreeRTOS/tasks.c **** 	#include <stdio.h>
  58:..\FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  59:..\FreeRTOS/tasks.c **** 
  60:..\FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  61:..\FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  62:..\FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
  63:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  64:..\FreeRTOS/tasks.c **** #else
  65:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  66:..\FreeRTOS/tasks.c **** #endif
  67:..\FreeRTOS/tasks.c **** 
  68:..\FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:..\FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  70:..\FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  71:..\FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  72:..\FreeRTOS/tasks.c **** 
  73:..\FreeRTOS/tasks.c **** /*
  74:..\FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:..\FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:..\FreeRTOS/tasks.c ****  */
  77:..\FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  78:..\FreeRTOS/tasks.c **** 
  79:..\FreeRTOS/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  80:..\FreeRTOS/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  81:..\FreeRTOS/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  82:..\FreeRTOS/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  83:..\FreeRTOS/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  84:..\FreeRTOS/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  85:..\FreeRTOS/tasks.c **** settings allow a task to be created using either statically or dynamically
  86:..\FreeRTOS/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  87:..\FreeRTOS/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  88:..\FreeRTOS/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 3


  89:..\FreeRTOS/tasks.c **** made to free the RAM that was allocated statically.
  90:..\FreeRTOS/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  91:..\FreeRTOS/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  92:..\FreeRTOS/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  93:..\FreeRTOS/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  94:..\FreeRTOS/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  95:..\FreeRTOS/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  96:..\FreeRTOS/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  97:..\FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  98:..\FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  99:..\FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 100:..\FreeRTOS/tasks.c **** 
 101:..\FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 102:..\FreeRTOS/tasks.c **** value so the high water mark can be determined.  If none of the following are
 103:..\FreeRTOS/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 104:..\FreeRTOS/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 105:..\FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 106:..\FreeRTOS/tasks.c **** #else
 107:..\FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 108:..\FreeRTOS/tasks.c **** #endif
 109:..\FreeRTOS/tasks.c **** 
 110:..\FreeRTOS/tasks.c **** /*
 111:..\FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 112:..\FreeRTOS/tasks.c ****  */
 113:..\FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:..\FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:..\FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:..\FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:..\FreeRTOS/tasks.c **** 
 118:..\FreeRTOS/tasks.c **** /*
 119:..\FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:..\FreeRTOS/tasks.c ****  * global, rather than file scope.
 121:..\FreeRTOS/tasks.c ****  */
 122:..\FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:..\FreeRTOS/tasks.c **** 	#define static
 124:..\FreeRTOS/tasks.c **** #endif
 125:..\FreeRTOS/tasks.c **** 
 126:..\FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:..\FreeRTOS/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:..\FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:..\FreeRTOS/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:..\FreeRTOS/tasks.c **** #endif
 131:..\FreeRTOS/tasks.c **** 
 132:..\FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:..\FreeRTOS/tasks.c **** 
 134:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:..\FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:..\FreeRTOS/tasks.c **** 	microcontroller architecture. */
 137:..\FreeRTOS/tasks.c **** 
 138:..\FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:..\FreeRTOS/tasks.c **** 	state task. */
 140:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:..\FreeRTOS/tasks.c **** 	{																									\
 142:..\FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:..\FreeRTOS/tasks.c **** 		{																								\
 144:..\FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:..\FreeRTOS/tasks.c **** 		}																								\
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 4


 146:..\FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:..\FreeRTOS/tasks.c **** 
 148:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 149:..\FreeRTOS/tasks.c **** 
 150:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:..\FreeRTOS/tasks.c **** 	{																									\
 152:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:..\FreeRTOS/tasks.c **** 																										\
 154:..\FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:..\FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:..\FreeRTOS/tasks.c **** 		{																								\
 157:..\FreeRTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:..\FreeRTOS/tasks.c **** 			--uxTopPriority;																			\
 159:..\FreeRTOS/tasks.c **** 		}																								\
 160:..\FreeRTOS/tasks.c **** 																										\
 161:..\FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:..\FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:..\FreeRTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:..\FreeRTOS/tasks.c **** 
 167:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\FreeRTOS/tasks.c **** 
 169:..\FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:..\FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:..\FreeRTOS/tasks.c **** 	being used. */
 172:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:..\FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:..\FreeRTOS/tasks.c **** 
 175:..\FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:..\FreeRTOS/tasks.c **** 
 177:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:..\FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:..\FreeRTOS/tasks.c **** 	architecture being used. */
 180:..\FreeRTOS/tasks.c **** 
 181:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:..\FreeRTOS/tasks.c **** 
 184:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 185:..\FreeRTOS/tasks.c **** 
 186:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:..\FreeRTOS/tasks.c **** 	{																								\
 188:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:..\FreeRTOS/tasks.c **** 																									\
 190:..\FreeRTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:..\FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:..\FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:..\FreeRTOS/tasks.c **** 
 196:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 197:..\FreeRTOS/tasks.c **** 
 198:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:..\FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:..\FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:..\FreeRTOS/tasks.c **** 	{																									\
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 5


 203:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:..\FreeRTOS/tasks.c **** 		{																								\
 205:..\FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:..\FreeRTOS/tasks.c **** 		}																								\
 207:..\FreeRTOS/tasks.c **** 	}
 208:..\FreeRTOS/tasks.c **** 
 209:..\FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:..\FreeRTOS/tasks.c **** 
 211:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 212:..\FreeRTOS/tasks.c **** 
 213:..\FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:..\FreeRTOS/tasks.c **** count overflows. */
 215:..\FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:..\FreeRTOS/tasks.c **** {																									\
 217:..\FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 218:..\FreeRTOS/tasks.c **** 																									\
 219:..\FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:..\FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:..\FreeRTOS/tasks.c **** 																									\
 222:..\FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:..\FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 226:..\FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:..\FreeRTOS/tasks.c **** }
 228:..\FreeRTOS/tasks.c **** 
 229:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 230:..\FreeRTOS/tasks.c **** 
 231:..\FreeRTOS/tasks.c **** /*
 232:..\FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:..\FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:..\FreeRTOS/tasks.c ****  */
 235:..\FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:..\FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:..\FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:..\FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:..\FreeRTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 241:..\FreeRTOS/tasks.c **** 
 242:..\FreeRTOS/tasks.c **** /*
 243:..\FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:..\FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:..\FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:..\FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:..\FreeRTOS/tasks.c ****  */
 248:..\FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:..\FreeRTOS/tasks.c **** 
 250:..\FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:..\FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:..\FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:..\FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:..\FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:..\FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:..\FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:..\FreeRTOS/tasks.c **** to its original value when it is released. */
 258:..\FreeRTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 6


 260:..\FreeRTOS/tasks.c **** #else
 261:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:..\FreeRTOS/tasks.c **** #endif
 263:..\FreeRTOS/tasks.c **** 
 264:..\FreeRTOS/tasks.c **** /*
 265:..\FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:..\FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:..\FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 268:..\FreeRTOS/tasks.c ****  */
 269:..\FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 270:..\FreeRTOS/tasks.c **** {
 271:..\FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:..\FreeRTOS/tasks.c **** 
 273:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:..\FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:..\FreeRTOS/tasks.c **** 	#endif
 276:..\FreeRTOS/tasks.c **** 
 277:..\FreeRTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:..\FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:..\FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:..\FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:..\FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:..\FreeRTOS/tasks.c **** 
 283:..\FreeRTOS/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:..\FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:..\FreeRTOS/tasks.c **** 	#endif
 286:..\FreeRTOS/tasks.c **** 
 287:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:..\FreeRTOS/tasks.c **** 	#endif
 290:..\FreeRTOS/tasks.c **** 
 291:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:..\FreeRTOS/tasks.c **** 	#endif
 295:..\FreeRTOS/tasks.c **** 
 296:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:..\FreeRTOS/tasks.c **** 	#endif
 300:..\FreeRTOS/tasks.c **** 
 301:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:..\FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:..\FreeRTOS/tasks.c **** 	#endif
 304:..\FreeRTOS/tasks.c **** 
 305:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:..\FreeRTOS/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:..\FreeRTOS/tasks.c **** 	#endif
 308:..\FreeRTOS/tasks.c **** 
 309:..\FreeRTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:..\FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:..\FreeRTOS/tasks.c **** 	#endif
 312:..\FreeRTOS/tasks.c **** 
 313:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:..\FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:..\FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:..\FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 7


 317:..\FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:..\FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:..\FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:..\FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:..\FreeRTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 322:..\FreeRTOS/tasks.c **** 	#endif
 323:..\FreeRTOS/tasks.c **** 
 324:..\FreeRTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:..\FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:..\FreeRTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:..\FreeRTOS/tasks.c **** 	#endif
 328:..\FreeRTOS/tasks.c **** 
 329:..\FreeRTOS/tasks.c **** 	/* See the comments above the definition of
 330:..\FreeRTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:..\FreeRTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:..\FreeRTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:..\FreeRTOS/tasks.c **** 	#endif
 334:..\FreeRTOS/tasks.c **** 
 335:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:..\FreeRTOS/tasks.c **** 		uint8_t ucDelayAborted;
 337:..\FreeRTOS/tasks.c **** 	#endif
 338:..\FreeRTOS/tasks.c **** 
 339:..\FreeRTOS/tasks.c **** } tskTCB;
 340:..\FreeRTOS/tasks.c **** 
 341:..\FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:..\FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:..\FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 344:..\FreeRTOS/tasks.c **** 
 345:..\FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:..\FreeRTOS/tasks.c **** which static variables must be declared volatile. */
 347:..\FreeRTOS/tasks.c **** 
 348:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:..\FreeRTOS/tasks.c **** 
 350:..\FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:..\FreeRTOS/tasks.c **** 
 358:..\FreeRTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:..\FreeRTOS/tasks.c **** 
 360:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:..\FreeRTOS/tasks.c **** 
 363:..\FreeRTOS/tasks.c **** #endif
 364:..\FreeRTOS/tasks.c **** 
 365:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:..\FreeRTOS/tasks.c **** 
 367:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:..\FreeRTOS/tasks.c **** 
 369:..\FreeRTOS/tasks.c **** #endif
 370:..\FreeRTOS/tasks.c **** 
 371:..\FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 372:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 8


 374:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:..\FreeRTOS/tasks.c **** 
 383:..\FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:..\FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:..\FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:..\FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:..\FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:..\FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:..\FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:..\FreeRTOS/tasks.c **** accessed from a critical section. */
 391:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:..\FreeRTOS/tasks.c **** 
 393:..\FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:..\FreeRTOS/tasks.c **** 
 395:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:..\FreeRTOS/tasks.c **** 
 398:..\FreeRTOS/tasks.c **** #endif
 399:..\FreeRTOS/tasks.c **** 
 400:..\FreeRTOS/tasks.c **** /*lint -restore */
 401:..\FreeRTOS/tasks.c **** 
 402:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 403:..\FreeRTOS/tasks.c **** 
 404:..\FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:..\FreeRTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:..\FreeRTOS/tasks.c **** 
 407:..\FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:..\FreeRTOS/tasks.c **** 
 409:..\FreeRTOS/tasks.c **** #endif
 410:..\FreeRTOS/tasks.c **** 
 411:..\FreeRTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:..\FreeRTOS/tasks.c **** 
 413:..\FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 414:..\FreeRTOS/tasks.c **** 
 415:..\FreeRTOS/tasks.c **** #endif
 416:..\FreeRTOS/tasks.c **** 
 417:..\FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:..\FreeRTOS/tasks.c **** 
 419:..\FreeRTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:..\FreeRTOS/tasks.c **** 
 421:..\FreeRTOS/tasks.c **** #endif
 422:..\FreeRTOS/tasks.c **** 
 423:..\FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 424:..\FreeRTOS/tasks.c **** 
 425:..\FreeRTOS/tasks.c **** /**
 426:..\FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:..\FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:..\FreeRTOS/tasks.c ****  * is in any other state.
 429:..\FreeRTOS/tasks.c ****  */
 430:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 9


 431:..\FreeRTOS/tasks.c **** 
 432:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:..\FreeRTOS/tasks.c **** 
 434:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:..\FreeRTOS/tasks.c **** 
 436:..\FreeRTOS/tasks.c **** /*
 437:..\FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:..\FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 439:..\FreeRTOS/tasks.c ****  */
 440:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:..\FreeRTOS/tasks.c **** 
 442:..\FreeRTOS/tasks.c **** /*
 443:..\FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:..\FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:..\FreeRTOS/tasks.c ****  * creation of the first user task.
 446:..\FreeRTOS/tasks.c ****  *
 447:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:..\FreeRTOS/tasks.c ****  *
 450:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:..\FreeRTOS/tasks.c ****  *
 452:..\FreeRTOS/tasks.c ****  */
 453:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:..\FreeRTOS/tasks.c **** 
 455:..\FreeRTOS/tasks.c **** /*
 456:..\FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:..\FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 458:..\FreeRTOS/tasks.c ****  *
 459:..\FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:..\FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:..\FreeRTOS/tasks.c ****  */
 462:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:..\FreeRTOS/tasks.c **** 
 464:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:..\FreeRTOS/tasks.c **** 
 466:..\FreeRTOS/tasks.c **** #endif
 467:..\FreeRTOS/tasks.c **** 
 468:..\FreeRTOS/tasks.c **** /*
 469:..\FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:..\FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:..\FreeRTOS/tasks.c ****  * and its TCB deleted.
 472:..\FreeRTOS/tasks.c ****  */
 473:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:..\FreeRTOS/tasks.c **** 
 475:..\FreeRTOS/tasks.c **** /*
 476:..\FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:..\FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 478:..\FreeRTOS/tasks.c ****  */
 479:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:..\FreeRTOS/tasks.c **** 
 481:..\FreeRTOS/tasks.c **** /*
 482:..\FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:..\FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:..\FreeRTOS/tasks.c ****  * a suspended list, etc.).
 485:..\FreeRTOS/tasks.c ****  *
 486:..\FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:..\FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 10


 488:..\FreeRTOS/tasks.c ****  */
 489:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:..\FreeRTOS/tasks.c **** 
 491:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:..\FreeRTOS/tasks.c **** 
 493:..\FreeRTOS/tasks.c **** #endif
 494:..\FreeRTOS/tasks.c **** 
 495:..\FreeRTOS/tasks.c **** /*
 496:..\FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:..\FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:..\FreeRTOS/tasks.c ****  */
 499:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:..\FreeRTOS/tasks.c **** 
 501:..\FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:..\FreeRTOS/tasks.c **** 
 503:..\FreeRTOS/tasks.c **** #endif
 504:..\FreeRTOS/tasks.c **** 
 505:..\FreeRTOS/tasks.c **** /*
 506:..\FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:..\FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:..\FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:..\FreeRTOS/tasks.c ****  */
 510:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:..\FreeRTOS/tasks.c **** 
 512:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:..\FreeRTOS/tasks.c **** 
 514:..\FreeRTOS/tasks.c **** #endif
 515:..\FreeRTOS/tasks.c **** 
 516:..\FreeRTOS/tasks.c **** /*
 517:..\FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:..\FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:..\FreeRTOS/tasks.c ****  *
 520:..\FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:..\FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:..\FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:..\FreeRTOS/tasks.c ****  * set to a value other than 1.
 524:..\FreeRTOS/tasks.c ****  */
 525:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:..\FreeRTOS/tasks.c **** 
 527:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:..\FreeRTOS/tasks.c **** 
 529:..\FreeRTOS/tasks.c **** #endif
 530:..\FreeRTOS/tasks.c **** 
 531:..\FreeRTOS/tasks.c **** /*
 532:..\FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:..\FreeRTOS/tasks.c ****  * will exit the Blocked state.
 534:..\FreeRTOS/tasks.c ****  */
 535:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:..\FreeRTOS/tasks.c **** 
 537:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:..\FreeRTOS/tasks.c **** 
 539:..\FreeRTOS/tasks.c **** 	/*
 540:..\FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:..\FreeRTOS/tasks.c **** 	 * human readable tables of task information.
 542:..\FreeRTOS/tasks.c **** 	 */
 543:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 11


 545:..\FreeRTOS/tasks.c **** #endif
 546:..\FreeRTOS/tasks.c **** 
 547:..\FreeRTOS/tasks.c **** /*
 548:..\FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:..\FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 550:..\FreeRTOS/tasks.c ****  */
 551:..\FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:..\FreeRTOS/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 554:..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 555:..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 556:..\FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:..\FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 558:..\FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:..\FreeRTOS/tasks.c **** 
 560:..\FreeRTOS/tasks.c **** /*
 561:..\FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:..\FreeRTOS/tasks.c ****  * under the control of the scheduler.
 563:..\FreeRTOS/tasks.c ****  */
 564:..\FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:..\FreeRTOS/tasks.c **** 
 566:..\FreeRTOS/tasks.c **** /*
 567:..\FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:..\FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:..\FreeRTOS/tasks.c ****  * called by the function.
 570:..\FreeRTOS/tasks.c ****  */
 571:..\FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:..\FreeRTOS/tasks.c **** 
 573:..\FreeRTOS/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:..\FreeRTOS/tasks.c **** 
 575:..\FreeRTOS/tasks.c **** #endif
 576:..\FreeRTOS/tasks.c **** 
 577:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 578:..\FreeRTOS/tasks.c **** 
 579:..\FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:..\FreeRTOS/tasks.c **** 
 581:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:..\FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 584:..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 585:..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 586:..\FreeRTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:..\FreeRTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:..\FreeRTOS/tasks.c **** 	{
 589:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 590:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 591:..\FreeRTOS/tasks.c **** 
 592:..\FreeRTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:..\FreeRTOS/tasks.c **** 
 595:..\FreeRTOS/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:..\FreeRTOS/tasks.c **** 		{
 597:..\FreeRTOS/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:..\FreeRTOS/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:..\FreeRTOS/tasks.c **** 			structure. */
 600:..\FreeRTOS/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:..\FreeRTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 12


 602:..\FreeRTOS/tasks.c **** 		}
 603:..\FreeRTOS/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:..\FreeRTOS/tasks.c **** 
 605:..\FreeRTOS/tasks.c **** 
 606:..\FreeRTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:..\FreeRTOS/tasks.c **** 		{
 608:..\FreeRTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:..\FreeRTOS/tasks.c **** 			function - use them. */
 610:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:..\FreeRTOS/tasks.c **** 
 613:..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:..\FreeRTOS/tasks.c **** 			{
 615:..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:..\FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:..\FreeRTOS/tasks.c **** 			}
 619:..\FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:..\FreeRTOS/tasks.c **** 
 621:..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:..\FreeRTOS/tasks.c **** 		}
 624:..\FreeRTOS/tasks.c **** 		else
 625:..\FreeRTOS/tasks.c **** 		{
 626:..\FreeRTOS/tasks.c **** 			xReturn = NULL;
 627:..\FreeRTOS/tasks.c **** 		}
 628:..\FreeRTOS/tasks.c **** 
 629:..\FreeRTOS/tasks.c **** 		return xReturn;
 630:..\FreeRTOS/tasks.c **** 	}
 631:..\FreeRTOS/tasks.c **** 
 632:..\FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 634:..\FreeRTOS/tasks.c **** 
 635:..\FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:..\FreeRTOS/tasks.c **** 
 637:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:..\FreeRTOS/tasks.c **** 	{
 639:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 640:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:..\FreeRTOS/tasks.c **** 
 642:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:..\FreeRTOS/tasks.c **** 
 645:..\FreeRTOS/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:..\FreeRTOS/tasks.c **** 		{
 647:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:..\FreeRTOS/tasks.c **** 			not static allocation is being used. */
 650:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:..\FreeRTOS/tasks.c **** 
 652:..\FreeRTOS/tasks.c **** 			/* Store the stack location in the TCB. */
 653:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:..\FreeRTOS/tasks.c **** 
 655:..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:..\FreeRTOS/tasks.c **** 			{
 657:..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:..\FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 13


 659:..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:..\FreeRTOS/tasks.c **** 			}
 661:..\FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:..\FreeRTOS/tasks.c **** 
 663:..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->pcName,
 665:..\FreeRTOS/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:..\FreeRTOS/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->xRegions );
 670:..\FreeRTOS/tasks.c **** 
 671:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 673:..\FreeRTOS/tasks.c **** 		}
 674:..\FreeRTOS/tasks.c **** 
 675:..\FreeRTOS/tasks.c **** 		return xReturn;
 676:..\FreeRTOS/tasks.c **** 	}
 677:..\FreeRTOS/tasks.c **** 
 678:..\FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 680:..\FreeRTOS/tasks.c **** 
 681:..\FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:..\FreeRTOS/tasks.c **** 
 683:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:..\FreeRTOS/tasks.c **** 	{
 685:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 686:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:..\FreeRTOS/tasks.c **** 
 688:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:..\FreeRTOS/tasks.c **** 
 690:..\FreeRTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:..\FreeRTOS/tasks.c **** 		{
 692:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:..\FreeRTOS/tasks.c **** 			not static allocation is being used. */
 695:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:..\FreeRTOS/tasks.c **** 
 697:..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 698:..\FreeRTOS/tasks.c **** 			{
 699:..\FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 700:..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:..\FreeRTOS/tasks.c **** 
 702:..\FreeRTOS/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:..\FreeRTOS/tasks.c **** 				{
 704:..\FreeRTOS/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:..\FreeRTOS/tasks.c **** 					this task had a statically allocated stack in case it is
 706:..\FreeRTOS/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:..\FreeRTOS/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:..\FreeRTOS/tasks.c **** 				}
 709:..\FreeRTOS/tasks.c **** 				#endif
 710:..\FreeRTOS/tasks.c **** 
 711:..\FreeRTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->pcName,
 713:..\FreeRTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 14


 716:..\FreeRTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 718:..\FreeRTOS/tasks.c **** 
 719:..\FreeRTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 721:..\FreeRTOS/tasks.c **** 			}
 722:..\FreeRTOS/tasks.c **** 		}
 723:..\FreeRTOS/tasks.c **** 
 724:..\FreeRTOS/tasks.c **** 		return xReturn;
 725:..\FreeRTOS/tasks.c **** 	}
 726:..\FreeRTOS/tasks.c **** 
 727:..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 729:..\FreeRTOS/tasks.c **** 
 730:..\FreeRTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:..\FreeRTOS/tasks.c **** 
 732:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:..\FreeRTOS/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:..\FreeRTOS/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:..\FreeRTOS/tasks.c **** 							void * const pvParameters,
 736:..\FreeRTOS/tasks.c **** 							UBaseType_t uxPriority,
 737:..\FreeRTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:..\FreeRTOS/tasks.c **** 	{
 739:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 740:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 741:..\FreeRTOS/tasks.c **** 
 742:..\FreeRTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:..\FreeRTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:..\FreeRTOS/tasks.c **** 		the TCB then the stack. */
 745:..\FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:..\FreeRTOS/tasks.c **** 		{
 747:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:..\FreeRTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:..\FreeRTOS/tasks.c **** 			allocation is being used. */
 750:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:..\FreeRTOS/tasks.c **** 
 752:..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 753:..\FreeRTOS/tasks.c **** 			{
 754:..\FreeRTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:..\FreeRTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:..\FreeRTOS/tasks.c **** 				be deleted later if required. */
 757:..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:..\FreeRTOS/tasks.c **** 
 759:..\FreeRTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:..\FreeRTOS/tasks.c **** 				{
 761:..\FreeRTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:..\FreeRTOS/tasks.c **** 					vPortFree( pxNewTCB );
 763:..\FreeRTOS/tasks.c **** 					pxNewTCB = NULL;
 764:..\FreeRTOS/tasks.c **** 				}
 765:..\FreeRTOS/tasks.c **** 			}
 766:..\FreeRTOS/tasks.c **** 		}
 767:..\FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:..\FreeRTOS/tasks.c **** 		{
 769:..\FreeRTOS/tasks.c **** 		StackType_t *pxStack;
 770:..\FreeRTOS/tasks.c **** 
 771:..\FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:..\FreeRTOS/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 15


 773:..\FreeRTOS/tasks.c **** 
 774:..\FreeRTOS/tasks.c **** 			if( pxStack != NULL )
 775:..\FreeRTOS/tasks.c **** 			{
 776:..\FreeRTOS/tasks.c **** 				/* Allocate space for the TCB. */
 777:..\FreeRTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 778:..\FreeRTOS/tasks.c **** 
 779:..\FreeRTOS/tasks.c **** 				if( pxNewTCB != NULL )
 780:..\FreeRTOS/tasks.c **** 				{
 781:..\FreeRTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 782:..\FreeRTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 783:..\FreeRTOS/tasks.c **** 				}
 784:..\FreeRTOS/tasks.c **** 				else
 785:..\FreeRTOS/tasks.c **** 				{
 786:..\FreeRTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:..\FreeRTOS/tasks.c **** 					it again. */
 788:..\FreeRTOS/tasks.c **** 					vPortFree( pxStack );
 789:..\FreeRTOS/tasks.c **** 				}
 790:..\FreeRTOS/tasks.c **** 			}
 791:..\FreeRTOS/tasks.c **** 			else
 792:..\FreeRTOS/tasks.c **** 			{
 793:..\FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
 794:..\FreeRTOS/tasks.c **** 			}
 795:..\FreeRTOS/tasks.c **** 		}
 796:..\FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:..\FreeRTOS/tasks.c **** 
 798:..\FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
 799:..\FreeRTOS/tasks.c **** 		{
 800:..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:..\FreeRTOS/tasks.c **** 			{
 802:..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:..\FreeRTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:..\FreeRTOS/tasks.c **** 			}
 806:..\FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:..\FreeRTOS/tasks.c **** 
 808:..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 809:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 811:..\FreeRTOS/tasks.c **** 		}
 812:..\FreeRTOS/tasks.c **** 		else
 813:..\FreeRTOS/tasks.c **** 		{
 814:..\FreeRTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 815:..\FreeRTOS/tasks.c **** 		}
 816:..\FreeRTOS/tasks.c **** 
 817:..\FreeRTOS/tasks.c **** 		return xReturn;
 818:..\FreeRTOS/tasks.c **** 	}
 819:..\FreeRTOS/tasks.c **** 
 820:..\FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 822:..\FreeRTOS/tasks.c **** 
 823:..\FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:..\FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 826:..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 827:..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 828:..\FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:..\FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 16


 830:..\FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:..\FreeRTOS/tasks.c **** {
 832:..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 833:..\FreeRTOS/tasks.c **** UBaseType_t x;
 834:..\FreeRTOS/tasks.c **** 
 835:..\FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:..\FreeRTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:..\FreeRTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 838:..\FreeRTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:..\FreeRTOS/tasks.c **** 		{
 840:..\FreeRTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:..\FreeRTOS/tasks.c **** 		}
 842:..\FreeRTOS/tasks.c **** 		else
 843:..\FreeRTOS/tasks.c **** 		{
 844:..\FreeRTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:..\FreeRTOS/tasks.c **** 		}
 846:..\FreeRTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:..\FreeRTOS/tasks.c **** 
 849:..\FreeRTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:..\FreeRTOS/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:..\FreeRTOS/tasks.c **** 	{
 852:..\FreeRTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:..\FreeRTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 854:..\FreeRTOS/tasks.c **** 	}
 855:..\FreeRTOS/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:..\FreeRTOS/tasks.c **** 
 857:..\FreeRTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:..\FreeRTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:..\FreeRTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:..\FreeRTOS/tasks.c **** 	by the port. */
 861:..\FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:..\FreeRTOS/tasks.c **** 	{
 863:..\FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 864:..\FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 865:..\FreeRTOS/tasks.c **** 
 866:..\FreeRTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:..\FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 868:..\FreeRTOS/tasks.c **** 
 869:..\FreeRTOS/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:..\FreeRTOS/tasks.c **** 		{
 871:..\FreeRTOS/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:..\FreeRTOS/tasks.c **** 			debugging. */
 873:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:..\FreeRTOS/tasks.c **** 		}
 875:..\FreeRTOS/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:..\FreeRTOS/tasks.c **** 	}
 877:..\FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:..\FreeRTOS/tasks.c **** 	{
 879:..\FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:..\FreeRTOS/tasks.c **** 
 881:..\FreeRTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:..\FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:..\FreeRTOS/tasks.c **** 
 884:..\FreeRTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:..\FreeRTOS/tasks.c **** 		performed. */
 886:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 17


 887:..\FreeRTOS/tasks.c **** 	}
 888:..\FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:..\FreeRTOS/tasks.c **** 
 890:..\FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
 891:..\FreeRTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:..\FreeRTOS/tasks.c **** 	{
 893:..\FreeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:..\FreeRTOS/tasks.c **** 
 895:..\FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:..\FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:..\FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:..\FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 899:..\FreeRTOS/tasks.c **** 		{
 900:..\FreeRTOS/tasks.c **** 			break;
 901:..\FreeRTOS/tasks.c **** 		}
 902:..\FreeRTOS/tasks.c **** 		else
 903:..\FreeRTOS/tasks.c **** 		{
 904:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:..\FreeRTOS/tasks.c **** 		}
 906:..\FreeRTOS/tasks.c **** 	}
 907:..\FreeRTOS/tasks.c **** 
 908:..\FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:..\FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:..\FreeRTOS/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:..\FreeRTOS/tasks.c **** 
 912:..\FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:..\FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
 914:..\FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915:..\FreeRTOS/tasks.c **** 	{
 916:..\FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 917:..\FreeRTOS/tasks.c **** 	}
 918:..\FreeRTOS/tasks.c **** 	else
 919:..\FreeRTOS/tasks.c **** 	{
 920:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:..\FreeRTOS/tasks.c **** 	}
 922:..\FreeRTOS/tasks.c **** 
 923:..\FreeRTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 924:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:..\FreeRTOS/tasks.c **** 	{
 926:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:..\FreeRTOS/tasks.c **** 	}
 929:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:..\FreeRTOS/tasks.c **** 
 931:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 932:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 933:..\FreeRTOS/tasks.c **** 
 934:..\FreeRTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:..\FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 937:..\FreeRTOS/tasks.c **** 
 938:..\FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
 939:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 940:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 941:..\FreeRTOS/tasks.c **** 
 942:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 18


 944:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:..\FreeRTOS/tasks.c **** 	}
 946:..\FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:..\FreeRTOS/tasks.c **** 
 948:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:..\FreeRTOS/tasks.c **** 	{
 950:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:..\FreeRTOS/tasks.c **** 	}
 952:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:..\FreeRTOS/tasks.c **** 
 954:..\FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:..\FreeRTOS/tasks.c **** 	{
 956:..\FreeRTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:..\FreeRTOS/tasks.c **** 	}
 958:..\FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:..\FreeRTOS/tasks.c **** 
 960:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:..\FreeRTOS/tasks.c **** 	{
 962:..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:..\FreeRTOS/tasks.c **** 	}
 964:..\FreeRTOS/tasks.c **** 	#else
 965:..\FreeRTOS/tasks.c **** 	{
 966:..\FreeRTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:..\FreeRTOS/tasks.c **** 		( void ) xRegions;
 968:..\FreeRTOS/tasks.c **** 	}
 969:..\FreeRTOS/tasks.c **** 	#endif
 970:..\FreeRTOS/tasks.c **** 
 971:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:..\FreeRTOS/tasks.c **** 	{
 973:..\FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 974:..\FreeRTOS/tasks.c **** 		{
 975:..\FreeRTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 976:..\FreeRTOS/tasks.c **** 		}
 977:..\FreeRTOS/tasks.c **** 	}
 978:..\FreeRTOS/tasks.c **** 	#endif
 979:..\FreeRTOS/tasks.c **** 
 980:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:..\FreeRTOS/tasks.c **** 	{
 982:..\FreeRTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 983:..\FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 984:..\FreeRTOS/tasks.c **** 	}
 985:..\FreeRTOS/tasks.c **** 	#endif
 986:..\FreeRTOS/tasks.c **** 
 987:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:..\FreeRTOS/tasks.c **** 	{
 989:..\FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:..\FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:..\FreeRTOS/tasks.c **** 	}
 992:..\FreeRTOS/tasks.c **** 	#endif
 993:..\FreeRTOS/tasks.c **** 
 994:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:..\FreeRTOS/tasks.c **** 	{
 996:..\FreeRTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:..\FreeRTOS/tasks.c **** 	}
 998:..\FreeRTOS/tasks.c **** 	#endif
 999:..\FreeRTOS/tasks.c **** 
1000:..\FreeRTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 19


1001:..\FreeRTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:..\FreeRTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:..\FreeRTOS/tasks.c **** 	the top of stack variable is updated. */
1004:..\FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:..\FreeRTOS/tasks.c **** 	{
1006:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:..\FreeRTOS/tasks.c **** 	}
1008:..\FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:..\FreeRTOS/tasks.c **** 	{
1010:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1011:..\FreeRTOS/tasks.c **** 	}
1012:..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:..\FreeRTOS/tasks.c **** 
1014:..\FreeRTOS/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1015:..\FreeRTOS/tasks.c **** 	{
1016:..\FreeRTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:..\FreeRTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:..\FreeRTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1019:..\FreeRTOS/tasks.c **** 	}
1020:..\FreeRTOS/tasks.c **** 	else
1021:..\FreeRTOS/tasks.c **** 	{
1022:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:..\FreeRTOS/tasks.c **** 	}
1024:..\FreeRTOS/tasks.c **** }
1025:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1026:..\FreeRTOS/tasks.c **** 
1027:..\FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:..\FreeRTOS/tasks.c **** {
1029:..\FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:..\FreeRTOS/tasks.c **** 	updated. */
1031:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
1032:..\FreeRTOS/tasks.c **** 	{
1033:..\FreeRTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
1034:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
1035:..\FreeRTOS/tasks.c **** 		{
1036:..\FreeRTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:..\FreeRTOS/tasks.c **** 			the suspended state - make this the current task. */
1038:..\FreeRTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1039:..\FreeRTOS/tasks.c **** 
1040:..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:..\FreeRTOS/tasks.c **** 			{
1042:..\FreeRTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:..\FreeRTOS/tasks.c **** 				initialisation required.  We will not recover if this call
1044:..\FreeRTOS/tasks.c **** 				fails, but we will report the failure. */
1045:..\FreeRTOS/tasks.c **** 				prvInitialiseTaskLists();
1046:..\FreeRTOS/tasks.c **** 			}
1047:..\FreeRTOS/tasks.c **** 			else
1048:..\FreeRTOS/tasks.c **** 			{
1049:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:..\FreeRTOS/tasks.c **** 			}
1051:..\FreeRTOS/tasks.c **** 		}
1052:..\FreeRTOS/tasks.c **** 		else
1053:..\FreeRTOS/tasks.c **** 		{
1054:..\FreeRTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:..\FreeRTOS/tasks.c **** 			current task if it is the highest priority task to be created
1056:..\FreeRTOS/tasks.c **** 			so far. */
1057:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 20


1058:..\FreeRTOS/tasks.c **** 			{
1059:..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:..\FreeRTOS/tasks.c **** 				{
1061:..\FreeRTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1062:..\FreeRTOS/tasks.c **** 				}
1063:..\FreeRTOS/tasks.c **** 				else
1064:..\FreeRTOS/tasks.c **** 				{
1065:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:..\FreeRTOS/tasks.c **** 				}
1067:..\FreeRTOS/tasks.c **** 			}
1068:..\FreeRTOS/tasks.c **** 			else
1069:..\FreeRTOS/tasks.c **** 			{
1070:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:..\FreeRTOS/tasks.c **** 			}
1072:..\FreeRTOS/tasks.c **** 		}
1073:..\FreeRTOS/tasks.c **** 
1074:..\FreeRTOS/tasks.c **** 		uxTaskNumber++;
1075:..\FreeRTOS/tasks.c **** 
1076:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:..\FreeRTOS/tasks.c **** 		{
1078:..\FreeRTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:..\FreeRTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:..\FreeRTOS/tasks.c **** 		}
1081:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:..\FreeRTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:..\FreeRTOS/tasks.c **** 
1084:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1085:..\FreeRTOS/tasks.c **** 
1086:..\FreeRTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:..\FreeRTOS/tasks.c **** 	}
1088:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1089:..\FreeRTOS/tasks.c **** 
1090:..\FreeRTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1091:..\FreeRTOS/tasks.c **** 	{
1092:..\FreeRTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:..\FreeRTOS/tasks.c **** 		then it should run now. */
1094:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:..\FreeRTOS/tasks.c **** 		{
1096:..\FreeRTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1097:..\FreeRTOS/tasks.c **** 		}
1098:..\FreeRTOS/tasks.c **** 		else
1099:..\FreeRTOS/tasks.c **** 		{
1100:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:..\FreeRTOS/tasks.c **** 		}
1102:..\FreeRTOS/tasks.c **** 	}
1103:..\FreeRTOS/tasks.c **** 	else
1104:..\FreeRTOS/tasks.c **** 	{
1105:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:..\FreeRTOS/tasks.c **** 	}
1107:..\FreeRTOS/tasks.c **** }
1108:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1109:..\FreeRTOS/tasks.c **** 
1110:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:..\FreeRTOS/tasks.c **** 
1112:..\FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:..\FreeRTOS/tasks.c **** 	{
1114:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 21


1115:..\FreeRTOS/tasks.c **** 
1116:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1117:..\FreeRTOS/tasks.c **** 		{
1118:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:..\FreeRTOS/tasks.c **** 			being deleted. */
1120:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:..\FreeRTOS/tasks.c **** 
1122:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready list. */
1123:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:..\FreeRTOS/tasks.c **** 			{
1125:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:..\FreeRTOS/tasks.c **** 			}
1127:..\FreeRTOS/tasks.c **** 			else
1128:..\FreeRTOS/tasks.c **** 			{
1129:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:..\FreeRTOS/tasks.c **** 			}
1131:..\FreeRTOS/tasks.c **** 
1132:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1133:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:..\FreeRTOS/tasks.c **** 			{
1135:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:..\FreeRTOS/tasks.c **** 			}
1137:..\FreeRTOS/tasks.c **** 			else
1138:..\FreeRTOS/tasks.c **** 			{
1139:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:..\FreeRTOS/tasks.c **** 			}
1141:..\FreeRTOS/tasks.c **** 
1142:..\FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:..\FreeRTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:..\FreeRTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:..\FreeRTOS/tasks.c **** 			not return. */
1146:..\FreeRTOS/tasks.c **** 			uxTaskNumber++;
1147:..\FreeRTOS/tasks.c **** 
1148:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1149:..\FreeRTOS/tasks.c **** 			{
1150:..\FreeRTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:..\FreeRTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1152:..\FreeRTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:..\FreeRTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1154:..\FreeRTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:..\FreeRTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:..\FreeRTOS/tasks.c **** 
1157:..\FreeRTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:..\FreeRTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:..\FreeRTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:..\FreeRTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1161:..\FreeRTOS/tasks.c **** 
1162:..\FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:..\FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:..\FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1165:..\FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:..\FreeRTOS/tasks.c **** 				required. */
1167:..\FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:..\FreeRTOS/tasks.c **** 			}
1169:..\FreeRTOS/tasks.c **** 			else
1170:..\FreeRTOS/tasks.c **** 			{
1171:..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 22


1172:..\FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1173:..\FreeRTOS/tasks.c **** 
1174:..\FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:..\FreeRTOS/tasks.c **** 				the task that has just been deleted. */
1176:..\FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1177:..\FreeRTOS/tasks.c **** 			}
1178:..\FreeRTOS/tasks.c **** 
1179:..\FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:..\FreeRTOS/tasks.c **** 		}
1181:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1182:..\FreeRTOS/tasks.c **** 
1183:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:..\FreeRTOS/tasks.c **** 		been deleted. */
1185:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1186:..\FreeRTOS/tasks.c **** 		{
1187:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1188:..\FreeRTOS/tasks.c **** 			{
1189:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1190:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1191:..\FreeRTOS/tasks.c **** 			}
1192:..\FreeRTOS/tasks.c **** 			else
1193:..\FreeRTOS/tasks.c **** 			{
1194:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:..\FreeRTOS/tasks.c **** 			}
1196:..\FreeRTOS/tasks.c **** 		}
1197:..\FreeRTOS/tasks.c **** 	}
1198:..\FreeRTOS/tasks.c **** 
1199:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1201:..\FreeRTOS/tasks.c **** 
1202:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:..\FreeRTOS/tasks.c **** 
1204:..\FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:..\FreeRTOS/tasks.c **** 	{
1206:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
1207:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1208:..\FreeRTOS/tasks.c **** 
1209:..\FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1210:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1211:..\FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1212:..\FreeRTOS/tasks.c **** 
1213:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1214:..\FreeRTOS/tasks.c **** 		{
1215:..\FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:..\FreeRTOS/tasks.c **** 			block. */
1217:..\FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1218:..\FreeRTOS/tasks.c **** 
1219:..\FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:..\FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1221:..\FreeRTOS/tasks.c **** 
1222:..\FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1223:..\FreeRTOS/tasks.c **** 			{
1224:..\FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1225:..\FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:..\FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:..\FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:..\FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 23


1229:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1230:..\FreeRTOS/tasks.c **** 				{
1231:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1232:..\FreeRTOS/tasks.c **** 				}
1233:..\FreeRTOS/tasks.c **** 				else
1234:..\FreeRTOS/tasks.c **** 				{
1235:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:..\FreeRTOS/tasks.c **** 				}
1237:..\FreeRTOS/tasks.c **** 			}
1238:..\FreeRTOS/tasks.c **** 			else
1239:..\FreeRTOS/tasks.c **** 			{
1240:..\FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:..\FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:..\FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
1243:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1244:..\FreeRTOS/tasks.c **** 				{
1245:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1246:..\FreeRTOS/tasks.c **** 				}
1247:..\FreeRTOS/tasks.c **** 				else
1248:..\FreeRTOS/tasks.c **** 				{
1249:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:..\FreeRTOS/tasks.c **** 				}
1251:..\FreeRTOS/tasks.c **** 			}
1252:..\FreeRTOS/tasks.c **** 
1253:..\FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:..\FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1255:..\FreeRTOS/tasks.c **** 
1256:..\FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
1257:..\FreeRTOS/tasks.c **** 			{
1258:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:..\FreeRTOS/tasks.c **** 
1260:..\FreeRTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:..\FreeRTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1263:..\FreeRTOS/tasks.c **** 			}
1264:..\FreeRTOS/tasks.c **** 			else
1265:..\FreeRTOS/tasks.c **** 			{
1266:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:..\FreeRTOS/tasks.c **** 			}
1268:..\FreeRTOS/tasks.c **** 		}
1269:..\FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1270:..\FreeRTOS/tasks.c **** 
1271:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1273:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1274:..\FreeRTOS/tasks.c **** 		{
1275:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1276:..\FreeRTOS/tasks.c **** 		}
1277:..\FreeRTOS/tasks.c **** 		else
1278:..\FreeRTOS/tasks.c **** 		{
1279:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:..\FreeRTOS/tasks.c **** 		}
1281:..\FreeRTOS/tasks.c **** 	}
1282:..\FreeRTOS/tasks.c **** 
1283:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1285:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 24


1286:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:..\FreeRTOS/tasks.c **** 
1288:..\FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:..\FreeRTOS/tasks.c **** 	{
1290:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1291:..\FreeRTOS/tasks.c **** 
1292:..\FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:..\FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1294:..\FreeRTOS/tasks.c **** 		{
1295:..\FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1296:..\FreeRTOS/tasks.c **** 			vTaskSuspendAll();
1297:..\FreeRTOS/tasks.c **** 			{
1298:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY();
1299:..\FreeRTOS/tasks.c **** 
1300:..\FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
1301:..\FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:..\FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:..\FreeRTOS/tasks.c **** 				is resumed.
1304:..\FreeRTOS/tasks.c **** 
1305:..\FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:..\FreeRTOS/tasks.c **** 				executing task. */
1307:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1308:..\FreeRTOS/tasks.c **** 			}
1309:..\FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1310:..\FreeRTOS/tasks.c **** 		}
1311:..\FreeRTOS/tasks.c **** 		else
1312:..\FreeRTOS/tasks.c **** 		{
1313:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:..\FreeRTOS/tasks.c **** 		}
1315:..\FreeRTOS/tasks.c **** 
1316:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1318:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:..\FreeRTOS/tasks.c **** 		{
1320:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1321:..\FreeRTOS/tasks.c **** 		}
1322:..\FreeRTOS/tasks.c **** 		else
1323:..\FreeRTOS/tasks.c **** 		{
1324:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:..\FreeRTOS/tasks.c **** 		}
1326:..\FreeRTOS/tasks.c **** 	}
1327:..\FreeRTOS/tasks.c **** 
1328:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1330:..\FreeRTOS/tasks.c **** 
1331:..\FreeRTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:..\FreeRTOS/tasks.c **** 
1333:..\FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:..\FreeRTOS/tasks.c **** 	{
1335:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
1336:..\FreeRTOS/tasks.c **** 	List_t *pxStateList;
1337:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:..\FreeRTOS/tasks.c **** 
1339:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1340:..\FreeRTOS/tasks.c **** 
1341:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 25


1343:..\FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:..\FreeRTOS/tasks.c **** 			eReturn = eRunning;
1345:..\FreeRTOS/tasks.c **** 		}
1346:..\FreeRTOS/tasks.c **** 		else
1347:..\FreeRTOS/tasks.c **** 		{
1348:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1349:..\FreeRTOS/tasks.c **** 			{
1350:..\FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:..\FreeRTOS/tasks.c **** 			}
1352:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1353:..\FreeRTOS/tasks.c **** 
1354:..\FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:..\FreeRTOS/tasks.c **** 			{
1356:..\FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:..\FreeRTOS/tasks.c **** 				lists. */
1358:..\FreeRTOS/tasks.c **** 				eReturn = eBlocked;
1359:..\FreeRTOS/tasks.c **** 			}
1360:..\FreeRTOS/tasks.c **** 
1361:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:..\FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:..\FreeRTOS/tasks.c **** 				{
1364:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:..\FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:..\FreeRTOS/tasks.c **** 					indefinitely? */
1367:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:..\FreeRTOS/tasks.c **** 					{
1369:..\FreeRTOS/tasks.c **** 						eReturn = eSuspended;
1370:..\FreeRTOS/tasks.c **** 					}
1371:..\FreeRTOS/tasks.c **** 					else
1372:..\FreeRTOS/tasks.c **** 					{
1373:..\FreeRTOS/tasks.c **** 						eReturn = eBlocked;
1374:..\FreeRTOS/tasks.c **** 					}
1375:..\FreeRTOS/tasks.c **** 				}
1376:..\FreeRTOS/tasks.c **** 			#endif
1377:..\FreeRTOS/tasks.c **** 
1378:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:..\FreeRTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:..\FreeRTOS/tasks.c **** 				{
1381:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:..\FreeRTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:..\FreeRTOS/tasks.c **** 					all. */
1384:..\FreeRTOS/tasks.c **** 					eReturn = eDeleted;
1385:..\FreeRTOS/tasks.c **** 				}
1386:..\FreeRTOS/tasks.c **** 			#endif
1387:..\FreeRTOS/tasks.c **** 
1388:..\FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:..\FreeRTOS/tasks.c **** 			{
1390:..\FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:..\FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1392:..\FreeRTOS/tasks.c **** 				eReturn = eReady;
1393:..\FreeRTOS/tasks.c **** 			}
1394:..\FreeRTOS/tasks.c **** 		}
1395:..\FreeRTOS/tasks.c **** 
1396:..\FreeRTOS/tasks.c **** 		return eReturn;
1397:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:..\FreeRTOS/tasks.c **** 
1399:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 26


1400:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1401:..\FreeRTOS/tasks.c **** 
1402:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:..\FreeRTOS/tasks.c **** 
1404:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:..\FreeRTOS/tasks.c **** 	{
1406:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1407:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1408:..\FreeRTOS/tasks.c **** 
1409:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1410:..\FreeRTOS/tasks.c **** 		{
1411:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:..\FreeRTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1414:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1415:..\FreeRTOS/tasks.c **** 		}
1416:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1417:..\FreeRTOS/tasks.c **** 
1418:..\FreeRTOS/tasks.c **** 		return uxReturn;
1419:..\FreeRTOS/tasks.c **** 	}
1420:..\FreeRTOS/tasks.c **** 
1421:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1423:..\FreeRTOS/tasks.c **** 
1424:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:..\FreeRTOS/tasks.c **** 
1426:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:..\FreeRTOS/tasks.c **** 	{
1428:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1429:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:..\FreeRTOS/tasks.c **** 
1431:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:..\FreeRTOS/tasks.c **** 		provided on the following link:
1446:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1448:..\FreeRTOS/tasks.c **** 
1449:..\FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1450:..\FreeRTOS/tasks.c **** 		{
1451:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:..\FreeRTOS/tasks.c **** 			task that is being queried. */
1453:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1454:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1455:..\FreeRTOS/tasks.c **** 		}
1456:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 27


1457:..\FreeRTOS/tasks.c **** 
1458:..\FreeRTOS/tasks.c **** 		return uxReturn;
1459:..\FreeRTOS/tasks.c **** 	}
1460:..\FreeRTOS/tasks.c **** 
1461:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1463:..\FreeRTOS/tasks.c **** 
1464:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:..\FreeRTOS/tasks.c **** 
1466:..\FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:..\FreeRTOS/tasks.c **** 	{
1468:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1469:..\FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1471:..\FreeRTOS/tasks.c **** 
1472:..\FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1473:..\FreeRTOS/tasks.c **** 
1474:..\FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1475:..\FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1476:..\FreeRTOS/tasks.c **** 		{
1477:..\FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1478:..\FreeRTOS/tasks.c **** 		}
1479:..\FreeRTOS/tasks.c **** 		else
1480:..\FreeRTOS/tasks.c **** 		{
1481:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:..\FreeRTOS/tasks.c **** 		}
1483:..\FreeRTOS/tasks.c **** 
1484:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1485:..\FreeRTOS/tasks.c **** 		{
1486:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:..\FreeRTOS/tasks.c **** 			task that is being changed. */
1488:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1489:..\FreeRTOS/tasks.c **** 
1490:..\FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:..\FreeRTOS/tasks.c **** 
1492:..\FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:..\FreeRTOS/tasks.c **** 			{
1494:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:..\FreeRTOS/tasks.c **** 			}
1496:..\FreeRTOS/tasks.c **** 			#else
1497:..\FreeRTOS/tasks.c **** 			{
1498:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:..\FreeRTOS/tasks.c **** 			}
1500:..\FreeRTOS/tasks.c **** 			#endif
1501:..\FreeRTOS/tasks.c **** 
1502:..\FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1503:..\FreeRTOS/tasks.c **** 			{
1504:..\FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1505:..\FreeRTOS/tasks.c **** 				priority than the calling task. */
1506:..\FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1507:..\FreeRTOS/tasks.c **** 				{
1508:..\FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1509:..\FreeRTOS/tasks.c **** 					{
1510:..\FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1511:..\FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1512:..\FreeRTOS/tasks.c **** 						raised above that of the running task? */
1513:..\FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 28


1514:..\FreeRTOS/tasks.c **** 						{
1515:..\FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1516:..\FreeRTOS/tasks.c **** 						}
1517:..\FreeRTOS/tasks.c **** 						else
1518:..\FreeRTOS/tasks.c **** 						{
1519:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:..\FreeRTOS/tasks.c **** 						}
1521:..\FreeRTOS/tasks.c **** 					}
1522:..\FreeRTOS/tasks.c **** 					else
1523:..\FreeRTOS/tasks.c **** 					{
1524:..\FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1525:..\FreeRTOS/tasks.c **** 						but the running task must already be the highest
1526:..\FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1527:..\FreeRTOS/tasks.c **** 					}
1528:..\FreeRTOS/tasks.c **** 				}
1529:..\FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1530:..\FreeRTOS/tasks.c **** 				{
1531:..\FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1532:..\FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1533:..\FreeRTOS/tasks.c **** 					is ready to execute. */
1534:..\FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1535:..\FreeRTOS/tasks.c **** 				}
1536:..\FreeRTOS/tasks.c **** 				else
1537:..\FreeRTOS/tasks.c **** 				{
1538:..\FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1539:..\FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1540:..\FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1541:..\FreeRTOS/tasks.c **** 				}
1542:..\FreeRTOS/tasks.c **** 
1543:..\FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:..\FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1545:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:..\FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1547:..\FreeRTOS/tasks.c **** 
1548:..\FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:..\FreeRTOS/tasks.c **** 				{
1550:..\FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1551:..\FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1552:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:..\FreeRTOS/tasks.c **** 					{
1554:..\FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:..\FreeRTOS/tasks.c **** 					}
1556:..\FreeRTOS/tasks.c **** 					else
1557:..\FreeRTOS/tasks.c **** 					{
1558:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:..\FreeRTOS/tasks.c **** 					}
1560:..\FreeRTOS/tasks.c **** 
1561:..\FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1562:..\FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:..\FreeRTOS/tasks.c **** 				}
1564:..\FreeRTOS/tasks.c **** 				#else
1565:..\FreeRTOS/tasks.c **** 				{
1566:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:..\FreeRTOS/tasks.c **** 				}
1568:..\FreeRTOS/tasks.c **** 				#endif
1569:..\FreeRTOS/tasks.c **** 
1570:..\FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 29


1571:..\FreeRTOS/tasks.c **** 				being used for anything else. */
1572:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1573:..\FreeRTOS/tasks.c **** 				{
1574:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1575:..\FreeRTOS/tasks.c **** 				}
1576:..\FreeRTOS/tasks.c **** 				else
1577:..\FreeRTOS/tasks.c **** 				{
1578:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:..\FreeRTOS/tasks.c **** 				}
1580:..\FreeRTOS/tasks.c **** 
1581:..\FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:..\FreeRTOS/tasks.c **** 				nothing more than change its priority variable. However, if
1583:..\FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:..\FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1585:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1586:..\FreeRTOS/tasks.c **** 				{
1587:..\FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:..\FreeRTOS/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:..\FreeRTOS/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1591:..\FreeRTOS/tasks.c **** 					{
1592:..\FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1593:..\FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1594:..\FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1595:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:..\FreeRTOS/tasks.c **** 					}
1597:..\FreeRTOS/tasks.c **** 					else
1598:..\FreeRTOS/tasks.c **** 					{
1599:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:..\FreeRTOS/tasks.c **** 					}
1601:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1602:..\FreeRTOS/tasks.c **** 				}
1603:..\FreeRTOS/tasks.c **** 				else
1604:..\FreeRTOS/tasks.c **** 				{
1605:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:..\FreeRTOS/tasks.c **** 				}
1607:..\FreeRTOS/tasks.c **** 
1608:..\FreeRTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
1609:..\FreeRTOS/tasks.c **** 				{
1610:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1611:..\FreeRTOS/tasks.c **** 				}
1612:..\FreeRTOS/tasks.c **** 				else
1613:..\FreeRTOS/tasks.c **** 				{
1614:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:..\FreeRTOS/tasks.c **** 				}
1616:..\FreeRTOS/tasks.c **** 
1617:..\FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:..\FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1619:..\FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:..\FreeRTOS/tasks.c **** 			}
1621:..\FreeRTOS/tasks.c **** 		}
1622:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1623:..\FreeRTOS/tasks.c **** 	}
1624:..\FreeRTOS/tasks.c **** 
1625:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1627:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 30


1628:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:..\FreeRTOS/tasks.c **** 
1630:..\FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:..\FreeRTOS/tasks.c **** 	{
1632:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1633:..\FreeRTOS/tasks.c **** 
1634:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1635:..\FreeRTOS/tasks.c **** 		{
1636:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:..\FreeRTOS/tasks.c **** 			being suspended. */
1638:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1639:..\FreeRTOS/tasks.c **** 
1640:..\FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:..\FreeRTOS/tasks.c **** 
1642:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:..\FreeRTOS/tasks.c **** 			suspended list. */
1644:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1645:..\FreeRTOS/tasks.c **** 			{
1646:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:..\FreeRTOS/tasks.c **** 			}
1648:..\FreeRTOS/tasks.c **** 			else
1649:..\FreeRTOS/tasks.c **** 			{
1650:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:..\FreeRTOS/tasks.c **** 			}
1652:..\FreeRTOS/tasks.c **** 
1653:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1654:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1655:..\FreeRTOS/tasks.c **** 			{
1656:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1657:..\FreeRTOS/tasks.c **** 			}
1658:..\FreeRTOS/tasks.c **** 			else
1659:..\FreeRTOS/tasks.c **** 			{
1660:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:..\FreeRTOS/tasks.c **** 			}
1662:..\FreeRTOS/tasks.c **** 
1663:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1664:..\FreeRTOS/tasks.c **** 
1665:..\FreeRTOS/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:..\FreeRTOS/tasks.c **** 			{
1667:..\FreeRTOS/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1668:..\FreeRTOS/tasks.c **** 				{
1669:..\FreeRTOS/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:..\FreeRTOS/tasks.c **** 					now suspended, so no notification was received. */
1671:..\FreeRTOS/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1672:..\FreeRTOS/tasks.c **** 				}
1673:..\FreeRTOS/tasks.c **** 			}
1674:..\FreeRTOS/tasks.c **** 			#endif
1675:..\FreeRTOS/tasks.c **** 		}
1676:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1677:..\FreeRTOS/tasks.c **** 
1678:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1679:..\FreeRTOS/tasks.c **** 		{
1680:..\FreeRTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:..\FreeRTOS/tasks.c **** 			task that is now in the Suspended state. */
1682:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1683:..\FreeRTOS/tasks.c **** 			{
1684:..\FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 31


1685:..\FreeRTOS/tasks.c **** 			}
1686:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1687:..\FreeRTOS/tasks.c **** 		}
1688:..\FreeRTOS/tasks.c **** 		else
1689:..\FreeRTOS/tasks.c **** 		{
1690:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:..\FreeRTOS/tasks.c **** 		}
1692:..\FreeRTOS/tasks.c **** 
1693:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1694:..\FreeRTOS/tasks.c **** 		{
1695:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1696:..\FreeRTOS/tasks.c **** 			{
1697:..\FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1698:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1699:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1700:..\FreeRTOS/tasks.c **** 			}
1701:..\FreeRTOS/tasks.c **** 			else
1702:..\FreeRTOS/tasks.c **** 			{
1703:..\FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:..\FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:..\FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1706:..\FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:..\FreeRTOS/tasks.c **** 				{
1708:..\FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:..\FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:..\FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1711:..\FreeRTOS/tasks.c **** 					is. */
1712:..\FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1713:..\FreeRTOS/tasks.c **** 				}
1714:..\FreeRTOS/tasks.c **** 				else
1715:..\FreeRTOS/tasks.c **** 				{
1716:..\FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1717:..\FreeRTOS/tasks.c **** 				}
1718:..\FreeRTOS/tasks.c **** 			}
1719:..\FreeRTOS/tasks.c **** 		}
1720:..\FreeRTOS/tasks.c **** 		else
1721:..\FreeRTOS/tasks.c **** 		{
1722:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:..\FreeRTOS/tasks.c **** 		}
1724:..\FreeRTOS/tasks.c **** 	}
1725:..\FreeRTOS/tasks.c **** 
1726:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:..\FreeRTOS/tasks.c **** 
1729:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:..\FreeRTOS/tasks.c **** 
1731:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:..\FreeRTOS/tasks.c **** 	{
  27              		.loc 1 1732 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1733:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1734:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1735:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 32


1736:..\FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:..\FreeRTOS/tasks.c **** 		section. */
1738:..\FreeRTOS/tasks.c **** 
1739:..\FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:..\FreeRTOS/tasks.c **** 		configASSERT( xTask );
1741:..\FreeRTOS/tasks.c **** 
1742:..\FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:..\FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1743 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 0B4B     		ldr	r3, .L10
  36 0004 9A42     		cmp	r2, r3
  37 0006 01D1     		bne	.L5
  38 0008 0123     		movs	r3, #1
  39 000a 00E0     		b	.L2
  40              	.L5:
  41 000c 0023     		movs	r3, #0
  42              	.L2:
  43              		.loc 1 1743 0 is_stmt 0 discriminator 4
  44 000e 43B1     		cbz	r3, .L6
1744:..\FreeRTOS/tasks.c **** 		{
1745:..\FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:..\FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  45              		.loc 1 1746 0 is_stmt 1
  46 0010 826A     		ldr	r2, [r0, #40]
  47 0012 0849     		ldr	r1, .L10+4
  48 0014 8A42     		cmp	r2, r1
  49 0016 06D0     		beq	.L7
1747:..\FreeRTOS/tasks.c **** 			{
1748:..\FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:..\FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  50              		.loc 1 1750 0
  51 0018 02B1     		cbz	r2, .L4
  52 001a 0023     		movs	r3, #0
  53              	.L4:
  54              		.loc 1 1750 0 is_stmt 0 discriminator 4
  55 001c 2BB9     		cbnz	r3, .L9
1733:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  56              		.loc 1 1733 0 is_stmt 1
  57 001e 0020     		movs	r0, #0
  58              	.LVL1:
  59 0020 7047     		bx	lr
  60              	.LVL2:
  61              	.L6:
  62 0022 0020     		movs	r0, #0
  63              	.LVL3:
  64 0024 7047     		bx	lr
  65              	.LVL4:
  66              	.L7:
  67 0026 0020     		movs	r0, #0
  68              	.LVL5:
  69 0028 7047     		bx	lr
  70              	.LVL6:
  71              	.L9:
1751:..\FreeRTOS/tasks.c **** 				{
1752:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 33


  72              		.loc 1 1752 0
  73 002a 0120     		movs	r0, #1
  74              	.LVL7:
1753:..\FreeRTOS/tasks.c **** 				}
1754:..\FreeRTOS/tasks.c **** 				else
1755:..\FreeRTOS/tasks.c **** 				{
1756:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:..\FreeRTOS/tasks.c **** 				}
1758:..\FreeRTOS/tasks.c **** 			}
1759:..\FreeRTOS/tasks.c **** 			else
1760:..\FreeRTOS/tasks.c **** 			{
1761:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:..\FreeRTOS/tasks.c **** 			}
1763:..\FreeRTOS/tasks.c **** 		}
1764:..\FreeRTOS/tasks.c **** 		else
1765:..\FreeRTOS/tasks.c **** 		{
1766:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:..\FreeRTOS/tasks.c **** 		}
1768:..\FreeRTOS/tasks.c **** 
1769:..\FreeRTOS/tasks.c **** 		return xReturn;
1770:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  75              		.loc 1 1770 0
  76 002c 7047     		bx	lr
  77              	.L11:
  78 002e 00BF     		.align	2
  79              	.L10:
  80 0030 00000000 		.word	.LANCHOR0
  81 0034 14000000 		.word	.LANCHOR0+20
  82              		.cfi_endproc
  83              	.LFE80:
  84              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  85              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  86              		.align	2
  87              		.thumb
  88              		.thumb_func
  89              		.type	prvTaskCheckFreeStackSpace, %function
  90              	prvTaskCheckFreeStackSpace:
  91              	.LFB104:
1771:..\FreeRTOS/tasks.c **** 
1772:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1774:..\FreeRTOS/tasks.c **** 
1775:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:..\FreeRTOS/tasks.c **** 
1777:..\FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:..\FreeRTOS/tasks.c **** 	{
1779:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1780:..\FreeRTOS/tasks.c **** 
1781:..\FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1783:..\FreeRTOS/tasks.c **** 
1784:..\FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:..\FreeRTOS/tasks.c **** 		currently executing task. */
1786:..\FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1787:..\FreeRTOS/tasks.c **** 		{
1788:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1789:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 34


1790:..\FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1791:..\FreeRTOS/tasks.c **** 				{
1792:..\FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:..\FreeRTOS/tasks.c **** 
1794:..\FreeRTOS/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:..\FreeRTOS/tasks.c **** 					suspended because this is inside a critical section. */
1796:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1797:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1798:..\FreeRTOS/tasks.c **** 
1799:..\FreeRTOS/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1801:..\FreeRTOS/tasks.c **** 					{
1802:..\FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:..\FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1804:..\FreeRTOS/tasks.c **** 						next yield. */
1805:..\FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1806:..\FreeRTOS/tasks.c **** 					}
1807:..\FreeRTOS/tasks.c **** 					else
1808:..\FreeRTOS/tasks.c **** 					{
1809:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:..\FreeRTOS/tasks.c **** 					}
1811:..\FreeRTOS/tasks.c **** 				}
1812:..\FreeRTOS/tasks.c **** 				else
1813:..\FreeRTOS/tasks.c **** 				{
1814:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:..\FreeRTOS/tasks.c **** 				}
1816:..\FreeRTOS/tasks.c **** 			}
1817:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1818:..\FreeRTOS/tasks.c **** 		}
1819:..\FreeRTOS/tasks.c **** 		else
1820:..\FreeRTOS/tasks.c **** 		{
1821:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:..\FreeRTOS/tasks.c **** 		}
1823:..\FreeRTOS/tasks.c **** 	}
1824:..\FreeRTOS/tasks.c **** 
1825:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:..\FreeRTOS/tasks.c **** 
1827:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1828:..\FreeRTOS/tasks.c **** 
1829:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:..\FreeRTOS/tasks.c **** 
1831:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:..\FreeRTOS/tasks.c **** 	{
1833:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1834:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1835:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:..\FreeRTOS/tasks.c **** 
1837:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1838:..\FreeRTOS/tasks.c **** 
1839:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 35


1847:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:..\FreeRTOS/tasks.c **** 		provided on the following link:
1854:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1856:..\FreeRTOS/tasks.c **** 
1857:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1858:..\FreeRTOS/tasks.c **** 		{
1859:..\FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1860:..\FreeRTOS/tasks.c **** 			{
1861:..\FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:..\FreeRTOS/tasks.c **** 
1863:..\FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1865:..\FreeRTOS/tasks.c **** 				{
1866:..\FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:..\FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1868:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1869:..\FreeRTOS/tasks.c **** 					{
1870:..\FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1871:..\FreeRTOS/tasks.c **** 					}
1872:..\FreeRTOS/tasks.c **** 					else
1873:..\FreeRTOS/tasks.c **** 					{
1874:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:..\FreeRTOS/tasks.c **** 					}
1876:..\FreeRTOS/tasks.c **** 
1877:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:..\FreeRTOS/tasks.c **** 				}
1880:..\FreeRTOS/tasks.c **** 				else
1881:..\FreeRTOS/tasks.c **** 				{
1882:..\FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:..\FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:..\FreeRTOS/tasks.c **** 					unsuspended. */
1885:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1886:..\FreeRTOS/tasks.c **** 				}
1887:..\FreeRTOS/tasks.c **** 			}
1888:..\FreeRTOS/tasks.c **** 			else
1889:..\FreeRTOS/tasks.c **** 			{
1890:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:..\FreeRTOS/tasks.c **** 			}
1892:..\FreeRTOS/tasks.c **** 		}
1893:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:..\FreeRTOS/tasks.c **** 
1895:..\FreeRTOS/tasks.c **** 		return xYieldRequired;
1896:..\FreeRTOS/tasks.c **** 	}
1897:..\FreeRTOS/tasks.c **** 
1898:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1900:..\FreeRTOS/tasks.c **** 
1901:..\FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1902:..\FreeRTOS/tasks.c **** {
1903:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 36


1904:..\FreeRTOS/tasks.c **** 
1905:..\FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:..\FreeRTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:..\FreeRTOS/tasks.c **** 	{
1908:..\FreeRTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:..\FreeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:..\FreeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:..\FreeRTOS/tasks.c **** 
1912:..\FreeRTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:..\FreeRTOS/tasks.c **** 		address of the RAM then create the idle task. */
1914:..\FreeRTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:..\FreeRTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:..\FreeRTOS/tasks.c **** 												configIDLE_TASK_NAME,
1917:..\FreeRTOS/tasks.c **** 												ulIdleTaskStackSize,
1918:..\FreeRTOS/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:..\FreeRTOS/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:..\FreeRTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1921:..\FreeRTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:..\FreeRTOS/tasks.c **** 
1923:..\FreeRTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:..\FreeRTOS/tasks.c **** 		{
1925:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
1926:..\FreeRTOS/tasks.c **** 		}
1927:..\FreeRTOS/tasks.c **** 		else
1928:..\FreeRTOS/tasks.c **** 		{
1929:..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
1930:..\FreeRTOS/tasks.c **** 		}
1931:..\FreeRTOS/tasks.c **** 	}
1932:..\FreeRTOS/tasks.c **** 	#else
1933:..\FreeRTOS/tasks.c **** 	{
1934:..\FreeRTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:..\FreeRTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1936:..\FreeRTOS/tasks.c **** 								configIDLE_TASK_NAME,
1937:..\FreeRTOS/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:..\FreeRTOS/tasks.c **** 								( void * ) NULL,
1939:..\FreeRTOS/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:..\FreeRTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:..\FreeRTOS/tasks.c **** 	}
1942:..\FreeRTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:..\FreeRTOS/tasks.c **** 
1944:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:..\FreeRTOS/tasks.c **** 	{
1946:..\FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1947:..\FreeRTOS/tasks.c **** 		{
1948:..\FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1949:..\FreeRTOS/tasks.c **** 		}
1950:..\FreeRTOS/tasks.c **** 		else
1951:..\FreeRTOS/tasks.c **** 		{
1952:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:..\FreeRTOS/tasks.c **** 		}
1954:..\FreeRTOS/tasks.c **** 	}
1955:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:..\FreeRTOS/tasks.c **** 
1957:..\FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
1958:..\FreeRTOS/tasks.c **** 	{
1959:..\FreeRTOS/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:..\FreeRTOS/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 37


1961:..\FreeRTOS/tasks.c **** 		the only macro called by the function. */
1962:..\FreeRTOS/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:..\FreeRTOS/tasks.c **** 		{
1964:..\FreeRTOS/tasks.c **** 			freertos_tasks_c_additions_init();
1965:..\FreeRTOS/tasks.c **** 		}
1966:..\FreeRTOS/tasks.c **** 		#endif
1967:..\FreeRTOS/tasks.c **** 
1968:..\FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:..\FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:..\FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:..\FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:..\FreeRTOS/tasks.c **** 		starts to run. */
1973:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:..\FreeRTOS/tasks.c **** 
1975:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:..\FreeRTOS/tasks.c **** 		{
1977:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:..\FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1979:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:..\FreeRTOS/tasks.c **** 		}
1981:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:..\FreeRTOS/tasks.c **** 
1983:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1984:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
1985:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1986:..\FreeRTOS/tasks.c **** 
1987:..\FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:..\FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:..\FreeRTOS/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:..\FreeRTOS/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:..\FreeRTOS/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:..\FreeRTOS/tasks.c **** 		FreeRTOSConfig.h file. */
1993:..\FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:..\FreeRTOS/tasks.c **** 
1995:..\FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:..\FreeRTOS/tasks.c **** 		portable interface. */
1997:..\FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1998:..\FreeRTOS/tasks.c **** 		{
1999:..\FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:..\FreeRTOS/tasks.c **** 			function will not return. */
2001:..\FreeRTOS/tasks.c **** 		}
2002:..\FreeRTOS/tasks.c **** 		else
2003:..\FreeRTOS/tasks.c **** 		{
2004:..\FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:..\FreeRTOS/tasks.c **** 		}
2006:..\FreeRTOS/tasks.c **** 	}
2007:..\FreeRTOS/tasks.c **** 	else
2008:..\FreeRTOS/tasks.c **** 	{
2009:..\FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:..\FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:..\FreeRTOS/tasks.c **** 		or the timer task. */
2012:..\FreeRTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2013:..\FreeRTOS/tasks.c **** 	}
2014:..\FreeRTOS/tasks.c **** 
2015:..\FreeRTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:..\FreeRTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:..\FreeRTOS/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 38


2018:..\FreeRTOS/tasks.c **** }
2019:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2020:..\FreeRTOS/tasks.c **** 
2021:..\FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2022:..\FreeRTOS/tasks.c **** {
2023:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:..\FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:..\FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:..\FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
2028:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
2029:..\FreeRTOS/tasks.c **** }
2030:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2031:..\FreeRTOS/tasks.c **** 
2032:..\FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2033:..\FreeRTOS/tasks.c **** {
2034:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:..\FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:..\FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:..\FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
2038:..\FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
2039:..\FreeRTOS/tasks.c **** }
2040:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2041:..\FreeRTOS/tasks.c **** 
2042:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:..\FreeRTOS/tasks.c **** 
2044:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:..\FreeRTOS/tasks.c **** 	{
2046:..\FreeRTOS/tasks.c **** 	TickType_t xReturn;
2047:..\FreeRTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:..\FreeRTOS/tasks.c **** 
2049:..\FreeRTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:..\FreeRTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:..\FreeRTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:..\FreeRTOS/tasks.c **** 		running. */
2053:..\FreeRTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:..\FreeRTOS/tasks.c **** 		{
2055:..\FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:..\FreeRTOS/tasks.c **** 			{
2057:..\FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:..\FreeRTOS/tasks.c **** 			}
2059:..\FreeRTOS/tasks.c **** 		}
2060:..\FreeRTOS/tasks.c **** 		#else
2061:..\FreeRTOS/tasks.c **** 		{
2062:..\FreeRTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:..\FreeRTOS/tasks.c **** 
2064:..\FreeRTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:..\FreeRTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:..\FreeRTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:..\FreeRTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:..\FreeRTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:..\FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:..\FreeRTOS/tasks.c **** 			{
2071:..\FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:..\FreeRTOS/tasks.c **** 			}
2073:..\FreeRTOS/tasks.c **** 		}
2074:..\FreeRTOS/tasks.c **** 		#endif
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 39


2075:..\FreeRTOS/tasks.c **** 
2076:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:..\FreeRTOS/tasks.c **** 		{
2078:..\FreeRTOS/tasks.c **** 			xReturn = 0;
2079:..\FreeRTOS/tasks.c **** 		}
2080:..\FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:..\FreeRTOS/tasks.c **** 		{
2082:..\FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:..\FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:..\FreeRTOS/tasks.c **** 			processed. */
2085:..\FreeRTOS/tasks.c **** 			xReturn = 0;
2086:..\FreeRTOS/tasks.c **** 		}
2087:..\FreeRTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:..\FreeRTOS/tasks.c **** 		{
2089:..\FreeRTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:..\FreeRTOS/tasks.c **** 			idle priority.  This path can only be reached if
2091:..\FreeRTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:..\FreeRTOS/tasks.c **** 			xReturn = 0;
2093:..\FreeRTOS/tasks.c **** 		}
2094:..\FreeRTOS/tasks.c **** 		else
2095:..\FreeRTOS/tasks.c **** 		{
2096:..\FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:..\FreeRTOS/tasks.c **** 		}
2098:..\FreeRTOS/tasks.c **** 
2099:..\FreeRTOS/tasks.c **** 		return xReturn;
2100:..\FreeRTOS/tasks.c **** 	}
2101:..\FreeRTOS/tasks.c **** 
2102:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2104:..\FreeRTOS/tasks.c **** 
2105:..\FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:..\FreeRTOS/tasks.c **** {
2107:..\FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
2108:..\FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2109:..\FreeRTOS/tasks.c **** 
2110:..\FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:..\FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2113:..\FreeRTOS/tasks.c **** 
2114:..\FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:..\FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:..\FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:..\FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:..\FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2120:..\FreeRTOS/tasks.c **** 	{
2121:..\FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
2122:..\FreeRTOS/tasks.c **** 
2123:..\FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2124:..\FreeRTOS/tasks.c **** 		{
2125:..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2126:..\FreeRTOS/tasks.c **** 			{
2127:..\FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:..\FreeRTOS/tasks.c **** 				appropriate ready list. */
2129:..\FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2130:..\FreeRTOS/tasks.c **** 				{
2131:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 40


2132:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2133:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2134:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2135:..\FreeRTOS/tasks.c **** 
2136:..\FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:..\FreeRTOS/tasks.c **** 					task then a yield must be performed. */
2138:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2139:..\FreeRTOS/tasks.c **** 					{
2140:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2141:..\FreeRTOS/tasks.c **** 					}
2142:..\FreeRTOS/tasks.c **** 					else
2143:..\FreeRTOS/tasks.c **** 					{
2144:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:..\FreeRTOS/tasks.c **** 					}
2146:..\FreeRTOS/tasks.c **** 				}
2147:..\FreeRTOS/tasks.c **** 
2148:..\FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2149:..\FreeRTOS/tasks.c **** 				{
2150:..\FreeRTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:..\FreeRTOS/tasks.c **** 					which may have prevented the next unblock time from being
2152:..\FreeRTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:..\FreeRTOS/tasks.c **** 					important for low power tickless implementations, where
2154:..\FreeRTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:..\FreeRTOS/tasks.c **** 					state. */
2156:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
2157:..\FreeRTOS/tasks.c **** 				}
2158:..\FreeRTOS/tasks.c **** 
2159:..\FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:..\FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:..\FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:..\FreeRTOS/tasks.c **** 				time. */
2163:..\FreeRTOS/tasks.c **** 				{
2164:..\FreeRTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2165:..\FreeRTOS/tasks.c **** 
2166:..\FreeRTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2167:..\FreeRTOS/tasks.c **** 					{
2168:..\FreeRTOS/tasks.c **** 						do
2169:..\FreeRTOS/tasks.c **** 						{
2170:..\FreeRTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2171:..\FreeRTOS/tasks.c **** 							{
2172:..\FreeRTOS/tasks.c **** 								xYieldPending = pdTRUE;
2173:..\FreeRTOS/tasks.c **** 							}
2174:..\FreeRTOS/tasks.c **** 							else
2175:..\FreeRTOS/tasks.c **** 							{
2176:..\FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:..\FreeRTOS/tasks.c **** 							}
2178:..\FreeRTOS/tasks.c **** 							--uxPendedCounts;
2179:..\FreeRTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2180:..\FreeRTOS/tasks.c **** 
2181:..\FreeRTOS/tasks.c **** 						uxPendedTicks = 0;
2182:..\FreeRTOS/tasks.c **** 					}
2183:..\FreeRTOS/tasks.c **** 					else
2184:..\FreeRTOS/tasks.c **** 					{
2185:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:..\FreeRTOS/tasks.c **** 					}
2187:..\FreeRTOS/tasks.c **** 				}
2188:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 41


2189:..\FreeRTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
2190:..\FreeRTOS/tasks.c **** 				{
2191:..\FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:..\FreeRTOS/tasks.c **** 					{
2193:..\FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
2194:..\FreeRTOS/tasks.c **** 					}
2195:..\FreeRTOS/tasks.c **** 					#endif
2196:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2197:..\FreeRTOS/tasks.c **** 				}
2198:..\FreeRTOS/tasks.c **** 				else
2199:..\FreeRTOS/tasks.c **** 				{
2200:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:..\FreeRTOS/tasks.c **** 				}
2202:..\FreeRTOS/tasks.c **** 			}
2203:..\FreeRTOS/tasks.c **** 		}
2204:..\FreeRTOS/tasks.c **** 		else
2205:..\FreeRTOS/tasks.c **** 		{
2206:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:..\FreeRTOS/tasks.c **** 		}
2208:..\FreeRTOS/tasks.c **** 	}
2209:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
2210:..\FreeRTOS/tasks.c **** 
2211:..\FreeRTOS/tasks.c **** 	return xAlreadyYielded;
2212:..\FreeRTOS/tasks.c **** }
2213:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2214:..\FreeRTOS/tasks.c **** 
2215:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:..\FreeRTOS/tasks.c **** {
2217:..\FreeRTOS/tasks.c **** TickType_t xTicks;
2218:..\FreeRTOS/tasks.c **** 
2219:..\FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:..\FreeRTOS/tasks.c **** 	{
2222:..\FreeRTOS/tasks.c **** 		xTicks = xTickCount;
2223:..\FreeRTOS/tasks.c **** 	}
2224:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:..\FreeRTOS/tasks.c **** 
2226:..\FreeRTOS/tasks.c **** 	return xTicks;
2227:..\FreeRTOS/tasks.c **** }
2228:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2229:..\FreeRTOS/tasks.c **** 
2230:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:..\FreeRTOS/tasks.c **** {
2232:..\FreeRTOS/tasks.c **** TickType_t xReturn;
2233:..\FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:..\FreeRTOS/tasks.c **** 
2235:..\FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:..\FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:..\FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:..\FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:..\FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:..\FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:..\FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:..\FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:..\FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:..\FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:..\FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 42


2246:..\FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:..\FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:..\FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:..\FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2250:..\FreeRTOS/tasks.c **** 
2251:..\FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2252:..\FreeRTOS/tasks.c **** 	{
2253:..\FreeRTOS/tasks.c **** 		xReturn = xTickCount;
2254:..\FreeRTOS/tasks.c **** 	}
2255:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:..\FreeRTOS/tasks.c **** 
2257:..\FreeRTOS/tasks.c **** 	return xReturn;
2258:..\FreeRTOS/tasks.c **** }
2259:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2260:..\FreeRTOS/tasks.c **** 
2261:..\FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:..\FreeRTOS/tasks.c **** {
2263:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:..\FreeRTOS/tasks.c **** 	BaseType_t. */
2265:..\FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
2266:..\FreeRTOS/tasks.c **** }
2267:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2268:..\FreeRTOS/tasks.c **** 
2269:..\FreeRTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:..\FreeRTOS/tasks.c **** {
2271:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
2272:..\FreeRTOS/tasks.c **** 
2273:..\FreeRTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:..\FreeRTOS/tasks.c **** 	queried. */
2275:..\FreeRTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2276:..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
2277:..\FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2278:..\FreeRTOS/tasks.c **** }
2279:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2280:..\FreeRTOS/tasks.c **** 
2281:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:..\FreeRTOS/tasks.c **** 
2283:..\FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:..\FreeRTOS/tasks.c **** 	{
2285:..\FreeRTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:..\FreeRTOS/tasks.c **** 	UBaseType_t x;
2287:..\FreeRTOS/tasks.c **** 	char cNextChar;
2288:..\FreeRTOS/tasks.c **** 
2289:..\FreeRTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:..\FreeRTOS/tasks.c **** 
2291:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:..\FreeRTOS/tasks.c **** 		{
2293:..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:..\FreeRTOS/tasks.c **** 
2295:..\FreeRTOS/tasks.c **** 			do
2296:..\FreeRTOS/tasks.c **** 			{
2297:..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2298:..\FreeRTOS/tasks.c **** 
2299:..\FreeRTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2300:..\FreeRTOS/tasks.c **** 				mismatch. */
2301:..\FreeRTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:..\FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 43


2303:..\FreeRTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:..\FreeRTOS/tasks.c **** 
2305:..\FreeRTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:..\FreeRTOS/tasks.c **** 					{
2307:..\FreeRTOS/tasks.c **** 						/* Characters didn't match. */
2308:..\FreeRTOS/tasks.c **** 						break;
2309:..\FreeRTOS/tasks.c **** 					}
2310:..\FreeRTOS/tasks.c **** 					else if( cNextChar == 0x00 )
2311:..\FreeRTOS/tasks.c **** 					{
2312:..\FreeRTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2313:..\FreeRTOS/tasks.c **** 						found. */
2314:..\FreeRTOS/tasks.c **** 						pxReturn = pxNextTCB;
2315:..\FreeRTOS/tasks.c **** 						break;
2316:..\FreeRTOS/tasks.c **** 					}
2317:..\FreeRTOS/tasks.c **** 					else
2318:..\FreeRTOS/tasks.c **** 					{
2319:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:..\FreeRTOS/tasks.c **** 					}
2321:..\FreeRTOS/tasks.c **** 				}
2322:..\FreeRTOS/tasks.c **** 
2323:..\FreeRTOS/tasks.c **** 				if( pxReturn != NULL )
2324:..\FreeRTOS/tasks.c **** 				{
2325:..\FreeRTOS/tasks.c **** 					/* The handle has been found. */
2326:..\FreeRTOS/tasks.c **** 					break;
2327:..\FreeRTOS/tasks.c **** 				}
2328:..\FreeRTOS/tasks.c **** 
2329:..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:..\FreeRTOS/tasks.c **** 		}
2331:..\FreeRTOS/tasks.c **** 		else
2332:..\FreeRTOS/tasks.c **** 		{
2333:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:..\FreeRTOS/tasks.c **** 		}
2335:..\FreeRTOS/tasks.c **** 
2336:..\FreeRTOS/tasks.c **** 		return pxReturn;
2337:..\FreeRTOS/tasks.c **** 	}
2338:..\FreeRTOS/tasks.c **** 
2339:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2341:..\FreeRTOS/tasks.c **** 
2342:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:..\FreeRTOS/tasks.c **** 
2344:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:..\FreeRTOS/tasks.c **** 	{
2346:..\FreeRTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:..\FreeRTOS/tasks.c **** 	TCB_t* pxTCB;
2348:..\FreeRTOS/tasks.c **** 
2349:..\FreeRTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:..\FreeRTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:..\FreeRTOS/tasks.c **** 
2352:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2353:..\FreeRTOS/tasks.c **** 		{
2354:..\FreeRTOS/tasks.c **** 			/* Search the ready lists. */
2355:..\FreeRTOS/tasks.c **** 			do
2356:..\FreeRTOS/tasks.c **** 			{
2357:..\FreeRTOS/tasks.c **** 				uxQueue--;
2358:..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 44


2360:..\FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2361:..\FreeRTOS/tasks.c **** 				{
2362:..\FreeRTOS/tasks.c **** 					/* Found the handle. */
2363:..\FreeRTOS/tasks.c **** 					break;
2364:..\FreeRTOS/tasks.c **** 				}
2365:..\FreeRTOS/tasks.c **** 
2366:..\FreeRTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:..\FreeRTOS/tasks.c **** 
2368:..\FreeRTOS/tasks.c **** 			/* Search the delayed lists. */
2369:..\FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2370:..\FreeRTOS/tasks.c **** 			{
2371:..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:..\FreeRTOS/tasks.c **** 			}
2373:..\FreeRTOS/tasks.c **** 
2374:..\FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2375:..\FreeRTOS/tasks.c **** 			{
2376:..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:..\FreeRTOS/tasks.c **** 			}
2378:..\FreeRTOS/tasks.c **** 
2379:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:..\FreeRTOS/tasks.c **** 			{
2381:..\FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2382:..\FreeRTOS/tasks.c **** 				{
2383:..\FreeRTOS/tasks.c **** 					/* Search the suspended list. */
2384:..\FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:..\FreeRTOS/tasks.c **** 				}
2386:..\FreeRTOS/tasks.c **** 			}
2387:..\FreeRTOS/tasks.c **** 			#endif
2388:..\FreeRTOS/tasks.c **** 
2389:..\FreeRTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:..\FreeRTOS/tasks.c **** 			{
2391:..\FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2392:..\FreeRTOS/tasks.c **** 				{
2393:..\FreeRTOS/tasks.c **** 					/* Search the deleted list. */
2394:..\FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:..\FreeRTOS/tasks.c **** 				}
2396:..\FreeRTOS/tasks.c **** 			}
2397:..\FreeRTOS/tasks.c **** 			#endif
2398:..\FreeRTOS/tasks.c **** 		}
2399:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2400:..\FreeRTOS/tasks.c **** 
2401:..\FreeRTOS/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:..\FreeRTOS/tasks.c **** 	}
2403:..\FreeRTOS/tasks.c **** 
2404:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2406:..\FreeRTOS/tasks.c **** 
2407:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:..\FreeRTOS/tasks.c **** 
2409:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:..\FreeRTOS/tasks.c **** 	{
2411:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2412:..\FreeRTOS/tasks.c **** 
2413:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2414:..\FreeRTOS/tasks.c **** 		{
2415:..\FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:..\FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 45


2417:..\FreeRTOS/tasks.c **** 			{
2418:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:..\FreeRTOS/tasks.c **** 				task in the Ready state. */
2420:..\FreeRTOS/tasks.c **** 				do
2421:..\FreeRTOS/tasks.c **** 				{
2422:..\FreeRTOS/tasks.c **** 					uxQueue--;
2423:..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:..\FreeRTOS/tasks.c **** 
2425:..\FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:..\FreeRTOS/tasks.c **** 
2427:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:..\FreeRTOS/tasks.c **** 				task in the Blocked state. */
2429:..\FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:..\FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:..\FreeRTOS/tasks.c **** 
2432:..\FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:..\FreeRTOS/tasks.c **** 				{
2434:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:..\FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:..\FreeRTOS/tasks.c **** 				}
2438:..\FreeRTOS/tasks.c **** 				#endif
2439:..\FreeRTOS/tasks.c **** 
2440:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:..\FreeRTOS/tasks.c **** 				{
2442:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:..\FreeRTOS/tasks.c **** 					each task in the Suspended state. */
2444:..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:..\FreeRTOS/tasks.c **** 				}
2446:..\FreeRTOS/tasks.c **** 				#endif
2447:..\FreeRTOS/tasks.c **** 
2448:..\FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:..\FreeRTOS/tasks.c **** 				{
2450:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:..\FreeRTOS/tasks.c **** 					{
2452:..\FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:..\FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:..\FreeRTOS/tasks.c **** 						#else
2455:..\FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:..\FreeRTOS/tasks.c **** 						#endif
2457:..\FreeRTOS/tasks.c **** 					}
2458:..\FreeRTOS/tasks.c **** 				}
2459:..\FreeRTOS/tasks.c **** 				#else
2460:..\FreeRTOS/tasks.c **** 				{
2461:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:..\FreeRTOS/tasks.c **** 					{
2463:..\FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
2464:..\FreeRTOS/tasks.c **** 					}
2465:..\FreeRTOS/tasks.c **** 				}
2466:..\FreeRTOS/tasks.c **** 				#endif
2467:..\FreeRTOS/tasks.c **** 			}
2468:..\FreeRTOS/tasks.c **** 			else
2469:..\FreeRTOS/tasks.c **** 			{
2470:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:..\FreeRTOS/tasks.c **** 			}
2472:..\FreeRTOS/tasks.c **** 		}
2473:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 46


2474:..\FreeRTOS/tasks.c **** 
2475:..\FreeRTOS/tasks.c **** 		return uxTask;
2476:..\FreeRTOS/tasks.c **** 	}
2477:..\FreeRTOS/tasks.c **** 
2478:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2480:..\FreeRTOS/tasks.c **** 
2481:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:..\FreeRTOS/tasks.c **** 
2483:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:..\FreeRTOS/tasks.c **** 	{
2485:..\FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:..\FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:..\FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:..\FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
2489:..\FreeRTOS/tasks.c **** 	}
2490:..\FreeRTOS/tasks.c **** 
2491:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2493:..\FreeRTOS/tasks.c **** 
2494:..\FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:..\FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:..\FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:..\FreeRTOS/tasks.c **** 1. */
2498:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:..\FreeRTOS/tasks.c **** 
2500:..\FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:..\FreeRTOS/tasks.c **** 	{
2502:..\FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:..\FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:..\FreeRTOS/tasks.c **** 		each stepped tick. */
2505:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:..\FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
2507:..\FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:..\FreeRTOS/tasks.c **** 	}
2509:..\FreeRTOS/tasks.c **** 
2510:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2512:..\FreeRTOS/tasks.c **** 
2513:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:..\FreeRTOS/tasks.c **** 
2515:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:..\FreeRTOS/tasks.c **** 	{
2517:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2519:..\FreeRTOS/tasks.c **** 
2520:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
2521:..\FreeRTOS/tasks.c **** 
2522:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2523:..\FreeRTOS/tasks.c **** 		{
2524:..\FreeRTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:..\FreeRTOS/tasks.c **** 			it is actually in the Blocked state. */
2526:..\FreeRTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:..\FreeRTOS/tasks.c **** 			{
2528:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
2529:..\FreeRTOS/tasks.c **** 
2530:..\FreeRTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 47


2531:..\FreeRTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:..\FreeRTOS/tasks.c **** 				scheduler is suspended. */
2533:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:..\FreeRTOS/tasks.c **** 
2535:..\FreeRTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:..\FreeRTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:..\FreeRTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:..\FreeRTOS/tasks.c **** 				is used. */
2539:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
2540:..\FreeRTOS/tasks.c **** 				{
2541:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:..\FreeRTOS/tasks.c **** 					{
2543:..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:..\FreeRTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:..\FreeRTOS/tasks.c **** 					}
2546:..\FreeRTOS/tasks.c **** 					else
2547:..\FreeRTOS/tasks.c **** 					{
2548:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:..\FreeRTOS/tasks.c **** 					}
2550:..\FreeRTOS/tasks.c **** 				}
2551:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
2552:..\FreeRTOS/tasks.c **** 
2553:..\FreeRTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:..\FreeRTOS/tasks.c **** 
2556:..\FreeRTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:..\FreeRTOS/tasks.c **** 				switch if preemption is turned off. */
2558:..\FreeRTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:..\FreeRTOS/tasks.c **** 				{
2560:..\FreeRTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:..\FreeRTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2562:..\FreeRTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2563:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:..\FreeRTOS/tasks.c **** 					{
2565:..\FreeRTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:..\FreeRTOS/tasks.c **** 						is unsuspended. */
2567:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2568:..\FreeRTOS/tasks.c **** 					}
2569:..\FreeRTOS/tasks.c **** 					else
2570:..\FreeRTOS/tasks.c **** 					{
2571:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:..\FreeRTOS/tasks.c **** 					}
2573:..\FreeRTOS/tasks.c **** 				}
2574:..\FreeRTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:..\FreeRTOS/tasks.c **** 			}
2576:..\FreeRTOS/tasks.c **** 			else
2577:..\FreeRTOS/tasks.c **** 			{
2578:..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
2579:..\FreeRTOS/tasks.c **** 			}
2580:..\FreeRTOS/tasks.c **** 		}
2581:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2582:..\FreeRTOS/tasks.c **** 
2583:..\FreeRTOS/tasks.c **** 		return xReturn;
2584:..\FreeRTOS/tasks.c **** 	}
2585:..\FreeRTOS/tasks.c **** 
2586:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 48


2588:..\FreeRTOS/tasks.c **** 
2589:..\FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:..\FreeRTOS/tasks.c **** {
2591:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
2592:..\FreeRTOS/tasks.c **** TickType_t xItemValue;
2593:..\FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2594:..\FreeRTOS/tasks.c **** 
2595:..\FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:..\FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:..\FreeRTOS/tasks.c **** 	tasks to be unblocked. */
2598:..\FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2600:..\FreeRTOS/tasks.c **** 	{
2601:..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:..\FreeRTOS/tasks.c **** 		block. */
2603:..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2604:..\FreeRTOS/tasks.c **** 
2605:..\FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:..\FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2607:..\FreeRTOS/tasks.c **** 		xTickCount = xConstTickCount;
2608:..\FreeRTOS/tasks.c **** 
2609:..\FreeRTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2610:..\FreeRTOS/tasks.c **** 		{
2611:..\FreeRTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2612:..\FreeRTOS/tasks.c **** 		}
2613:..\FreeRTOS/tasks.c **** 		else
2614:..\FreeRTOS/tasks.c **** 		{
2615:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:..\FreeRTOS/tasks.c **** 		}
2617:..\FreeRTOS/tasks.c **** 
2618:..\FreeRTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:..\FreeRTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:..\FreeRTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:..\FreeRTOS/tasks.c **** 		look any further down the list. */
2622:..\FreeRTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2623:..\FreeRTOS/tasks.c **** 		{
2624:..\FreeRTOS/tasks.c **** 			for( ;; )
2625:..\FreeRTOS/tasks.c **** 			{
2626:..\FreeRTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2627:..\FreeRTOS/tasks.c **** 				{
2628:..\FreeRTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:..\FreeRTOS/tasks.c **** 					to the maximum possible value so it is extremely
2630:..\FreeRTOS/tasks.c **** 					unlikely that the
2631:..\FreeRTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:..\FreeRTOS/tasks.c **** 					next time through. */
2633:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2634:..\FreeRTOS/tasks.c **** 					break;
2635:..\FreeRTOS/tasks.c **** 				}
2636:..\FreeRTOS/tasks.c **** 				else
2637:..\FreeRTOS/tasks.c **** 				{
2638:..\FreeRTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:..\FreeRTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:..\FreeRTOS/tasks.c **** 					at which the task at the head of the delayed list must
2641:..\FreeRTOS/tasks.c **** 					be removed from the Blocked state. */
2642:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2643:..\FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2644:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 49


2645:..\FreeRTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
2646:..\FreeRTOS/tasks.c **** 					{
2647:..\FreeRTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:..\FreeRTOS/tasks.c **** 						item value is the time at which the task at the head
2649:..\FreeRTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:..\FreeRTOS/tasks.c **** 						state -	so record the item value in
2651:..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime. */
2652:..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2653:..\FreeRTOS/tasks.c **** 						break;
2654:..\FreeRTOS/tasks.c **** 					}
2655:..\FreeRTOS/tasks.c **** 					else
2656:..\FreeRTOS/tasks.c **** 					{
2657:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:..\FreeRTOS/tasks.c **** 					}
2659:..\FreeRTOS/tasks.c **** 
2660:..\FreeRTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2662:..\FreeRTOS/tasks.c **** 
2663:..\FreeRTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:..\FreeRTOS/tasks.c **** 					it from the event list. */
2665:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2666:..\FreeRTOS/tasks.c **** 					{
2667:..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2668:..\FreeRTOS/tasks.c **** 					}
2669:..\FreeRTOS/tasks.c **** 					else
2670:..\FreeRTOS/tasks.c **** 					{
2671:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:..\FreeRTOS/tasks.c **** 					}
2673:..\FreeRTOS/tasks.c **** 
2674:..\FreeRTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:..\FreeRTOS/tasks.c **** 					list. */
2676:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2677:..\FreeRTOS/tasks.c **** 
2678:..\FreeRTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:..\FreeRTOS/tasks.c **** 					context switch if preemption is turned off. */
2680:..\FreeRTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:..\FreeRTOS/tasks.c **** 					{
2682:..\FreeRTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2683:..\FreeRTOS/tasks.c **** 						only be performed if the unblocked task has a
2684:..\FreeRTOS/tasks.c **** 						priority that is equal to or higher than the
2685:..\FreeRTOS/tasks.c **** 						currently executing task. */
2686:..\FreeRTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2687:..\FreeRTOS/tasks.c **** 						{
2688:..\FreeRTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
2689:..\FreeRTOS/tasks.c **** 						}
2690:..\FreeRTOS/tasks.c **** 						else
2691:..\FreeRTOS/tasks.c **** 						{
2692:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:..\FreeRTOS/tasks.c **** 						}
2694:..\FreeRTOS/tasks.c **** 					}
2695:..\FreeRTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:..\FreeRTOS/tasks.c **** 				}
2697:..\FreeRTOS/tasks.c **** 			}
2698:..\FreeRTOS/tasks.c **** 		}
2699:..\FreeRTOS/tasks.c **** 
2700:..\FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:..\FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 50


2702:..\FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:..\FreeRTOS/tasks.c **** 		{
2705:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:..\FreeRTOS/tasks.c **** 			{
2707:..\FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:..\FreeRTOS/tasks.c **** 			}
2709:..\FreeRTOS/tasks.c **** 			else
2710:..\FreeRTOS/tasks.c **** 			{
2711:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:..\FreeRTOS/tasks.c **** 			}
2713:..\FreeRTOS/tasks.c **** 		}
2714:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:..\FreeRTOS/tasks.c **** 
2716:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:..\FreeRTOS/tasks.c **** 		{
2718:..\FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:..\FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:..\FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:..\FreeRTOS/tasks.c **** 			{
2722:..\FreeRTOS/tasks.c **** 				vApplicationTickHook();
2723:..\FreeRTOS/tasks.c **** 			}
2724:..\FreeRTOS/tasks.c **** 			else
2725:..\FreeRTOS/tasks.c **** 			{
2726:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:..\FreeRTOS/tasks.c **** 			}
2728:..\FreeRTOS/tasks.c **** 		}
2729:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:..\FreeRTOS/tasks.c **** 	}
2731:..\FreeRTOS/tasks.c **** 	else
2732:..\FreeRTOS/tasks.c **** 	{
2733:..\FreeRTOS/tasks.c **** 		++uxPendedTicks;
2734:..\FreeRTOS/tasks.c **** 
2735:..\FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:..\FreeRTOS/tasks.c **** 		scheduler is locked. */
2737:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:..\FreeRTOS/tasks.c **** 		{
2739:..\FreeRTOS/tasks.c **** 			vApplicationTickHook();
2740:..\FreeRTOS/tasks.c **** 		}
2741:..\FreeRTOS/tasks.c **** 		#endif
2742:..\FreeRTOS/tasks.c **** 	}
2743:..\FreeRTOS/tasks.c **** 
2744:..\FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:..\FreeRTOS/tasks.c **** 	{
2746:..\FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
2747:..\FreeRTOS/tasks.c **** 		{
2748:..\FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
2749:..\FreeRTOS/tasks.c **** 		}
2750:..\FreeRTOS/tasks.c **** 		else
2751:..\FreeRTOS/tasks.c **** 		{
2752:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:..\FreeRTOS/tasks.c **** 		}
2754:..\FreeRTOS/tasks.c **** 	}
2755:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:..\FreeRTOS/tasks.c **** 
2757:..\FreeRTOS/tasks.c **** 	return xSwitchRequired;
2758:..\FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 51


2759:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2760:..\FreeRTOS/tasks.c **** 
2761:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:..\FreeRTOS/tasks.c **** 
2763:..\FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:..\FreeRTOS/tasks.c **** 	{
2765:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2766:..\FreeRTOS/tasks.c **** 
2767:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:..\FreeRTOS/tasks.c **** 		getting set. */
2769:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2770:..\FreeRTOS/tasks.c **** 		{
2771:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:..\FreeRTOS/tasks.c **** 		}
2773:..\FreeRTOS/tasks.c **** 		else
2774:..\FreeRTOS/tasks.c **** 		{
2775:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:..\FreeRTOS/tasks.c **** 		}
2777:..\FreeRTOS/tasks.c **** 
2778:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2780:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2781:..\FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2783:..\FreeRTOS/tasks.c **** 	}
2784:..\FreeRTOS/tasks.c **** 
2785:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2787:..\FreeRTOS/tasks.c **** 
2788:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:..\FreeRTOS/tasks.c **** 
2790:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:..\FreeRTOS/tasks.c **** 	{
2792:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2793:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2794:..\FreeRTOS/tasks.c **** 
2795:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2797:..\FreeRTOS/tasks.c **** 		{
2798:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:..\FreeRTOS/tasks.c **** 		}
2800:..\FreeRTOS/tasks.c **** 		else
2801:..\FreeRTOS/tasks.c **** 		{
2802:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:..\FreeRTOS/tasks.c **** 		}
2804:..\FreeRTOS/tasks.c **** 
2805:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2807:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2808:..\FreeRTOS/tasks.c **** 		{
2809:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:..\FreeRTOS/tasks.c **** 		}
2811:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2812:..\FreeRTOS/tasks.c **** 
2813:..\FreeRTOS/tasks.c **** 		return xReturn;
2814:..\FreeRTOS/tasks.c **** 	}
2815:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 52


2816:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2818:..\FreeRTOS/tasks.c **** 
2819:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:..\FreeRTOS/tasks.c **** 
2821:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:..\FreeRTOS/tasks.c **** 	{
2823:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2824:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2825:..\FreeRTOS/tasks.c **** 
2826:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2828:..\FreeRTOS/tasks.c **** 		{
2829:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:..\FreeRTOS/tasks.c **** 		}
2831:..\FreeRTOS/tasks.c **** 		else
2832:..\FreeRTOS/tasks.c **** 		{
2833:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:..\FreeRTOS/tasks.c **** 		}
2835:..\FreeRTOS/tasks.c **** 
2836:..\FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:..\FreeRTOS/tasks.c **** 		{
2838:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:..\FreeRTOS/tasks.c **** 		}
2840:..\FreeRTOS/tasks.c **** 		else
2841:..\FreeRTOS/tasks.c **** 		{
2842:..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2843:..\FreeRTOS/tasks.c **** 		}
2844:..\FreeRTOS/tasks.c **** 
2845:..\FreeRTOS/tasks.c **** 		return xReturn;
2846:..\FreeRTOS/tasks.c **** 	}
2847:..\FreeRTOS/tasks.c **** 
2848:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2850:..\FreeRTOS/tasks.c **** 
2851:..\FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2852:..\FreeRTOS/tasks.c **** {
2853:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2854:..\FreeRTOS/tasks.c **** 	{
2855:..\FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:..\FreeRTOS/tasks.c **** 		switch. */
2857:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2858:..\FreeRTOS/tasks.c **** 	}
2859:..\FreeRTOS/tasks.c **** 	else
2860:..\FreeRTOS/tasks.c **** 	{
2861:..\FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2862:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:..\FreeRTOS/tasks.c **** 
2864:..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:..\FreeRTOS/tasks.c **** 		{
2866:..\FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:..\FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:..\FreeRTOS/tasks.c **** 				#else
2869:..\FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:..\FreeRTOS/tasks.c **** 				#endif
2871:..\FreeRTOS/tasks.c **** 
2872:..\FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 53


2873:..\FreeRTOS/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:..\FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:..\FreeRTOS/tasks.c **** 				protection here so count values are only valid until the timer
2876:..\FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:..\FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2878:..\FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2879:..\FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:..\FreeRTOS/tasks.c **** 				{
2881:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:..\FreeRTOS/tasks.c **** 				}
2883:..\FreeRTOS/tasks.c **** 				else
2884:..\FreeRTOS/tasks.c **** 				{
2885:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:..\FreeRTOS/tasks.c **** 				}
2887:..\FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:..\FreeRTOS/tasks.c **** 		}
2889:..\FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:..\FreeRTOS/tasks.c **** 
2891:..\FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:..\FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:..\FreeRTOS/tasks.c **** 
2894:..\FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:..\FreeRTOS/tasks.c **** 		optimised asm code. */
2896:..\FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2897:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:..\FreeRTOS/tasks.c **** 
2899:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:..\FreeRTOS/tasks.c **** 		{
2901:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:..\FreeRTOS/tasks.c **** 			structure specific to this task. */
2903:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:..\FreeRTOS/tasks.c **** 		}
2905:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:..\FreeRTOS/tasks.c **** 	}
2907:..\FreeRTOS/tasks.c **** }
2908:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2909:..\FreeRTOS/tasks.c **** 
2910:..\FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:..\FreeRTOS/tasks.c **** {
2912:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2913:..\FreeRTOS/tasks.c **** 
2914:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:..\FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:..\FreeRTOS/tasks.c **** 
2917:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:..\FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:..\FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:..\FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:..\FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2922:..\FreeRTOS/tasks.c **** 
2923:..\FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2924:..\FreeRTOS/tasks.c **** }
2925:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2926:..\FreeRTOS/tasks.c **** 
2927:..\FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:..\FreeRTOS/tasks.c **** {
2929:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 54


2930:..\FreeRTOS/tasks.c **** 
2931:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:..\FreeRTOS/tasks.c **** 	the event groups implementation. */
2933:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2934:..\FreeRTOS/tasks.c **** 
2935:..\FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:..\FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:..\FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2938:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2939:..\FreeRTOS/tasks.c **** 
2940:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:..\FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:..\FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:..\FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:..\FreeRTOS/tasks.c **** 	the task level). */
2945:..\FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2946:..\FreeRTOS/tasks.c **** 
2947:..\FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2948:..\FreeRTOS/tasks.c **** }
2949:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:..\FreeRTOS/tasks.c **** 
2951:..\FreeRTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:..\FreeRTOS/tasks.c **** 
2953:..\FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:..\FreeRTOS/tasks.c **** 	{
2955:..\FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2956:..\FreeRTOS/tasks.c **** 
2957:..\FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2958:..\FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:..\FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:..\FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2961:..\FreeRTOS/tasks.c **** 
2962:..\FreeRTOS/tasks.c **** 
2963:..\FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:..\FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:..\FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:..\FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2967:..\FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2968:..\FreeRTOS/tasks.c **** 
2969:..\FreeRTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:..\FreeRTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:..\FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:..\FreeRTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2973:..\FreeRTOS/tasks.c **** 		{
2974:..\FreeRTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2975:..\FreeRTOS/tasks.c **** 		}
2976:..\FreeRTOS/tasks.c **** 
2977:..\FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:..\FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2979:..\FreeRTOS/tasks.c **** 	}
2980:..\FreeRTOS/tasks.c **** 
2981:..\FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2982:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2983:..\FreeRTOS/tasks.c **** 
2984:..\FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:..\FreeRTOS/tasks.c **** {
2986:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 55


2987:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
2988:..\FreeRTOS/tasks.c **** 
2989:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:..\FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2991:..\FreeRTOS/tasks.c **** 
2992:..\FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:..\FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:..\FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2995:..\FreeRTOS/tasks.c **** 
2996:..\FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:..\FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:..\FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:..\FreeRTOS/tasks.c **** 
3000:..\FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:..\FreeRTOS/tasks.c **** 	pxEventList is not empty. */
3002:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
3003:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3004:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3005:..\FreeRTOS/tasks.c **** 
3006:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3007:..\FreeRTOS/tasks.c **** 	{
3008:..\FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3009:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3010:..\FreeRTOS/tasks.c **** 	}
3011:..\FreeRTOS/tasks.c **** 	else
3012:..\FreeRTOS/tasks.c **** 	{
3013:..\FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:..\FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
3015:..\FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3016:..\FreeRTOS/tasks.c **** 	}
3017:..\FreeRTOS/tasks.c **** 
3018:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3019:..\FreeRTOS/tasks.c **** 	{
3020:..\FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:..\FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:..\FreeRTOS/tasks.c **** 		it should force a context switch now. */
3023:..\FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
3024:..\FreeRTOS/tasks.c **** 
3025:..\FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3026:..\FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3028:..\FreeRTOS/tasks.c **** 	}
3029:..\FreeRTOS/tasks.c **** 	else
3030:..\FreeRTOS/tasks.c **** 	{
3031:..\FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
3032:..\FreeRTOS/tasks.c **** 	}
3033:..\FreeRTOS/tasks.c **** 
3034:..\FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:..\FreeRTOS/tasks.c **** 	{
3036:..\FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:..\FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:..\FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3039:..\FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:..\FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:..\FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:..\FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:..\FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 56


3044:..\FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:..\FreeRTOS/tasks.c **** 	}
3046:..\FreeRTOS/tasks.c **** 	#endif
3047:..\FreeRTOS/tasks.c **** 
3048:..\FreeRTOS/tasks.c **** 	return xReturn;
3049:..\FreeRTOS/tasks.c **** }
3050:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3051:..\FreeRTOS/tasks.c **** 
3052:..\FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:..\FreeRTOS/tasks.c **** {
3054:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3055:..\FreeRTOS/tasks.c **** 
3056:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:..\FreeRTOS/tasks.c **** 	the event flags implementation. */
3058:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3059:..\FreeRTOS/tasks.c **** 
3060:..\FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
3061:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3062:..\FreeRTOS/tasks.c **** 
3063:..\FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:..\FreeRTOS/tasks.c **** 	event flags. */
3065:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3066:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3068:..\FreeRTOS/tasks.c **** 
3069:..\FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:..\FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:..\FreeRTOS/tasks.c **** 	lists. */
3072:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3073:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3074:..\FreeRTOS/tasks.c **** 
3075:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3076:..\FreeRTOS/tasks.c **** 	{
3077:..\FreeRTOS/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:..\FreeRTOS/tasks.c **** 		a context switch is required.  This function is called with the
3079:..\FreeRTOS/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:..\FreeRTOS/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3082:..\FreeRTOS/tasks.c **** 	}
3083:..\FreeRTOS/tasks.c **** }
3084:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:..\FreeRTOS/tasks.c **** 
3086:..\FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:..\FreeRTOS/tasks.c **** {
3088:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3089:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3090:..\FreeRTOS/tasks.c **** 	{
3091:..\FreeRTOS/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3092:..\FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3093:..\FreeRTOS/tasks.c **** 	}
3094:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3095:..\FreeRTOS/tasks.c **** }
3096:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3097:..\FreeRTOS/tasks.c **** 
3098:..\FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:..\FreeRTOS/tasks.c **** {
3100:..\FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 57


3101:..\FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3102:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3103:..\FreeRTOS/tasks.c **** }
3104:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3105:..\FreeRTOS/tasks.c **** 
3106:..\FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:..\FreeRTOS/tasks.c **** {
3108:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
3109:..\FreeRTOS/tasks.c **** 
3110:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3111:..\FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
3112:..\FreeRTOS/tasks.c **** 
3113:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3114:..\FreeRTOS/tasks.c **** 	{
3115:..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3117:..\FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3118:..\FreeRTOS/tasks.c **** 
3119:..\FreeRTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3121:..\FreeRTOS/tasks.c **** 			{
3122:..\FreeRTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:..\FreeRTOS/tasks.c **** 				but has the same result. */
3124:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3125:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
3126:..\FreeRTOS/tasks.c **** 			}
3127:..\FreeRTOS/tasks.c **** 			else
3128:..\FreeRTOS/tasks.c **** 		#endif
3129:..\FreeRTOS/tasks.c **** 
3130:..\FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:..\FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3132:..\FreeRTOS/tasks.c **** 			{
3133:..\FreeRTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:..\FreeRTOS/tasks.c **** 				specified is the maximum block time then the task should block
3135:..\FreeRTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3136:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
3137:..\FreeRTOS/tasks.c **** 			}
3138:..\FreeRTOS/tasks.c **** 			else
3139:..\FreeRTOS/tasks.c **** 		#endif
3140:..\FreeRTOS/tasks.c **** 
3141:..\FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3142:..\FreeRTOS/tasks.c **** 		{
3143:..\FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which
3144:..\FreeRTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:..\FreeRTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:..\FreeRTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:..\FreeRTOS/tasks.c **** 			was called. */
3148:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3149:..\FreeRTOS/tasks.c **** 		}
3150:..\FreeRTOS/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3151:..\FreeRTOS/tasks.c **** 		{
3152:..\FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3153:..\FreeRTOS/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3154:..\FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3155:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
3156:..\FreeRTOS/tasks.c **** 		}
3157:..\FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 58


3158:..\FreeRTOS/tasks.c **** 		{
3159:..\FreeRTOS/tasks.c **** 			*pxTicksToWait = 0;
3160:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3161:..\FreeRTOS/tasks.c **** 		}
3162:..\FreeRTOS/tasks.c **** 	}
3163:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3164:..\FreeRTOS/tasks.c **** 
3165:..\FreeRTOS/tasks.c **** 	return xReturn;
3166:..\FreeRTOS/tasks.c **** }
3167:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3168:..\FreeRTOS/tasks.c **** 
3169:..\FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3170:..\FreeRTOS/tasks.c **** {
3171:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
3172:..\FreeRTOS/tasks.c **** }
3173:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3174:..\FreeRTOS/tasks.c **** 
3175:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:..\FreeRTOS/tasks.c **** 
3177:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:..\FreeRTOS/tasks.c **** 	{
3179:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3180:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3181:..\FreeRTOS/tasks.c **** 
3182:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
3183:..\FreeRTOS/tasks.c **** 		{
3184:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3185:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3186:..\FreeRTOS/tasks.c **** 		}
3187:..\FreeRTOS/tasks.c **** 		else
3188:..\FreeRTOS/tasks.c **** 		{
3189:..\FreeRTOS/tasks.c **** 			uxReturn = 0U;
3190:..\FreeRTOS/tasks.c **** 		}
3191:..\FreeRTOS/tasks.c **** 
3192:..\FreeRTOS/tasks.c **** 		return uxReturn;
3193:..\FreeRTOS/tasks.c **** 	}
3194:..\FreeRTOS/tasks.c **** 
3195:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3197:..\FreeRTOS/tasks.c **** 
3198:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:..\FreeRTOS/tasks.c **** 
3200:..\FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:..\FreeRTOS/tasks.c **** 	{
3202:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3203:..\FreeRTOS/tasks.c **** 
3204:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
3205:..\FreeRTOS/tasks.c **** 		{
3206:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3207:..\FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3208:..\FreeRTOS/tasks.c **** 		}
3209:..\FreeRTOS/tasks.c **** 	}
3210:..\FreeRTOS/tasks.c **** 
3211:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:..\FreeRTOS/tasks.c **** 
3213:..\FreeRTOS/tasks.c **** /*
3214:..\FreeRTOS/tasks.c ****  * -----------------------------------------------------------
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 59


3215:..\FreeRTOS/tasks.c ****  * The Idle task.
3216:..\FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3217:..\FreeRTOS/tasks.c ****  *
3218:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:..\FreeRTOS/tasks.c ****  *
3221:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:..\FreeRTOS/tasks.c ****  *
3223:..\FreeRTOS/tasks.c ****  */
3224:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:..\FreeRTOS/tasks.c **** {
3226:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
3227:..\FreeRTOS/tasks.c **** 	( void ) pvParameters;
3228:..\FreeRTOS/tasks.c **** 
3229:..\FreeRTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:..\FreeRTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:..\FreeRTOS/tasks.c **** 
3232:..\FreeRTOS/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:..\FreeRTOS/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:..\FreeRTOS/tasks.c **** 	any. */
3235:..\FreeRTOS/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3236:..\FreeRTOS/tasks.c **** 
3237:..\FreeRTOS/tasks.c **** 	for( ;; )
3238:..\FreeRTOS/tasks.c **** 	{
3239:..\FreeRTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:..\FreeRTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:..\FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
3242:..\FreeRTOS/tasks.c **** 
3243:..\FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:..\FreeRTOS/tasks.c **** 		{
3245:..\FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:..\FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
3247:..\FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:..\FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
3249:..\FreeRTOS/tasks.c **** 			taskYIELD();
3250:..\FreeRTOS/tasks.c **** 		}
3251:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:..\FreeRTOS/tasks.c **** 
3253:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3254:..\FreeRTOS/tasks.c **** 		{
3255:..\FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:..\FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:..\FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3258:..\FreeRTOS/tasks.c **** 			timeslice.
3259:..\FreeRTOS/tasks.c **** 
3260:..\FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3261:..\FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:..\FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:..\FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3265:..\FreeRTOS/tasks.c **** 			{
3266:..\FreeRTOS/tasks.c **** 				taskYIELD();
3267:..\FreeRTOS/tasks.c **** 			}
3268:..\FreeRTOS/tasks.c **** 			else
3269:..\FreeRTOS/tasks.c **** 			{
3270:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:..\FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 60


3272:..\FreeRTOS/tasks.c **** 		}
3273:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:..\FreeRTOS/tasks.c **** 
3275:..\FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:..\FreeRTOS/tasks.c **** 		{
3277:..\FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:..\FreeRTOS/tasks.c **** 
3279:..\FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:..\FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
3281:..\FreeRTOS/tasks.c **** 			without the overhead of a separate task.
3282:..\FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:..\FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:..\FreeRTOS/tasks.c **** 			vApplicationIdleHook();
3285:..\FreeRTOS/tasks.c **** 		}
3286:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:..\FreeRTOS/tasks.c **** 
3288:..\FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:..\FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:..\FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
3291:..\FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3293:..\FreeRTOS/tasks.c **** 		{
3294:..\FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:..\FreeRTOS/tasks.c **** 
3296:..\FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:..\FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:..\FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
3299:..\FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:..\FreeRTOS/tasks.c **** 			valid. */
3301:..\FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:..\FreeRTOS/tasks.c **** 
3303:..\FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:..\FreeRTOS/tasks.c **** 			{
3305:..\FreeRTOS/tasks.c **** 				vTaskSuspendAll();
3306:..\FreeRTOS/tasks.c **** 				{
3307:..\FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:..\FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
3309:..\FreeRTOS/tasks.c **** 					be used. */
3310:..\FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3311:..\FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:..\FreeRTOS/tasks.c **** 
3313:..\FreeRTOS/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:..\FreeRTOS/tasks.c **** 					if the application does not want
3315:..\FreeRTOS/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:..\FreeRTOS/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:..\FreeRTOS/tasks.c **** 
3318:..\FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:..\FreeRTOS/tasks.c **** 					{
3320:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:..\FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:..\FreeRTOS/tasks.c **** 					}
3324:..\FreeRTOS/tasks.c **** 					else
3325:..\FreeRTOS/tasks.c **** 					{
3326:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:..\FreeRTOS/tasks.c **** 					}
3328:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 61


3329:..\FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
3330:..\FreeRTOS/tasks.c **** 			}
3331:..\FreeRTOS/tasks.c **** 			else
3332:..\FreeRTOS/tasks.c **** 			{
3333:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:..\FreeRTOS/tasks.c **** 			}
3335:..\FreeRTOS/tasks.c **** 		}
3336:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:..\FreeRTOS/tasks.c **** 	}
3338:..\FreeRTOS/tasks.c **** }
3339:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3340:..\FreeRTOS/tasks.c **** 
3341:..\FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:..\FreeRTOS/tasks.c **** 
3343:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:..\FreeRTOS/tasks.c **** 	{
3345:..\FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:..\FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:..\FreeRTOS/tasks.c **** 
3349:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3350:..\FreeRTOS/tasks.c **** 		{
3351:..\FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3353:..\FreeRTOS/tasks.c **** 		}
3354:..\FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:..\FreeRTOS/tasks.c **** 		{
3356:..\FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3358:..\FreeRTOS/tasks.c **** 		}
3359:..\FreeRTOS/tasks.c **** 		else
3360:..\FreeRTOS/tasks.c **** 		{
3361:..\FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:..\FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:..\FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:..\FreeRTOS/tasks.c **** 			interrupts. */
3365:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:..\FreeRTOS/tasks.c **** 			{
3367:..\FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3368:..\FreeRTOS/tasks.c **** 			}
3369:..\FreeRTOS/tasks.c **** 			else
3370:..\FreeRTOS/tasks.c **** 			{
3371:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:..\FreeRTOS/tasks.c **** 			}
3373:..\FreeRTOS/tasks.c **** 		}
3374:..\FreeRTOS/tasks.c **** 
3375:..\FreeRTOS/tasks.c **** 		return eReturn;
3376:..\FreeRTOS/tasks.c **** 	}
3377:..\FreeRTOS/tasks.c **** 
3378:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3380:..\FreeRTOS/tasks.c **** 
3381:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:..\FreeRTOS/tasks.c **** 
3383:..\FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:..\FreeRTOS/tasks.c **** 	{
3385:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 62


3386:..\FreeRTOS/tasks.c **** 
3387:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3388:..\FreeRTOS/tasks.c **** 		{
3389:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3390:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3391:..\FreeRTOS/tasks.c **** 		}
3392:..\FreeRTOS/tasks.c **** 	}
3393:..\FreeRTOS/tasks.c **** 
3394:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3396:..\FreeRTOS/tasks.c **** 
3397:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:..\FreeRTOS/tasks.c **** 
3399:..\FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:..\FreeRTOS/tasks.c **** 	{
3401:..\FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
3402:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3403:..\FreeRTOS/tasks.c **** 
3404:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3405:..\FreeRTOS/tasks.c **** 		{
3406:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3407:..\FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3408:..\FreeRTOS/tasks.c **** 		}
3409:..\FreeRTOS/tasks.c **** 		else
3410:..\FreeRTOS/tasks.c **** 		{
3411:..\FreeRTOS/tasks.c **** 			pvReturn = NULL;
3412:..\FreeRTOS/tasks.c **** 		}
3413:..\FreeRTOS/tasks.c **** 
3414:..\FreeRTOS/tasks.c **** 		return pvReturn;
3415:..\FreeRTOS/tasks.c **** 	}
3416:..\FreeRTOS/tasks.c **** 
3417:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3419:..\FreeRTOS/tasks.c **** 
3420:..\FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:..\FreeRTOS/tasks.c **** 
3422:..\FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:..\FreeRTOS/tasks.c **** 	{
3424:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3425:..\FreeRTOS/tasks.c **** 
3426:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:..\FreeRTOS/tasks.c **** 		the calling task. */
3428:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:..\FreeRTOS/tasks.c **** 
3430:..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:..\FreeRTOS/tasks.c **** 	}
3432:..\FreeRTOS/tasks.c **** 
3433:..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3435:..\FreeRTOS/tasks.c **** 
3436:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3437:..\FreeRTOS/tasks.c **** {
3438:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3439:..\FreeRTOS/tasks.c **** 
3440:..\FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3441:..\FreeRTOS/tasks.c **** 	{
3442:..\FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 63


3443:..\FreeRTOS/tasks.c **** 	}
3444:..\FreeRTOS/tasks.c **** 
3445:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3446:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3447:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3448:..\FreeRTOS/tasks.c **** 
3449:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:..\FreeRTOS/tasks.c **** 	{
3451:..\FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3452:..\FreeRTOS/tasks.c **** 	}
3453:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:..\FreeRTOS/tasks.c **** 
3455:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:..\FreeRTOS/tasks.c **** 	{
3457:..\FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3458:..\FreeRTOS/tasks.c **** 	}
3459:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:..\FreeRTOS/tasks.c **** 
3461:..\FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:..\FreeRTOS/tasks.c **** 	using list2. */
3463:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3464:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3465:..\FreeRTOS/tasks.c **** }
3466:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3467:..\FreeRTOS/tasks.c **** 
3468:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:..\FreeRTOS/tasks.c **** {
3470:..\FreeRTOS/tasks.c **** 
3471:..\FreeRTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:..\FreeRTOS/tasks.c **** 
3473:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:..\FreeRTOS/tasks.c **** 	{
3475:..\FreeRTOS/tasks.c **** 		TCB_t *pxTCB;
3476:..\FreeRTOS/tasks.c **** 
3477:..\FreeRTOS/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:..\FreeRTOS/tasks.c **** 		being called too often in the idle task. */
3479:..\FreeRTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3480:..\FreeRTOS/tasks.c **** 		{
3481:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
3482:..\FreeRTOS/tasks.c **** 			{
3483:..\FreeRTOS/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3484:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3485:..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
3486:..\FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3487:..\FreeRTOS/tasks.c **** 			}
3488:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
3489:..\FreeRTOS/tasks.c **** 
3490:..\FreeRTOS/tasks.c **** 			prvDeleteTCB( pxTCB );
3491:..\FreeRTOS/tasks.c **** 		}
3492:..\FreeRTOS/tasks.c **** 	}
3493:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:..\FreeRTOS/tasks.c **** }
3495:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3496:..\FreeRTOS/tasks.c **** 
3497:..\FreeRTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:..\FreeRTOS/tasks.c **** 
3499:..\FreeRTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 64


3500:..\FreeRTOS/tasks.c **** 	{
3501:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3502:..\FreeRTOS/tasks.c **** 
3503:..\FreeRTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3505:..\FreeRTOS/tasks.c **** 
3506:..\FreeRTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3507:..\FreeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3508:..\FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3509:..\FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3510:..\FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3511:..\FreeRTOS/tasks.c **** 
3512:..\FreeRTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:..\FreeRTOS/tasks.c **** 		{
3514:..\FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3515:..\FreeRTOS/tasks.c **** 		}
3516:..\FreeRTOS/tasks.c **** 		#else
3517:..\FreeRTOS/tasks.c **** 		{
3518:..\FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:..\FreeRTOS/tasks.c **** 		}
3520:..\FreeRTOS/tasks.c **** 		#endif
3521:..\FreeRTOS/tasks.c **** 
3522:..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:..\FreeRTOS/tasks.c **** 		{
3524:..\FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:..\FreeRTOS/tasks.c **** 		}
3526:..\FreeRTOS/tasks.c **** 		#else
3527:..\FreeRTOS/tasks.c **** 		{
3528:..\FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3529:..\FreeRTOS/tasks.c **** 		}
3530:..\FreeRTOS/tasks.c **** 		#endif
3531:..\FreeRTOS/tasks.c **** 
3532:..\FreeRTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:..\FreeRTOS/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:..\FreeRTOS/tasks.c **** 		state is just set to whatever is passed in. */
3535:..\FreeRTOS/tasks.c **** 		if( eState != eInvalid )
3536:..\FreeRTOS/tasks.c **** 		{
3537:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3538:..\FreeRTOS/tasks.c **** 			{
3539:..\FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3540:..\FreeRTOS/tasks.c **** 			}
3541:..\FreeRTOS/tasks.c **** 			else
3542:..\FreeRTOS/tasks.c **** 			{
3543:..\FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3544:..\FreeRTOS/tasks.c **** 
3545:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:..\FreeRTOS/tasks.c **** 				{
3547:..\FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:..\FreeRTOS/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:..\FreeRTOS/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:..\FreeRTOS/tasks.c **** 					if( eState == eSuspended )
3551:..\FreeRTOS/tasks.c **** 					{
3552:..\FreeRTOS/tasks.c **** 						vTaskSuspendAll();
3553:..\FreeRTOS/tasks.c **** 						{
3554:..\FreeRTOS/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3555:..\FreeRTOS/tasks.c **** 							{
3556:..\FreeRTOS/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 65


3557:..\FreeRTOS/tasks.c **** 							}
3558:..\FreeRTOS/tasks.c **** 						}
3559:..\FreeRTOS/tasks.c **** 						( void ) xTaskResumeAll();
3560:..\FreeRTOS/tasks.c **** 					}
3561:..\FreeRTOS/tasks.c **** 				}
3562:..\FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:..\FreeRTOS/tasks.c **** 			}
3564:..\FreeRTOS/tasks.c **** 		}
3565:..\FreeRTOS/tasks.c **** 		else
3566:..\FreeRTOS/tasks.c **** 		{
3567:..\FreeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3568:..\FreeRTOS/tasks.c **** 		}
3569:..\FreeRTOS/tasks.c **** 
3570:..\FreeRTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:..\FreeRTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:..\FreeRTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3573:..\FreeRTOS/tasks.c **** 		{
3574:..\FreeRTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:..\FreeRTOS/tasks.c **** 			{
3576:..\FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:..\FreeRTOS/tasks.c **** 			}
3578:..\FreeRTOS/tasks.c **** 			#else
3579:..\FreeRTOS/tasks.c **** 			{
3580:..\FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3581:..\FreeRTOS/tasks.c **** 			}
3582:..\FreeRTOS/tasks.c **** 			#endif
3583:..\FreeRTOS/tasks.c **** 		}
3584:..\FreeRTOS/tasks.c **** 		else
3585:..\FreeRTOS/tasks.c **** 		{
3586:..\FreeRTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3587:..\FreeRTOS/tasks.c **** 		}
3588:..\FreeRTOS/tasks.c **** 	}
3589:..\FreeRTOS/tasks.c **** 
3590:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3592:..\FreeRTOS/tasks.c **** 
3593:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:..\FreeRTOS/tasks.c **** 
3595:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3596:..\FreeRTOS/tasks.c **** 	{
3597:..\FreeRTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3599:..\FreeRTOS/tasks.c **** 
3600:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3601:..\FreeRTOS/tasks.c **** 		{
3602:..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3603:..\FreeRTOS/tasks.c **** 
3604:..\FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:..\FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:..\FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:..\FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:..\FreeRTOS/tasks.c **** 			do
3609:..\FreeRTOS/tasks.c **** 			{
3610:..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3611:..\FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3612:..\FreeRTOS/tasks.c **** 				uxTask++;
3613:..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 66


3614:..\FreeRTOS/tasks.c **** 		}
3615:..\FreeRTOS/tasks.c **** 		else
3616:..\FreeRTOS/tasks.c **** 		{
3617:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:..\FreeRTOS/tasks.c **** 		}
3619:..\FreeRTOS/tasks.c **** 
3620:..\FreeRTOS/tasks.c **** 		return uxTask;
3621:..\FreeRTOS/tasks.c **** 	}
3622:..\FreeRTOS/tasks.c **** 
3623:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3625:..\FreeRTOS/tasks.c **** 
3626:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:..\FreeRTOS/tasks.c **** 
3628:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:..\FreeRTOS/tasks.c **** 	{
  92              		.loc 1 3629 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.LVL8:
3630:..\FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
  98              		.loc 1 3630 0
  99 0000 0023     		movs	r3, #0
3631:..\FreeRTOS/tasks.c **** 
3632:..\FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 100              		.loc 1 3632 0
 101 0002 01E0     		b	.L13
 102              	.LVL9:
 103              	.L14:
3633:..\FreeRTOS/tasks.c **** 		{
3634:..\FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 104              		.loc 1 3634 0
 105 0004 0130     		adds	r0, r0, #1
 106              	.LVL10:
3635:..\FreeRTOS/tasks.c **** 			ulCount++;
 107              		.loc 1 3635 0
 108 0006 0133     		adds	r3, r3, #1
 109              	.LVL11:
 110              	.L13:
3632:..\FreeRTOS/tasks.c **** 		{
 111              		.loc 1 3632 0
 112 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 113 000a A52A     		cmp	r2, #165
 114 000c FAD0     		beq	.L14
 115              	.LVL12:
3636:..\FreeRTOS/tasks.c **** 		}
3637:..\FreeRTOS/tasks.c **** 
3638:..\FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3639:..\FreeRTOS/tasks.c **** 
3640:..\FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
3641:..\FreeRTOS/tasks.c **** 	}
 116              		.loc 1 3641 0
 117 000e C3F38F00 		ubfx	r0, r3, #2, #16
 118              	.LVL13:
 119 0012 7047     		bx	lr
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 67


 120              		.cfi_endproc
 121              	.LFE104:
 122              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 123              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 124              		.align	2
 125              		.thumb
 126              		.thumb_func
 127              		.type	prvResetNextTaskUnblockTime, %function
 128              	prvResetNextTaskUnblockTime:
 129              	.LFB107:
3642:..\FreeRTOS/tasks.c **** 
3643:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3645:..\FreeRTOS/tasks.c **** 
3646:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:..\FreeRTOS/tasks.c **** 
3648:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:..\FreeRTOS/tasks.c **** 	{
3650:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3651:..\FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3652:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3653:..\FreeRTOS/tasks.c **** 
3654:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3655:..\FreeRTOS/tasks.c **** 
3656:..\FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:..\FreeRTOS/tasks.c **** 		{
3658:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3659:..\FreeRTOS/tasks.c **** 		}
3660:..\FreeRTOS/tasks.c **** 		#else
3661:..\FreeRTOS/tasks.c **** 		{
3662:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:..\FreeRTOS/tasks.c **** 		}
3664:..\FreeRTOS/tasks.c **** 		#endif
3665:..\FreeRTOS/tasks.c **** 
3666:..\FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3667:..\FreeRTOS/tasks.c **** 
3668:..\FreeRTOS/tasks.c **** 		return uxReturn;
3669:..\FreeRTOS/tasks.c **** 	}
3670:..\FreeRTOS/tasks.c **** 
3671:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3673:..\FreeRTOS/tasks.c **** 
3674:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:..\FreeRTOS/tasks.c **** 
3676:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:..\FreeRTOS/tasks.c **** 	{
3678:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:..\FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3680:..\FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3681:..\FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:..\FreeRTOS/tasks.c **** 
3683:..\FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:..\FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:..\FreeRTOS/tasks.c **** 		{
3687:..\FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 68


3689:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:..\FreeRTOS/tasks.c **** 
3691:..\FreeRTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:..\FreeRTOS/tasks.c **** 		{
3693:..\FreeRTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:..\FreeRTOS/tasks.c **** 			the stack and TCB. */
3695:..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
3696:..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
3697:..\FreeRTOS/tasks.c **** 		}
3698:..\FreeRTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:..\FreeRTOS/tasks.c **** 		{
3700:..\FreeRTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:..\FreeRTOS/tasks.c **** 			check what was statically allocated before trying to free the
3702:..\FreeRTOS/tasks.c **** 			memory. */
3703:..\FreeRTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:..\FreeRTOS/tasks.c **** 			{
3705:..\FreeRTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:..\FreeRTOS/tasks.c **** 				must be freed. */
3707:..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3709:..\FreeRTOS/tasks.c **** 			}
3710:..\FreeRTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:..\FreeRTOS/tasks.c **** 			{
3712:..\FreeRTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:..\FreeRTOS/tasks.c **** 				only memory that must be freed. */
3714:..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3715:..\FreeRTOS/tasks.c **** 			}
3716:..\FreeRTOS/tasks.c **** 			else
3717:..\FreeRTOS/tasks.c **** 			{
3718:..\FreeRTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:..\FreeRTOS/tasks.c **** 				nothing needs to be freed. */
3720:..\FreeRTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:..\FreeRTOS/tasks.c **** 			}
3723:..\FreeRTOS/tasks.c **** 		}
3724:..\FreeRTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:..\FreeRTOS/tasks.c **** 	}
3726:..\FreeRTOS/tasks.c **** 
3727:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3729:..\FreeRTOS/tasks.c **** 
3730:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:..\FreeRTOS/tasks.c **** {
 130              		.loc 1 3731 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
3732:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
3733:..\FreeRTOS/tasks.c **** 
3734:..\FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 135              		.loc 1 3734 0
 136 0000 094B     		ldr	r3, .L20
 137 0002 9B6A     		ldr	r3, [r3, #40]
 138 0004 1B68     		ldr	r3, [r3]
 139 0006 0BB9     		cbnz	r3, .L19
 140 0008 0123     		movs	r3, #1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 69


 141 000a 00E0     		b	.L16
 142              	.L19:
 143 000c 0023     		movs	r3, #0
 144              	.L16:
 145              		.loc 1 3734 0 is_stmt 0 discriminator 4
 146 000e 23B1     		cbz	r3, .L17
3735:..\FreeRTOS/tasks.c **** 	{
3736:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:..\FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:..\FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:..\FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3740:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 147              		.loc 1 3740 0 is_stmt 1
 148 0010 4FF0FF32 		mov	r2, #-1
 149 0014 044B     		ldr	r3, .L20
 150 0016 DA62     		str	r2, [r3, #44]
 151 0018 7047     		bx	lr
 152              	.L17:
3741:..\FreeRTOS/tasks.c **** 	}
3742:..\FreeRTOS/tasks.c **** 	else
3743:..\FreeRTOS/tasks.c **** 	{
3744:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:..\FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:..\FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:..\FreeRTOS/tasks.c **** 		from the Blocked state. */
3748:..\FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 153              		.loc 1 3748 0
 154 001a 034B     		ldr	r3, .L20
 155 001c 9A6A     		ldr	r2, [r3, #40]
 156 001e D268     		ldr	r2, [r2, #12]
 157 0020 D268     		ldr	r2, [r2, #12]
 158              	.LVL14:
3749:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 159              		.loc 1 3749 0
 160 0022 5268     		ldr	r2, [r2, #4]
 161              	.LVL15:
 162 0024 DA62     		str	r2, [r3, #44]
 163 0026 7047     		bx	lr
 164              	.L21:
 165              		.align	2
 166              	.L20:
 167 0028 00000000 		.word	.LANCHOR0
 168              		.cfi_endproc
 169              	.LFE107:
 170              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 171              		.section	.text.prvDeleteTCB,"ax",%progbits
 172              		.align	2
 173              		.thumb
 174              		.thumb_func
 175              		.type	prvDeleteTCB, %function
 176              	prvDeleteTCB:
 177              	.LFB106:
3677:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 178              		.loc 1 3677 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 70


 182              	.LVL16:
 183 0000 10B5     		push	{r4, lr}
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 187 0002 0446     		mov	r4, r0
3695:..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
 188              		.loc 1 3695 0
 189 0004 006B     		ldr	r0, [r0, #48]
 190              	.LVL17:
 191 0006 FFF7FEFF 		bl	vPortFree
 192              	.LVL18:
3696:..\FreeRTOS/tasks.c **** 		}
 193              		.loc 1 3696 0
 194 000a 2046     		mov	r0, r4
 195 000c FFF7FEFF 		bl	vPortFree
 196              	.LVL19:
 197 0010 10BD     		pop	{r4, pc}
 198              		.cfi_endproc
 199              	.LFE106:
 200              		.size	prvDeleteTCB, .-prvDeleteTCB
 201 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 202              		.align	2
 203              		.thumb
 204              		.thumb_func
 205              		.type	prvInitialiseNewTask, %function
 206              	prvInitialiseNewTask:
 207              	.LFB70:
 831:..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 208              		.loc 1 831 0
 209              		.cfi_startproc
 210              		@ args = 16, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL20:
 213 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 214              		.cfi_def_cfa_offset 32
 215              		.cfi_offset 4, -32
 216              		.cfi_offset 5, -28
 217              		.cfi_offset 6, -24
 218              		.cfi_offset 7, -20
 219              		.cfi_offset 8, -16
 220              		.cfi_offset 9, -12
 221              		.cfi_offset 10, -8
 222              		.cfi_offset 14, -4
 223 0004 8146     		mov	r9, r0
 224 0006 0D46     		mov	r5, r1
 225 0008 1746     		mov	r7, r2
 226 000a 9A46     		mov	r10, r3
 227 000c 089E     		ldr	r6, [sp, #32]
 228 000e DDF82480 		ldr	r8, [sp, #36]
 229 0012 0A9C     		ldr	r4, [sp, #40]
 853:..\FreeRTOS/tasks.c **** 	}
 230              		.loc 1 853 0
 231 0014 9200     		lsls	r2, r2, #2
 232              	.LVL21:
 233 0016 A521     		movs	r1, #165
 234              	.LVL22:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 71


 235 0018 206B     		ldr	r0, [r4, #48]
 236              	.LVL23:
 237 001a FFF7FEFF 		bl	memset
 238              	.LVL24:
 863:..\FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 239              		.loc 1 863 0
 240 001e 236B     		ldr	r3, [r4, #48]
 241 0020 07F18042 		add	r2, r7, #1073741824
 242 0024 013A     		subs	r2, r2, #1
 243 0026 03EB8207 		add	r7, r3, r2, lsl #2
 244              	.LVL25:
 864:..\FreeRTOS/tasks.c **** 
 245              		.loc 1 864 0
 246 002a 27F00707 		bic	r7, r7, #7
 247              	.LVL26:
 891:..\FreeRTOS/tasks.c **** 	{
 248              		.loc 1 891 0
 249 002e 0023     		movs	r3, #0
 250 0030 06E0     		b	.L25
 251              	.LVL27:
 252              	.L27:
 893:..\FreeRTOS/tasks.c **** 
 253              		.loc 1 893 0
 254 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 255 0034 E218     		adds	r2, r4, r3
 256 0036 82F83410 		strb	r1, [r2, #52]
 898:..\FreeRTOS/tasks.c **** 		{
 257              		.loc 1 898 0
 258 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 259 003c 12B1     		cbz	r2, .L26
 891:..\FreeRTOS/tasks.c **** 	{
 260              		.loc 1 891 0 discriminator 2
 261 003e 0133     		adds	r3, r3, #1
 262              	.LVL28:
 263              	.L25:
 891:..\FreeRTOS/tasks.c **** 	{
 264              		.loc 1 891 0 is_stmt 0 discriminator 1
 265 0040 0B2B     		cmp	r3, #11
 266 0042 F6D9     		bls	.L27
 267              	.L26:
 910:..\FreeRTOS/tasks.c **** 
 268              		.loc 1 910 0 is_stmt 1
 269 0044 0023     		movs	r3, #0
 270              	.LVL29:
 271 0046 84F83F30 		strb	r3, [r4, #63]
 914:..\FreeRTOS/tasks.c **** 	{
 272              		.loc 1 914 0
 273 004a 042E     		cmp	r6, #4
 274 004c 00D9     		bls	.L28
 916:..\FreeRTOS/tasks.c **** 	}
 275              		.loc 1 916 0
 276 004e 0426     		movs	r6, #4
 277              	.L28:
 278              	.LVL30:
 923:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 279              		.loc 1 923 0
 280 0050 E662     		str	r6, [r4, #44]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 72


 926:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 281              		.loc 1 926 0
 282 0052 2664     		str	r6, [r4, #64]
 927:..\FreeRTOS/tasks.c **** 	}
 283              		.loc 1 927 0
 284 0054 0025     		movs	r5, #0
 285              	.LVL31:
 286 0056 6564     		str	r5, [r4, #68]
 931:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 287              		.loc 1 931 0
 288 0058 201D     		adds	r0, r4, #4
 289 005a FFF7FEFF 		bl	vListInitialiseItem
 290              	.LVL32:
 932:..\FreeRTOS/tasks.c **** 
 291              		.loc 1 932 0
 292 005e 04F11800 		add	r0, r4, #24
 293 0062 FFF7FEFF 		bl	vListInitialiseItem
 294              	.LVL33:
 936:..\FreeRTOS/tasks.c **** 
 295              		.loc 1 936 0
 296 0066 2461     		str	r4, [r4, #16]
 939:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 297              		.loc 1 939 0
 298 0068 C6F10506 		rsb	r6, r6, #5
 299              	.LVL34:
 300 006c A661     		str	r6, [r4, #24]
 940:..\FreeRTOS/tasks.c **** 
 301              		.loc 1 940 0
 302 006e 6462     		str	r4, [r4, #36]
 982:..\FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 303              		.loc 1 982 0
 304 0070 A564     		str	r5, [r4, #72]
 983:..\FreeRTOS/tasks.c **** 	}
 305              		.loc 1 983 0
 306 0072 84F84C50 		strb	r5, [r4, #76]
1010:..\FreeRTOS/tasks.c **** 	}
 307              		.loc 1 1010 0
 308 0076 5246     		mov	r2, r10
 309 0078 4946     		mov	r1, r9
 310 007a 3846     		mov	r0, r7
 311 007c FFF7FEFF 		bl	pxPortInitialiseStack
 312              	.LVL35:
 313 0080 2060     		str	r0, [r4]
1014:..\FreeRTOS/tasks.c **** 	{
 314              		.loc 1 1014 0
 315 0082 B8F1000F 		cmp	r8, #0
 316 0086 01D0     		beq	.L24
1018:..\FreeRTOS/tasks.c **** 	}
 317              		.loc 1 1018 0
 318 0088 C8F80040 		str	r4, [r8]
 319              	.L24:
 320 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 321              		.cfi_endproc
 322              	.LFE70:
 323              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 324              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 325              		.align	2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 73


 326              		.thumb
 327              		.thumb_func
 328              		.type	prvInitialiseTaskLists, %function
 329              	prvInitialiseTaskLists:
 330              	.LFB102:
3437:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
 331              		.loc 1 3437 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0000 70B5     		push	{r4, r5, r6, lr}
 336              		.cfi_def_cfa_offset 16
 337              		.cfi_offset 4, -16
 338              		.cfi_offset 5, -12
 339              		.cfi_offset 6, -8
 340              		.cfi_offset 14, -4
 341              	.LVL36:
3440:..\FreeRTOS/tasks.c **** 	{
 342              		.loc 1 3440 0
 343 0002 0024     		movs	r4, #0
 344 0004 07E0     		b	.L33
 345              	.LVL37:
 346              	.L34:
3442:..\FreeRTOS/tasks.c **** 	}
 347              		.loc 1 3442 0 discriminator 3
 348 0006 04EB8402 		add	r2, r4, r4, lsl #2
 349 000a 9300     		lsls	r3, r2, #2
 350 000c 1048     		ldr	r0, .L36
 351 000e 1844     		add	r0, r0, r3
 352 0010 FFF7FEFF 		bl	vListInitialise
 353              	.LVL38:
3440:..\FreeRTOS/tasks.c **** 	{
 354              		.loc 1 3440 0 discriminator 3
 355 0014 0134     		adds	r4, r4, #1
 356              	.LVL39:
 357              	.L33:
3440:..\FreeRTOS/tasks.c **** 	{
 358              		.loc 1 3440 0 is_stmt 0 discriminator 1
 359 0016 042C     		cmp	r4, #4
 360 0018 F5D9     		bls	.L34
3445:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 361              		.loc 1 3445 0 is_stmt 1
 362 001a 0E4C     		ldr	r4, .L36+4
 363              	.LVL40:
 364 001c 04F19406 		add	r6, r4, #148
 365 0020 3046     		mov	r0, r6
 366 0022 FFF7FEFF 		bl	vListInitialise
 367              	.LVL41:
3446:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 368              		.loc 1 3446 0
 369 0026 04F1A805 		add	r5, r4, #168
 370 002a 2846     		mov	r0, r5
 371 002c FFF7FEFF 		bl	vListInitialise
 372              	.LVL42:
3447:..\FreeRTOS/tasks.c **** 
 373              		.loc 1 3447 0
 374 0030 04F11400 		add	r0, r4, #20
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 74


 375 0034 FFF7FEFF 		bl	vListInitialise
 376              	.LVL43:
3451:..\FreeRTOS/tasks.c **** 	}
 377              		.loc 1 3451 0
 378 0038 04F1BC00 		add	r0, r4, #188
 379 003c FFF7FEFF 		bl	vListInitialise
 380              	.LVL44:
3457:..\FreeRTOS/tasks.c **** 	}
 381              		.loc 1 3457 0
 382 0040 2046     		mov	r0, r4
 383 0042 FFF7FEFF 		bl	vListInitialise
 384              	.LVL45:
3463:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 385              		.loc 1 3463 0
 386 0046 A662     		str	r6, [r4, #40]
3464:..\FreeRTOS/tasks.c **** }
 387              		.loc 1 3464 0
 388 0048 C4F8D050 		str	r5, [r4, #208]
 389 004c 70BD     		pop	{r4, r5, r6, pc}
 390              	.L37:
 391 004e 00BF     		.align	2
 392              	.L36:
 393 0050 30000000 		.word	.LANCHOR0+48
 394 0054 00000000 		.word	.LANCHOR0
 395              		.cfi_endproc
 396              	.LFE102:
 397              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 398              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 399              		.align	2
 400              		.thumb
 401              		.thumb_func
 402              		.type	prvAddNewTaskToReadyList, %function
 403              	prvAddNewTaskToReadyList:
 404              	.LFB71:
1028:..\FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 405              		.loc 1 1028 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              	.LVL46:
 410 0000 38B5     		push	{r3, r4, r5, lr}
 411              		.cfi_def_cfa_offset 16
 412              		.cfi_offset 3, -16
 413              		.cfi_offset 4, -12
 414              		.cfi_offset 5, -8
 415              		.cfi_offset 14, -4
 416 0002 0546     		mov	r5, r0
1031:..\FreeRTOS/tasks.c **** 	{
 417              		.loc 1 1031 0
 418 0004 FFF7FEFF 		bl	vPortEnterCritical
 419              	.LVL47:
1033:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 420              		.loc 1 1033 0
 421 0008 264B     		ldr	r3, .L43
 422 000a D3F8D420 		ldr	r2, [r3, #212]
 423 000e 0132     		adds	r2, r2, #1
 424 0010 C3F8D420 		str	r2, [r3, #212]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 75


1034:..\FreeRTOS/tasks.c **** 		{
 425              		.loc 1 1034 0
 426 0014 D3F8D830 		ldr	r3, [r3, #216]
 427 0018 4BB9     		cbnz	r3, .L39
1038:..\FreeRTOS/tasks.c **** 
 428              		.loc 1 1038 0
 429 001a 224B     		ldr	r3, .L43
 430 001c C3F8D850 		str	r5, [r3, #216]
1040:..\FreeRTOS/tasks.c **** 			{
 431              		.loc 1 1040 0
 432 0020 D3F8D430 		ldr	r3, [r3, #212]
 433 0024 012B     		cmp	r3, #1
 434 0026 10D1     		bne	.L40
1045:..\FreeRTOS/tasks.c **** 			}
 435              		.loc 1 1045 0
 436 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 437              	.LVL48:
 438 002c 0DE0     		b	.L40
 439              	.L39:
1057:..\FreeRTOS/tasks.c **** 			{
 440              		.loc 1 1057 0
 441 002e 1D4B     		ldr	r3, .L43
 442 0030 D3F8DC30 		ldr	r3, [r3, #220]
 443 0034 4BB9     		cbnz	r3, .L40
1059:..\FreeRTOS/tasks.c **** 				{
 444              		.loc 1 1059 0
 445 0036 1B4B     		ldr	r3, .L43
 446 0038 D3F8D830 		ldr	r3, [r3, #216]
 447 003c DA6A     		ldr	r2, [r3, #44]
 448 003e EB6A     		ldr	r3, [r5, #44]
 449 0040 9A42     		cmp	r2, r3
 450 0042 02D8     		bhi	.L40
1061:..\FreeRTOS/tasks.c **** 				}
 451              		.loc 1 1061 0
 452 0044 174B     		ldr	r3, .L43
 453 0046 C3F8D850 		str	r5, [r3, #216]
 454              	.L40:
1074:..\FreeRTOS/tasks.c **** 
 455              		.loc 1 1074 0
 456 004a 164C     		ldr	r4, .L43
 457 004c D4F8E030 		ldr	r3, [r4, #224]
 458 0050 0133     		adds	r3, r3, #1
 459 0052 C4F8E030 		str	r3, [r4, #224]
1084:..\FreeRTOS/tasks.c **** 
 460              		.loc 1 1084 0
 461 0056 EB6A     		ldr	r3, [r5, #44]
 462 0058 0122     		movs	r2, #1
 463 005a 02FA03F1 		lsl	r1, r2, r3
 464 005e D4F8E420 		ldr	r2, [r4, #228]
 465 0062 0A43     		orrs	r2, r2, r1
 466 0064 C4F8E420 		str	r2, [r4, #228]
 467 0068 04F13000 		add	r0, r4, #48
 468 006c 03EB8303 		add	r3, r3, r3, lsl #2
 469 0070 9A00     		lsls	r2, r3, #2
 470 0072 291D     		adds	r1, r5, #4
 471 0074 1044     		add	r0, r0, r2
 472 0076 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 76


 473              	.LVL49:
1088:..\FreeRTOS/tasks.c **** 
 474              		.loc 1 1088 0
 475 007a FFF7FEFF 		bl	vPortExitCritical
 476              	.LVL50:
1090:..\FreeRTOS/tasks.c **** 	{
 477              		.loc 1 1090 0
 478 007e D4F8DC30 		ldr	r3, [r4, #220]
 479 0082 6BB1     		cbz	r3, .L38
1094:..\FreeRTOS/tasks.c **** 		{
 480              		.loc 1 1094 0
 481 0084 D4F8D830 		ldr	r3, [r4, #216]
 482 0088 DA6A     		ldr	r2, [r3, #44]
 483 008a EB6A     		ldr	r3, [r5, #44]
 484 008c 9A42     		cmp	r2, r3
 485 008e 07D2     		bcs	.L38
1096:..\FreeRTOS/tasks.c **** 		}
 486              		.loc 1 1096 0
 487 0090 4FF08052 		mov	r2, #268435456
 488 0094 044B     		ldr	r3, .L43+4
 489 0096 1A60     		str	r2, [r3]
 490              		.syntax unified
 491              	@ 1096 "..\FreeRTOS\tasks.c" 1
 492 0098 BFF34F8F 		dsb
 493              	@ 0 "" 2
 494              	@ 1096 "..\FreeRTOS\tasks.c" 1
 495 009c BFF36F8F 		isb
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499              	.L38:
 500 00a0 38BD     		pop	{r3, r4, r5, pc}
 501              	.LVL51:
 502              	.L44:
 503 00a2 00BF     		.align	2
 504              	.L43:
 505 00a4 00000000 		.word	.LANCHOR0
 506 00a8 04ED00E0 		.word	-536810236
 507              		.cfi_endproc
 508              	.LFE71:
 509              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 510              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 511              		.align	2
 512              		.thumb
 513              		.thumb_func
 514              		.type	prvCheckTasksWaitingTermination, %function
 515              	prvCheckTasksWaitingTermination:
 516              	.LFB103:
3469:..\FreeRTOS/tasks.c **** 
 517              		.loc 1 3469 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521 0000 38B5     		push	{r3, r4, r5, lr}
 522              		.cfi_def_cfa_offset 16
 523              		.cfi_offset 3, -16
 524              		.cfi_offset 4, -12
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 77


 525              		.cfi_offset 5, -8
 526              		.cfi_offset 14, -4
 527              	.LBB26:
3479:..\FreeRTOS/tasks.c **** 		{
 528              		.loc 1 3479 0
 529 0002 17E0     		b	.L46
 530              	.L47:
3481:..\FreeRTOS/tasks.c **** 			{
 531              		.loc 1 3481 0
 532 0004 FFF7FEFF 		bl	vPortEnterCritical
 533              	.LVL52:
3483:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 534              		.loc 1 3483 0
 535 0008 0D4C     		ldr	r4, .L49
 536 000a D4F8C830 		ldr	r3, [r4, #200]
 537 000e DD68     		ldr	r5, [r3, #12]
 538              	.LVL53:
3484:..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 539              		.loc 1 3484 0
 540 0010 281D     		adds	r0, r5, #4
 541 0012 FFF7FEFF 		bl	uxListRemove
 542              	.LVL54:
3485:..\FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 543              		.loc 1 3485 0
 544 0016 D4F8D430 		ldr	r3, [r4, #212]
 545 001a 013B     		subs	r3, r3, #1
 546 001c C4F8D430 		str	r3, [r4, #212]
3486:..\FreeRTOS/tasks.c **** 			}
 547              		.loc 1 3486 0
 548 0020 D4F8E830 		ldr	r3, [r4, #232]
 549 0024 013B     		subs	r3, r3, #1
 550 0026 C4F8E830 		str	r3, [r4, #232]
3488:..\FreeRTOS/tasks.c **** 
 551              		.loc 1 3488 0
 552 002a FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL55:
3490:..\FreeRTOS/tasks.c **** 		}
 554              		.loc 1 3490 0
 555 002e 2846     		mov	r0, r5
 556 0030 FFF7FEFF 		bl	prvDeleteTCB
 557              	.LVL56:
 558              	.L46:
3479:..\FreeRTOS/tasks.c **** 		{
 559              		.loc 1 3479 0
 560 0034 024B     		ldr	r3, .L49
 561 0036 D3F8E830 		ldr	r3, [r3, #232]
 562 003a 002B     		cmp	r3, #0
 563 003c E2D1     		bne	.L47
 564              	.LBE26:
3494:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 565              		.loc 1 3494 0
 566 003e 38BD     		pop	{r3, r4, r5, pc}
 567              	.L50:
 568              		.align	2
 569              	.L49:
 570 0040 00000000 		.word	.LANCHOR0
 571              		.cfi_endproc
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 78


 572              	.LFE103:
 573              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 574              		.section	.text.prvIdleTask,"ax",%progbits
 575              		.align	2
 576              		.thumb
 577              		.thumb_func
 578              		.type	prvIdleTask, %function
 579              	prvIdleTask:
 580              	.LFB101:
3225:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
 581              		.loc 1 3225 0
 582              		.cfi_startproc
 583              		@ Volatile: function does not return.
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL57:
 587 0000 08B5     		push	{r3, lr}
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 3, -8
 590              		.cfi_offset 14, -4
 591              	.LVL58:
 592              	.L52:
3241:..\FreeRTOS/tasks.c **** 
 593              		.loc 1 3241 0 discriminator 1
 594 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 595              	.LVL59:
 596 0006 FCE7     		b	.L52
 597              		.cfi_endproc
 598              	.LFE101:
 599              		.size	prvIdleTask, .-prvIdleTask
 600              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 601              		.align	2
 602              		.thumb
 603              		.thumb_func
 604              		.type	prvAddCurrentTaskToDelayedList, %function
 605              	prvAddCurrentTaskToDelayedList:
 606              	.LFB120:
3750:..\FreeRTOS/tasks.c **** 	}
3751:..\FreeRTOS/tasks.c **** }
3752:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3753:..\FreeRTOS/tasks.c **** 
3754:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:..\FreeRTOS/tasks.c **** 
3756:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:..\FreeRTOS/tasks.c **** 	{
3758:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3759:..\FreeRTOS/tasks.c **** 
3760:..\FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3761:..\FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:..\FreeRTOS/tasks.c **** 		individual execution thread. */
3763:..\FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
3764:..\FreeRTOS/tasks.c **** 
3765:..\FreeRTOS/tasks.c **** 		return xReturn;
3766:..\FreeRTOS/tasks.c **** 	}
3767:..\FreeRTOS/tasks.c **** 
3768:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 79


3770:..\FreeRTOS/tasks.c **** 
3771:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:..\FreeRTOS/tasks.c **** 
3773:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:..\FreeRTOS/tasks.c **** 	{
3775:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
3776:..\FreeRTOS/tasks.c **** 
3777:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3778:..\FreeRTOS/tasks.c **** 		{
3779:..\FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3780:..\FreeRTOS/tasks.c **** 		}
3781:..\FreeRTOS/tasks.c **** 		else
3782:..\FreeRTOS/tasks.c **** 		{
3783:..\FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3784:..\FreeRTOS/tasks.c **** 			{
3785:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3786:..\FreeRTOS/tasks.c **** 			}
3787:..\FreeRTOS/tasks.c **** 			else
3788:..\FreeRTOS/tasks.c **** 			{
3789:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3790:..\FreeRTOS/tasks.c **** 			}
3791:..\FreeRTOS/tasks.c **** 		}
3792:..\FreeRTOS/tasks.c **** 
3793:..\FreeRTOS/tasks.c **** 		return xReturn;
3794:..\FreeRTOS/tasks.c **** 	}
3795:..\FreeRTOS/tasks.c **** 
3796:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3798:..\FreeRTOS/tasks.c **** 
3799:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:..\FreeRTOS/tasks.c **** 
3801:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:..\FreeRTOS/tasks.c **** 	{
3803:..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3804:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3805:..\FreeRTOS/tasks.c **** 
3806:..\FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:..\FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:..\FreeRTOS/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3810:..\FreeRTOS/tasks.c **** 		{
3811:..\FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:..\FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:..\FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:..\FreeRTOS/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3815:..\FreeRTOS/tasks.c **** 			{
3816:..\FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:..\FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:..\FreeRTOS/tasks.c **** 				not being used for anything else. */
3819:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3820:..\FreeRTOS/tasks.c **** 				{
3821:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3822:..\FreeRTOS/tasks.c **** 				}
3823:..\FreeRTOS/tasks.c **** 				else
3824:..\FreeRTOS/tasks.c **** 				{
3825:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 80


3827:..\FreeRTOS/tasks.c **** 
3828:..\FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:..\FreeRTOS/tasks.c **** 				to be moved into a new list. */
3830:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3831:..\FreeRTOS/tasks.c **** 				{
3832:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3833:..\FreeRTOS/tasks.c **** 					{
3834:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3835:..\FreeRTOS/tasks.c **** 					}
3836:..\FreeRTOS/tasks.c **** 					else
3837:..\FreeRTOS/tasks.c **** 					{
3838:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:..\FreeRTOS/tasks.c **** 					}
3840:..\FreeRTOS/tasks.c **** 
3841:..\FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:..\FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3844:..\FreeRTOS/tasks.c **** 				}
3845:..\FreeRTOS/tasks.c **** 				else
3846:..\FreeRTOS/tasks.c **** 				{
3847:..\FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3848:..\FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3849:..\FreeRTOS/tasks.c **** 				}
3850:..\FreeRTOS/tasks.c **** 
3851:..\FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:..\FreeRTOS/tasks.c **** 
3853:..\FreeRTOS/tasks.c **** 				/* Inheritance occurred. */
3854:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
3855:..\FreeRTOS/tasks.c **** 			}
3856:..\FreeRTOS/tasks.c **** 			else
3857:..\FreeRTOS/tasks.c **** 			{
3858:..\FreeRTOS/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3859:..\FreeRTOS/tasks.c **** 				{
3860:..\FreeRTOS/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:..\FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:..\FreeRTOS/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:..\FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex.
3864:..\FreeRTOS/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:..\FreeRTOS/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:..\FreeRTOS/tasks.c **** 					not been the case. */
3867:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
3868:..\FreeRTOS/tasks.c **** 				}
3869:..\FreeRTOS/tasks.c **** 				else
3870:..\FreeRTOS/tasks.c **** 				{
3871:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:..\FreeRTOS/tasks.c **** 				}
3873:..\FreeRTOS/tasks.c **** 			}
3874:..\FreeRTOS/tasks.c **** 		}
3875:..\FreeRTOS/tasks.c **** 		else
3876:..\FreeRTOS/tasks.c **** 		{
3877:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3878:..\FreeRTOS/tasks.c **** 		}
3879:..\FreeRTOS/tasks.c **** 
3880:..\FreeRTOS/tasks.c **** 		return xReturn;
3881:..\FreeRTOS/tasks.c **** 	}
3882:..\FreeRTOS/tasks.c **** 
3883:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 81


3884:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3885:..\FreeRTOS/tasks.c **** 
3886:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:..\FreeRTOS/tasks.c **** 
3888:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:..\FreeRTOS/tasks.c **** 	{
3890:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3891:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3892:..\FreeRTOS/tasks.c **** 
3893:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3894:..\FreeRTOS/tasks.c **** 		{
3895:..\FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:..\FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:..\FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:..\FreeRTOS/tasks.c **** 			be the running state task. */
3899:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3900:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3901:..\FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3902:..\FreeRTOS/tasks.c **** 
3903:..\FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:..\FreeRTOS/tasks.c **** 			task? */
3905:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3906:..\FreeRTOS/tasks.c **** 			{
3907:..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3909:..\FreeRTOS/tasks.c **** 				{
3910:..\FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:..\FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:..\FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:..\FreeRTOS/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:..\FreeRTOS/tasks.c **** 					the holding task from the ready list. */
3915:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3916:..\FreeRTOS/tasks.c **** 					{
3917:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3918:..\FreeRTOS/tasks.c **** 					}
3919:..\FreeRTOS/tasks.c **** 					else
3920:..\FreeRTOS/tasks.c **** 					{
3921:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:..\FreeRTOS/tasks.c **** 					}
3923:..\FreeRTOS/tasks.c **** 
3924:..\FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:..\FreeRTOS/tasks.c **** 					new	ready list. */
3926:..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3928:..\FreeRTOS/tasks.c **** 
3929:..\FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:..\FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3931:..\FreeRTOS/tasks.c **** 					running to give back the mutex. */
3932:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3933:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3934:..\FreeRTOS/tasks.c **** 
3935:..\FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:..\FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3937:..\FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:..\FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
3939:..\FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:..\FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 82


3941:..\FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:..\FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
3943:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
3944:..\FreeRTOS/tasks.c **** 				}
3945:..\FreeRTOS/tasks.c **** 				else
3946:..\FreeRTOS/tasks.c **** 				{
3947:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3948:..\FreeRTOS/tasks.c **** 				}
3949:..\FreeRTOS/tasks.c **** 			}
3950:..\FreeRTOS/tasks.c **** 			else
3951:..\FreeRTOS/tasks.c **** 			{
3952:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:..\FreeRTOS/tasks.c **** 			}
3954:..\FreeRTOS/tasks.c **** 		}
3955:..\FreeRTOS/tasks.c **** 		else
3956:..\FreeRTOS/tasks.c **** 		{
3957:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:..\FreeRTOS/tasks.c **** 		}
3959:..\FreeRTOS/tasks.c **** 
3960:..\FreeRTOS/tasks.c **** 		return xReturn;
3961:..\FreeRTOS/tasks.c **** 	}
3962:..\FreeRTOS/tasks.c **** 
3963:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3964:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3965:..\FreeRTOS/tasks.c **** 
3966:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:..\FreeRTOS/tasks.c **** 
3968:..\FreeRTOS/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:..\FreeRTOS/tasks.c **** 	{
3970:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3971:..\FreeRTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3972:..\FreeRTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3973:..\FreeRTOS/tasks.c **** 
3974:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3975:..\FreeRTOS/tasks.c **** 		{
3976:..\FreeRTOS/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:..\FreeRTOS/tasks.c **** 			one mutex. */
3978:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3979:..\FreeRTOS/tasks.c **** 
3980:..\FreeRTOS/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:..\FreeRTOS/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:..\FreeRTOS/tasks.c **** 			holding task's base priority and the priority of the highest
3983:..\FreeRTOS/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3985:..\FreeRTOS/tasks.c **** 			{
3986:..\FreeRTOS/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3987:..\FreeRTOS/tasks.c **** 			}
3988:..\FreeRTOS/tasks.c **** 			else
3989:..\FreeRTOS/tasks.c **** 			{
3990:..\FreeRTOS/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3991:..\FreeRTOS/tasks.c **** 			}
3992:..\FreeRTOS/tasks.c **** 
3993:..\FreeRTOS/tasks.c **** 			/* Does the priority need to change? */
3994:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3995:..\FreeRTOS/tasks.c **** 			{
3996:..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:..\FreeRTOS/tasks.c **** 				simplification in the priority inheritance implementation.  If
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 83


3998:..\FreeRTOS/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:..\FreeRTOS/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4001:..\FreeRTOS/tasks.c **** 				{
4002:..\FreeRTOS/tasks.c **** 					/* If a task has timed out because it already holds the
4003:..\FreeRTOS/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:..\FreeRTOS/tasks.c **** 					its own priority. */
4005:..\FreeRTOS/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4006:..\FreeRTOS/tasks.c **** 
4007:..\FreeRTOS/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:..\FreeRTOS/tasks.c **** 					priority to facilitate determining the subject task's
4009:..\FreeRTOS/tasks.c **** 					state. */
4010:..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:..\FreeRTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4012:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4013:..\FreeRTOS/tasks.c **** 
4014:..\FreeRTOS/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:..\FreeRTOS/tasks.c **** 					being used for anything else. */
4016:..\FreeRTOS/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4017:..\FreeRTOS/tasks.c **** 					{
4018:..\FreeRTOS/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4019:..\FreeRTOS/tasks.c **** 					}
4020:..\FreeRTOS/tasks.c **** 					else
4021:..\FreeRTOS/tasks.c **** 					{
4022:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:..\FreeRTOS/tasks.c **** 					}
4024:..\FreeRTOS/tasks.c **** 
4025:..\FreeRTOS/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:..\FreeRTOS/tasks.c **** 					then the task that holds the mutex could be in either the
4027:..\FreeRTOS/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:..\FreeRTOS/tasks.c **** 					from its current state list if it is in the Ready state as
4029:..\FreeRTOS/tasks.c **** 					the task's priority is going to change and there is one
4030:..\FreeRTOS/tasks.c **** 					Ready list per priority. */
4031:..\FreeRTOS/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4032:..\FreeRTOS/tasks.c **** 					{
4033:..\FreeRTOS/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4034:..\FreeRTOS/tasks.c **** 						{
4035:..\FreeRTOS/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4036:..\FreeRTOS/tasks.c **** 						}
4037:..\FreeRTOS/tasks.c **** 						else
4038:..\FreeRTOS/tasks.c **** 						{
4039:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:..\FreeRTOS/tasks.c **** 						}
4041:..\FreeRTOS/tasks.c **** 
4042:..\FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4043:..\FreeRTOS/tasks.c **** 					}
4044:..\FreeRTOS/tasks.c **** 					else
4045:..\FreeRTOS/tasks.c **** 					{
4046:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:..\FreeRTOS/tasks.c **** 					}
4048:..\FreeRTOS/tasks.c **** 				}
4049:..\FreeRTOS/tasks.c **** 				else
4050:..\FreeRTOS/tasks.c **** 				{
4051:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:..\FreeRTOS/tasks.c **** 				}
4053:..\FreeRTOS/tasks.c **** 			}
4054:..\FreeRTOS/tasks.c **** 			else
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 84


4055:..\FreeRTOS/tasks.c **** 			{
4056:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:..\FreeRTOS/tasks.c **** 			}
4058:..\FreeRTOS/tasks.c **** 		}
4059:..\FreeRTOS/tasks.c **** 		else
4060:..\FreeRTOS/tasks.c **** 		{
4061:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4062:..\FreeRTOS/tasks.c **** 		}
4063:..\FreeRTOS/tasks.c **** 	}
4064:..\FreeRTOS/tasks.c **** 
4065:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4066:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4067:..\FreeRTOS/tasks.c **** 
4068:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:..\FreeRTOS/tasks.c **** 
4070:..\FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
4071:..\FreeRTOS/tasks.c **** 	{
4072:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
4073:..\FreeRTOS/tasks.c **** 
4074:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:..\FreeRTOS/tasks.c **** 		{
4076:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:..\FreeRTOS/tasks.c **** 
4078:..\FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:..\FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:..\FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:..\FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:..\FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:..\FreeRTOS/tasks.c **** 			critical section. */
4084:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:..\FreeRTOS/tasks.c **** 			{
4086:..\FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:..\FreeRTOS/tasks.c **** 			}
4088:..\FreeRTOS/tasks.c **** 		}
4089:..\FreeRTOS/tasks.c **** 		else
4090:..\FreeRTOS/tasks.c **** 		{
4091:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:..\FreeRTOS/tasks.c **** 		}
4093:..\FreeRTOS/tasks.c **** 	}
4094:..\FreeRTOS/tasks.c **** 
4095:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4097:..\FreeRTOS/tasks.c **** 
4098:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:..\FreeRTOS/tasks.c **** 
4100:..\FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
4101:..\FreeRTOS/tasks.c **** 	{
4102:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:..\FreeRTOS/tasks.c **** 		{
4104:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:..\FreeRTOS/tasks.c **** 			{
4106:..\FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:..\FreeRTOS/tasks.c **** 
4108:..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:..\FreeRTOS/tasks.c **** 				{
4110:..\FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
4111:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 85


4112:..\FreeRTOS/tasks.c **** 				else
4113:..\FreeRTOS/tasks.c **** 				{
4114:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:..\FreeRTOS/tasks.c **** 				}
4116:..\FreeRTOS/tasks.c **** 			}
4117:..\FreeRTOS/tasks.c **** 			else
4118:..\FreeRTOS/tasks.c **** 			{
4119:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:..\FreeRTOS/tasks.c **** 			}
4121:..\FreeRTOS/tasks.c **** 		}
4122:..\FreeRTOS/tasks.c **** 		else
4123:..\FreeRTOS/tasks.c **** 		{
4124:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:..\FreeRTOS/tasks.c **** 		}
4126:..\FreeRTOS/tasks.c **** 	}
4127:..\FreeRTOS/tasks.c **** 
4128:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4130:..\FreeRTOS/tasks.c **** 
4131:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:..\FreeRTOS/tasks.c **** 
4133:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:..\FreeRTOS/tasks.c **** 	{
4135:..\FreeRTOS/tasks.c **** 	size_t x;
4136:..\FreeRTOS/tasks.c **** 
4137:..\FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
4138:..\FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4139:..\FreeRTOS/tasks.c **** 
4140:..\FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:..\FreeRTOS/tasks.c **** 		printed out. */
4142:..\FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4143:..\FreeRTOS/tasks.c **** 		{
4144:..\FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
4145:..\FreeRTOS/tasks.c **** 		}
4146:..\FreeRTOS/tasks.c **** 
4147:..\FreeRTOS/tasks.c **** 		/* Terminate. */
4148:..\FreeRTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
4149:..\FreeRTOS/tasks.c **** 
4150:..\FreeRTOS/tasks.c **** 		/* Return the new end of string. */
4151:..\FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
4152:..\FreeRTOS/tasks.c **** 	}
4153:..\FreeRTOS/tasks.c **** 
4154:..\FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4156:..\FreeRTOS/tasks.c **** 
4157:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:..\FreeRTOS/tasks.c **** 
4159:..\FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:..\FreeRTOS/tasks.c **** 	{
4161:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4163:..\FreeRTOS/tasks.c **** 	char cStatus;
4164:..\FreeRTOS/tasks.c **** 
4165:..\FreeRTOS/tasks.c **** 		/*
4166:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4167:..\FreeRTOS/tasks.c **** 		 *
4168:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 86


4169:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:..\FreeRTOS/tasks.c **** 		 * scheduler.
4171:..\FreeRTOS/tasks.c **** 		 *
4172:..\FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:..\FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:..\FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
4175:..\FreeRTOS/tasks.c **** 		 *
4176:..\FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:..\FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:..\FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:..\FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:..\FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:..\FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:..\FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
4183:..\FreeRTOS/tasks.c **** 		 *
4184:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
4187:..\FreeRTOS/tasks.c **** 		 */
4188:..\FreeRTOS/tasks.c **** 
4189:..\FreeRTOS/tasks.c **** 
4190:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4192:..\FreeRTOS/tasks.c **** 
4193:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:..\FreeRTOS/tasks.c **** 		function is executing. */
4195:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4196:..\FreeRTOS/tasks.c **** 
4197:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:..\FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:..\FreeRTOS/tasks.c **** 		equate to NULL. */
4200:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4201:..\FreeRTOS/tasks.c **** 
4202:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4203:..\FreeRTOS/tasks.c **** 		{
4204:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4205:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4206:..\FreeRTOS/tasks.c **** 
4207:..\FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:..\FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4209:..\FreeRTOS/tasks.c **** 			{
4210:..\FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4211:..\FreeRTOS/tasks.c **** 				{
4212:..\FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4213:..\FreeRTOS/tasks.c **** 										break;
4214:..\FreeRTOS/tasks.c **** 
4215:..\FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4216:..\FreeRTOS/tasks.c **** 										break;
4217:..\FreeRTOS/tasks.c **** 
4218:..\FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4219:..\FreeRTOS/tasks.c **** 										break;
4220:..\FreeRTOS/tasks.c **** 
4221:..\FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4222:..\FreeRTOS/tasks.c **** 										break;
4223:..\FreeRTOS/tasks.c **** 
4224:..\FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4225:..\FreeRTOS/tasks.c **** 										to prevent static checking errors. */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 87


4226:..\FreeRTOS/tasks.c **** 										cStatus = 0x00;
4227:..\FreeRTOS/tasks.c **** 										break;
4228:..\FreeRTOS/tasks.c **** 				}
4229:..\FreeRTOS/tasks.c **** 
4230:..\FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4231:..\FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
4232:..\FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4233:..\FreeRTOS/tasks.c **** 
4234:..\FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
4235:..\FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4236:..\FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4237:..\FreeRTOS/tasks.c **** 			}
4238:..\FreeRTOS/tasks.c **** 
4239:..\FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4240:..\FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4241:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4242:..\FreeRTOS/tasks.c **** 		}
4243:..\FreeRTOS/tasks.c **** 		else
4244:..\FreeRTOS/tasks.c **** 		{
4245:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4246:..\FreeRTOS/tasks.c **** 		}
4247:..\FreeRTOS/tasks.c **** 	}
4248:..\FreeRTOS/tasks.c **** 
4249:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4250:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4251:..\FreeRTOS/tasks.c **** 
4252:..\FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4253:..\FreeRTOS/tasks.c **** 
4254:..\FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4255:..\FreeRTOS/tasks.c **** 	{
4256:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4257:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4258:..\FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4259:..\FreeRTOS/tasks.c **** 
4260:..\FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4261:..\FreeRTOS/tasks.c **** 		{
4262:..\FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4263:..\FreeRTOS/tasks.c **** 		}
4264:..\FreeRTOS/tasks.c **** 		#endif
4265:..\FreeRTOS/tasks.c **** 
4266:..\FreeRTOS/tasks.c **** 		/*
4267:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4268:..\FreeRTOS/tasks.c **** 		 *
4269:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4270:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4271:..\FreeRTOS/tasks.c **** 		 * scheduler.
4272:..\FreeRTOS/tasks.c **** 		 *
4273:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4274:..\FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4275:..\FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4276:..\FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
4277:..\FreeRTOS/tasks.c **** 		 *
4278:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4279:..\FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4280:..\FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4281:..\FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4282:..\FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 88


4283:..\FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4284:..\FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
4285:..\FreeRTOS/tasks.c **** 		 *
4286:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4287:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4288:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4289:..\FreeRTOS/tasks.c **** 		 */
4290:..\FreeRTOS/tasks.c **** 
4291:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4292:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4293:..\FreeRTOS/tasks.c **** 
4294:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4295:..\FreeRTOS/tasks.c **** 		function is executing. */
4296:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4297:..\FreeRTOS/tasks.c **** 
4298:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4299:..\FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4300:..\FreeRTOS/tasks.c **** 		equate to NULL. */
4301:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4302:..\FreeRTOS/tasks.c **** 
4303:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4304:..\FreeRTOS/tasks.c **** 		{
4305:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4306:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4307:..\FreeRTOS/tasks.c **** 
4308:..\FreeRTOS/tasks.c **** 			/* For percentage calculations. */
4309:..\FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
4310:..\FreeRTOS/tasks.c **** 
4311:..\FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4312:..\FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
4313:..\FreeRTOS/tasks.c **** 			{
4314:..\FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4315:..\FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4316:..\FreeRTOS/tasks.c **** 				{
4317:..\FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4318:..\FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4319:..\FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4320:..\FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4321:..\FreeRTOS/tasks.c **** 
4322:..\FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
4323:..\FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4324:..\FreeRTOS/tasks.c **** 					easily. */
4325:..\FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4326:..\FreeRTOS/tasks.c **** 
4327:..\FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4328:..\FreeRTOS/tasks.c **** 					{
4329:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4330:..\FreeRTOS/tasks.c **** 						{
4331:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4332:..\FreeRTOS/tasks.c **** 						}
4333:..\FreeRTOS/tasks.c **** 						#else
4334:..\FreeRTOS/tasks.c **** 						{
4335:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4336:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
4337:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4338:..\FreeRTOS/tasks.c **** 						}
4339:..\FreeRTOS/tasks.c **** 						#endif
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 89


4340:..\FreeRTOS/tasks.c **** 					}
4341:..\FreeRTOS/tasks.c **** 					else
4342:..\FreeRTOS/tasks.c **** 					{
4343:..\FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4344:..\FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4345:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4346:..\FreeRTOS/tasks.c **** 						{
4347:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4348:..\FreeRTOS/tasks.c **** 						}
4349:..\FreeRTOS/tasks.c **** 						#else
4350:..\FreeRTOS/tasks.c **** 						{
4351:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4352:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
4353:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4354:..\FreeRTOS/tasks.c **** 						}
4355:..\FreeRTOS/tasks.c **** 						#endif
4356:..\FreeRTOS/tasks.c **** 					}
4357:..\FreeRTOS/tasks.c **** 
4358:..\FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4359:..\FreeRTOS/tasks.c **** 				}
4360:..\FreeRTOS/tasks.c **** 			}
4361:..\FreeRTOS/tasks.c **** 			else
4362:..\FreeRTOS/tasks.c **** 			{
4363:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4364:..\FreeRTOS/tasks.c **** 			}
4365:..\FreeRTOS/tasks.c **** 
4366:..\FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4367:..\FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4368:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4369:..\FreeRTOS/tasks.c **** 		}
4370:..\FreeRTOS/tasks.c **** 		else
4371:..\FreeRTOS/tasks.c **** 		{
4372:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4373:..\FreeRTOS/tasks.c **** 		}
4374:..\FreeRTOS/tasks.c **** 	}
4375:..\FreeRTOS/tasks.c **** 
4376:..\FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4377:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4378:..\FreeRTOS/tasks.c **** 
4379:..\FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4380:..\FreeRTOS/tasks.c **** {
4381:..\FreeRTOS/tasks.c **** TickType_t uxReturn;
4382:..\FreeRTOS/tasks.c **** 
4383:..\FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4384:..\FreeRTOS/tasks.c **** 
4385:..\FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4386:..\FreeRTOS/tasks.c **** 	queues and semaphores. */
4387:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4388:..\FreeRTOS/tasks.c **** 
4389:..\FreeRTOS/tasks.c **** 	return uxReturn;
4390:..\FreeRTOS/tasks.c **** }
4391:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4392:..\FreeRTOS/tasks.c **** 
4393:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4394:..\FreeRTOS/tasks.c **** 
4395:..\FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4396:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 90


4397:..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4398:..\FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4399:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
4400:..\FreeRTOS/tasks.c **** 		{
4401:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4402:..\FreeRTOS/tasks.c **** 		}
4403:..\FreeRTOS/tasks.c **** 
4404:..\FreeRTOS/tasks.c **** 		return pxCurrentTCB;
4405:..\FreeRTOS/tasks.c **** 	}
4406:..\FreeRTOS/tasks.c **** 
4407:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4408:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4409:..\FreeRTOS/tasks.c **** 
4410:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4411:..\FreeRTOS/tasks.c **** 
4412:..\FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4413:..\FreeRTOS/tasks.c **** 	{
4414:..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
4415:..\FreeRTOS/tasks.c **** 
4416:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4417:..\FreeRTOS/tasks.c **** 		{
4418:..\FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4419:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4420:..\FreeRTOS/tasks.c **** 			{
4421:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4422:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4423:..\FreeRTOS/tasks.c **** 
4424:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4425:..\FreeRTOS/tasks.c **** 				{
4426:..\FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4427:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4428:..\FreeRTOS/tasks.c **** 
4429:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4430:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4431:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4432:..\FreeRTOS/tasks.c **** 					application code should ever do. */
4433:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4434:..\FreeRTOS/tasks.c **** 				}
4435:..\FreeRTOS/tasks.c **** 				else
4436:..\FreeRTOS/tasks.c **** 				{
4437:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4438:..\FreeRTOS/tasks.c **** 				}
4439:..\FreeRTOS/tasks.c **** 			}
4440:..\FreeRTOS/tasks.c **** 			else
4441:..\FreeRTOS/tasks.c **** 			{
4442:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4443:..\FreeRTOS/tasks.c **** 			}
4444:..\FreeRTOS/tasks.c **** 		}
4445:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4446:..\FreeRTOS/tasks.c **** 
4447:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4448:..\FreeRTOS/tasks.c **** 		{
4449:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4450:..\FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4451:..\FreeRTOS/tasks.c **** 
4452:..\FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
4453:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 91


4454:..\FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4455:..\FreeRTOS/tasks.c **** 				{
4456:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4457:..\FreeRTOS/tasks.c **** 				}
4458:..\FreeRTOS/tasks.c **** 				else
4459:..\FreeRTOS/tasks.c **** 				{
4460:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4461:..\FreeRTOS/tasks.c **** 				}
4462:..\FreeRTOS/tasks.c **** 			}
4463:..\FreeRTOS/tasks.c **** 			else
4464:..\FreeRTOS/tasks.c **** 			{
4465:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4466:..\FreeRTOS/tasks.c **** 			}
4467:..\FreeRTOS/tasks.c **** 
4468:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4469:..\FreeRTOS/tasks.c **** 		}
4470:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4471:..\FreeRTOS/tasks.c **** 
4472:..\FreeRTOS/tasks.c **** 		return ulReturn;
4473:..\FreeRTOS/tasks.c **** 	}
4474:..\FreeRTOS/tasks.c **** 
4475:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4476:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4477:..\FreeRTOS/tasks.c **** 
4478:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4479:..\FreeRTOS/tasks.c **** 
4480:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4481:..\FreeRTOS/tasks.c **** 	{
4482:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4483:..\FreeRTOS/tasks.c **** 
4484:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4485:..\FreeRTOS/tasks.c **** 		{
4486:..\FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4487:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4488:..\FreeRTOS/tasks.c **** 			{
4489:..\FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4490:..\FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4491:..\FreeRTOS/tasks.c **** 				clear the value to zero. */
4492:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4493:..\FreeRTOS/tasks.c **** 
4494:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4495:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4496:..\FreeRTOS/tasks.c **** 
4497:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4498:..\FreeRTOS/tasks.c **** 				{
4499:..\FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4500:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4501:..\FreeRTOS/tasks.c **** 
4502:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4503:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4504:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4505:..\FreeRTOS/tasks.c **** 					application code should ever do. */
4506:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4507:..\FreeRTOS/tasks.c **** 				}
4508:..\FreeRTOS/tasks.c **** 				else
4509:..\FreeRTOS/tasks.c **** 				{
4510:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 92


4511:..\FreeRTOS/tasks.c **** 				}
4512:..\FreeRTOS/tasks.c **** 			}
4513:..\FreeRTOS/tasks.c **** 			else
4514:..\FreeRTOS/tasks.c **** 			{
4515:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4516:..\FreeRTOS/tasks.c **** 			}
4517:..\FreeRTOS/tasks.c **** 		}
4518:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4519:..\FreeRTOS/tasks.c **** 
4520:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4521:..\FreeRTOS/tasks.c **** 		{
4522:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4523:..\FreeRTOS/tasks.c **** 
4524:..\FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
4525:..\FreeRTOS/tasks.c **** 			{
4526:..\FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4527:..\FreeRTOS/tasks.c **** 				have changed. */
4528:..\FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4529:..\FreeRTOS/tasks.c **** 			}
4530:..\FreeRTOS/tasks.c **** 
4531:..\FreeRTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4532:..\FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4533:..\FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4534:..\FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4535:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4536:..\FreeRTOS/tasks.c **** 			{
4537:..\FreeRTOS/tasks.c **** 				/* A notification was not received. */
4538:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
4539:..\FreeRTOS/tasks.c **** 			}
4540:..\FreeRTOS/tasks.c **** 			else
4541:..\FreeRTOS/tasks.c **** 			{
4542:..\FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4543:..\FreeRTOS/tasks.c **** 				received while the task was waiting. */
4544:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4545:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
4546:..\FreeRTOS/tasks.c **** 			}
4547:..\FreeRTOS/tasks.c **** 
4548:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4549:..\FreeRTOS/tasks.c **** 		}
4550:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4551:..\FreeRTOS/tasks.c **** 
4552:..\FreeRTOS/tasks.c **** 		return xReturn;
4553:..\FreeRTOS/tasks.c **** 	}
4554:..\FreeRTOS/tasks.c **** 
4555:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4556:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4557:..\FreeRTOS/tasks.c **** 
4558:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4559:..\FreeRTOS/tasks.c **** 
4560:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4561:..\FreeRTOS/tasks.c **** 	{
4562:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4563:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4564:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4565:..\FreeRTOS/tasks.c **** 
4566:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4567:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 93


4568:..\FreeRTOS/tasks.c **** 
4569:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4570:..\FreeRTOS/tasks.c **** 		{
4571:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4572:..\FreeRTOS/tasks.c **** 			{
4573:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4574:..\FreeRTOS/tasks.c **** 			}
4575:..\FreeRTOS/tasks.c **** 
4576:..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4577:..\FreeRTOS/tasks.c **** 
4578:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4579:..\FreeRTOS/tasks.c **** 
4580:..\FreeRTOS/tasks.c **** 			switch( eAction )
4581:..\FreeRTOS/tasks.c **** 			{
4582:..\FreeRTOS/tasks.c **** 				case eSetBits	:
4583:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4584:..\FreeRTOS/tasks.c **** 					break;
4585:..\FreeRTOS/tasks.c **** 
4586:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4587:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4588:..\FreeRTOS/tasks.c **** 					break;
4589:..\FreeRTOS/tasks.c **** 
4590:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4591:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4592:..\FreeRTOS/tasks.c **** 					break;
4593:..\FreeRTOS/tasks.c **** 
4594:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4595:..\FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4596:..\FreeRTOS/tasks.c **** 					{
4597:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4598:..\FreeRTOS/tasks.c **** 					}
4599:..\FreeRTOS/tasks.c **** 					else
4600:..\FreeRTOS/tasks.c **** 					{
4601:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4602:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4603:..\FreeRTOS/tasks.c **** 					}
4604:..\FreeRTOS/tasks.c **** 					break;
4605:..\FreeRTOS/tasks.c **** 
4606:..\FreeRTOS/tasks.c **** 				case eNoAction:
4607:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4608:..\FreeRTOS/tasks.c **** 					updated. */
4609:..\FreeRTOS/tasks.c **** 					break;
4610:..\FreeRTOS/tasks.c **** 			}
4611:..\FreeRTOS/tasks.c **** 
4612:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4613:..\FreeRTOS/tasks.c **** 
4614:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4615:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4616:..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4617:..\FreeRTOS/tasks.c **** 			{
4618:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4619:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4620:..\FreeRTOS/tasks.c **** 
4621:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4622:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4623:..\FreeRTOS/tasks.c **** 
4624:..\FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 94


4625:..\FreeRTOS/tasks.c **** 				{
4626:..\FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4627:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4628:..\FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4629:..\FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4630:..\FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4631:..\FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4632:..\FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4633:..\FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4634:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4635:..\FreeRTOS/tasks.c **** 					earliest possible time. */
4636:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4637:..\FreeRTOS/tasks.c **** 				}
4638:..\FreeRTOS/tasks.c **** 				#endif
4639:..\FreeRTOS/tasks.c **** 
4640:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4641:..\FreeRTOS/tasks.c **** 				{
4642:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4643:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4644:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4645:..\FreeRTOS/tasks.c **** 				}
4646:..\FreeRTOS/tasks.c **** 				else
4647:..\FreeRTOS/tasks.c **** 				{
4648:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4649:..\FreeRTOS/tasks.c **** 				}
4650:..\FreeRTOS/tasks.c **** 			}
4651:..\FreeRTOS/tasks.c **** 			else
4652:..\FreeRTOS/tasks.c **** 			{
4653:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4654:..\FreeRTOS/tasks.c **** 			}
4655:..\FreeRTOS/tasks.c **** 		}
4656:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4657:..\FreeRTOS/tasks.c **** 
4658:..\FreeRTOS/tasks.c **** 		return xReturn;
4659:..\FreeRTOS/tasks.c **** 	}
4660:..\FreeRTOS/tasks.c **** 
4661:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4662:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4663:..\FreeRTOS/tasks.c **** 
4664:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4665:..\FreeRTOS/tasks.c **** 
4666:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4667:..\FreeRTOS/tasks.c **** 	{
4668:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4669:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4670:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4671:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4672:..\FreeRTOS/tasks.c **** 
4673:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4674:..\FreeRTOS/tasks.c **** 
4675:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4676:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4677:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4678:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4679:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4680:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4681:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 95


4682:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4683:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4684:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4685:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4686:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4687:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4688:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4689:..\FreeRTOS/tasks.c **** 		provided on the following link:
4690:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4691:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4692:..\FreeRTOS/tasks.c **** 
4693:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4694:..\FreeRTOS/tasks.c **** 
4695:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4696:..\FreeRTOS/tasks.c **** 		{
4697:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4698:..\FreeRTOS/tasks.c **** 			{
4699:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4700:..\FreeRTOS/tasks.c **** 			}
4701:..\FreeRTOS/tasks.c **** 
4702:..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4703:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4704:..\FreeRTOS/tasks.c **** 
4705:..\FreeRTOS/tasks.c **** 			switch( eAction )
4706:..\FreeRTOS/tasks.c **** 			{
4707:..\FreeRTOS/tasks.c **** 				case eSetBits	:
4708:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4709:..\FreeRTOS/tasks.c **** 					break;
4710:..\FreeRTOS/tasks.c **** 
4711:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4712:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4713:..\FreeRTOS/tasks.c **** 					break;
4714:..\FreeRTOS/tasks.c **** 
4715:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4716:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4717:..\FreeRTOS/tasks.c **** 					break;
4718:..\FreeRTOS/tasks.c **** 
4719:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4720:..\FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4721:..\FreeRTOS/tasks.c **** 					{
4722:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4723:..\FreeRTOS/tasks.c **** 					}
4724:..\FreeRTOS/tasks.c **** 					else
4725:..\FreeRTOS/tasks.c **** 					{
4726:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4727:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4728:..\FreeRTOS/tasks.c **** 					}
4729:..\FreeRTOS/tasks.c **** 					break;
4730:..\FreeRTOS/tasks.c **** 
4731:..\FreeRTOS/tasks.c **** 				case eNoAction :
4732:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4733:..\FreeRTOS/tasks.c **** 					updated. */
4734:..\FreeRTOS/tasks.c **** 					break;
4735:..\FreeRTOS/tasks.c **** 			}
4736:..\FreeRTOS/tasks.c **** 
4737:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4738:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 96


4739:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4740:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4741:..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4742:..\FreeRTOS/tasks.c **** 			{
4743:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4744:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4745:..\FreeRTOS/tasks.c **** 
4746:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4747:..\FreeRTOS/tasks.c **** 				{
4748:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4749:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4750:..\FreeRTOS/tasks.c **** 				}
4751:..\FreeRTOS/tasks.c **** 				else
4752:..\FreeRTOS/tasks.c **** 				{
4753:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4754:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4755:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4756:..\FreeRTOS/tasks.c **** 				}
4757:..\FreeRTOS/tasks.c **** 
4758:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4759:..\FreeRTOS/tasks.c **** 				{
4760:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4761:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4762:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4763:..\FreeRTOS/tasks.c **** 					{
4764:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4765:..\FreeRTOS/tasks.c **** 					}
4766:..\FreeRTOS/tasks.c **** 					else
4767:..\FreeRTOS/tasks.c **** 					{
4768:..\FreeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4769:..\FreeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4770:..\FreeRTOS/tasks.c **** 						safe FreeRTOS function. */
4771:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4772:..\FreeRTOS/tasks.c **** 					}
4773:..\FreeRTOS/tasks.c **** 				}
4774:..\FreeRTOS/tasks.c **** 				else
4775:..\FreeRTOS/tasks.c **** 				{
4776:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4777:..\FreeRTOS/tasks.c **** 				}
4778:..\FreeRTOS/tasks.c **** 			}
4779:..\FreeRTOS/tasks.c **** 		}
4780:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4781:..\FreeRTOS/tasks.c **** 
4782:..\FreeRTOS/tasks.c **** 		return xReturn;
4783:..\FreeRTOS/tasks.c **** 	}
4784:..\FreeRTOS/tasks.c **** 
4785:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4786:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4787:..\FreeRTOS/tasks.c **** 
4788:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4789:..\FreeRTOS/tasks.c **** 
4790:..\FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4791:..\FreeRTOS/tasks.c **** 	{
4792:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4793:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4794:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4795:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 97


4796:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4797:..\FreeRTOS/tasks.c **** 
4798:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4799:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4800:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4801:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4802:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4803:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4804:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4805:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4806:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4807:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4808:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4809:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4810:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4811:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4812:..\FreeRTOS/tasks.c **** 		provided on the following link:
4813:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4814:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4815:..\FreeRTOS/tasks.c **** 
4816:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4817:..\FreeRTOS/tasks.c **** 
4818:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4819:..\FreeRTOS/tasks.c **** 		{
4820:..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4821:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4822:..\FreeRTOS/tasks.c **** 
4823:..\FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4824:..\FreeRTOS/tasks.c **** 			semaphore. */
4825:..\FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4826:..\FreeRTOS/tasks.c **** 
4827:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4828:..\FreeRTOS/tasks.c **** 
4829:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4830:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4831:..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4832:..\FreeRTOS/tasks.c **** 			{
4833:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4834:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4835:..\FreeRTOS/tasks.c **** 
4836:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4837:..\FreeRTOS/tasks.c **** 				{
4838:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4839:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4840:..\FreeRTOS/tasks.c **** 				}
4841:..\FreeRTOS/tasks.c **** 				else
4842:..\FreeRTOS/tasks.c **** 				{
4843:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4844:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4845:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4846:..\FreeRTOS/tasks.c **** 				}
4847:..\FreeRTOS/tasks.c **** 
4848:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4849:..\FreeRTOS/tasks.c **** 				{
4850:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4851:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4852:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 98


4853:..\FreeRTOS/tasks.c **** 					{
4854:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4855:..\FreeRTOS/tasks.c **** 					}
4856:..\FreeRTOS/tasks.c **** 					else
4857:..\FreeRTOS/tasks.c **** 					{
4858:..\FreeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4859:..\FreeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4860:..\FreeRTOS/tasks.c **** 						safe FreeRTOS function. */
4861:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4862:..\FreeRTOS/tasks.c **** 					}
4863:..\FreeRTOS/tasks.c **** 				}
4864:..\FreeRTOS/tasks.c **** 				else
4865:..\FreeRTOS/tasks.c **** 				{
4866:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4867:..\FreeRTOS/tasks.c **** 				}
4868:..\FreeRTOS/tasks.c **** 			}
4869:..\FreeRTOS/tasks.c **** 		}
4870:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4871:..\FreeRTOS/tasks.c **** 	}
4872:..\FreeRTOS/tasks.c **** 
4873:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4874:..\FreeRTOS/tasks.c **** 
4875:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4876:..\FreeRTOS/tasks.c **** 
4877:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4878:..\FreeRTOS/tasks.c **** 
4879:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4880:..\FreeRTOS/tasks.c **** 	{
4881:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
4882:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4883:..\FreeRTOS/tasks.c **** 
4884:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4885:..\FreeRTOS/tasks.c **** 		its notification state cleared. */
4886:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4887:..\FreeRTOS/tasks.c **** 
4888:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4889:..\FreeRTOS/tasks.c **** 		{
4890:..\FreeRTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4891:..\FreeRTOS/tasks.c **** 			{
4892:..\FreeRTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4893:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
4894:..\FreeRTOS/tasks.c **** 			}
4895:..\FreeRTOS/tasks.c **** 			else
4896:..\FreeRTOS/tasks.c **** 			{
4897:..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
4898:..\FreeRTOS/tasks.c **** 			}
4899:..\FreeRTOS/tasks.c **** 		}
4900:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4901:..\FreeRTOS/tasks.c **** 
4902:..\FreeRTOS/tasks.c **** 		return xReturn;
4903:..\FreeRTOS/tasks.c **** 	}
4904:..\FreeRTOS/tasks.c **** 
4905:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4906:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4907:..\FreeRTOS/tasks.c **** 
4908:..\FreeRTOS/tasks.c **** 
4909:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 99


4910:..\FreeRTOS/tasks.c **** {
 607              		.loc 1 4910 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              	.LVL60:
 612 0000 70B5     		push	{r4, r5, r6, lr}
 613              		.cfi_def_cfa_offset 16
 614              		.cfi_offset 4, -16
 615              		.cfi_offset 5, -12
 616              		.cfi_offset 6, -8
 617              		.cfi_offset 14, -4
 618 0002 0446     		mov	r4, r0
 619 0004 0E46     		mov	r6, r1
4911:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
4912:..\FreeRTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 620              		.loc 1 4912 0
 621 0006 1E4B     		ldr	r3, .L60
 622 0008 D3F8EC50 		ldr	r5, [r3, #236]
 623              	.LVL61:
4913:..\FreeRTOS/tasks.c **** 
4914:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4915:..\FreeRTOS/tasks.c **** 	{
4916:..\FreeRTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4917:..\FreeRTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4918:..\FreeRTOS/tasks.c **** 		when the task leaves the Blocked state. */
4919:..\FreeRTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4920:..\FreeRTOS/tasks.c **** 	}
4921:..\FreeRTOS/tasks.c **** 	#endif
4922:..\FreeRTOS/tasks.c **** 
4923:..\FreeRTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4924:..\FreeRTOS/tasks.c **** 	as the same list item is used for both lists. */
4925:..\FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 624              		.loc 1 4925 0
 625 000c D3F8D800 		ldr	r0, [r3, #216]
 626              	.LVL62:
 627 0010 0430     		adds	r0, r0, #4
 628 0012 FFF7FEFF 		bl	uxListRemove
 629              	.LVL63:
 630 0016 60B9     		cbnz	r0, .L55
4926:..\FreeRTOS/tasks.c **** 	{
4927:..\FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4928:..\FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
4929:..\FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 631              		.loc 1 4929 0
 632 0018 194B     		ldr	r3, .L60
 633 001a D3F8D820 		ldr	r2, [r3, #216]
 634 001e D16A     		ldr	r1, [r2, #44]
 635 0020 0122     		movs	r2, #1
 636 0022 02FA01F1 		lsl	r1, r2, r1
 637 0026 D3F8E420 		ldr	r2, [r3, #228]
 638 002a 22EA0102 		bic	r2, r2, r1
 639 002e C3F8E420 		str	r2, [r3, #228]
 640              	.L55:
4930:..\FreeRTOS/tasks.c **** 	}
4931:..\FreeRTOS/tasks.c **** 	else
4932:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 100


4933:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4934:..\FreeRTOS/tasks.c **** 	}
4935:..\FreeRTOS/tasks.c **** 
4936:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4937:..\FreeRTOS/tasks.c **** 	{
4938:..\FreeRTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 641              		.loc 1 4938 0
 642 0032 B4F1FF3F 		cmp	r4, #-1
 643 0036 07D1     		bne	.L56
 644              		.loc 1 4938 0 is_stmt 0 discriminator 1
 645 0038 36B1     		cbz	r6, .L56
4939:..\FreeRTOS/tasks.c **** 		{
4940:..\FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4941:..\FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4942:..\FreeRTOS/tasks.c **** 			indefinitely. */
4943:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 646              		.loc 1 4943 0 is_stmt 1
 647 003a 1148     		ldr	r0, .L60
 648 003c D0F8D810 		ldr	r1, [r0, #216]
 649 0040 0431     		adds	r1, r1, #4
 650 0042 FFF7FEFF 		bl	vListInsertEnd
 651              	.LVL64:
 652 0046 70BD     		pop	{r4, r5, r6, pc}
 653              	.LVL65:
 654              	.L56:
4944:..\FreeRTOS/tasks.c **** 		}
4945:..\FreeRTOS/tasks.c **** 		else
4946:..\FreeRTOS/tasks.c **** 		{
4947:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4948:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4949:..\FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
4950:..\FreeRTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 655              		.loc 1 4950 0
 656 0048 2C44     		add	r4, r4, r5
 657              	.LVL66:
4951:..\FreeRTOS/tasks.c **** 
4952:..\FreeRTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
4953:..\FreeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 658              		.loc 1 4953 0
 659 004a 0D4B     		ldr	r3, .L60
 660 004c D3F8D830 		ldr	r3, [r3, #216]
 661 0050 5C60     		str	r4, [r3, #4]
4954:..\FreeRTOS/tasks.c **** 
4955:..\FreeRTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 662              		.loc 1 4955 0
 663 0052 A542     		cmp	r5, r4
 664 0054 08D9     		bls	.L58
4956:..\FreeRTOS/tasks.c **** 			{
4957:..\FreeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4958:..\FreeRTOS/tasks.c **** 				list. */
4959:..\FreeRTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 665              		.loc 1 4959 0
 666 0056 0A4B     		ldr	r3, .L60
 667 0058 D3F8D000 		ldr	r0, [r3, #208]
 668 005c D3F8D810 		ldr	r1, [r3, #216]
 669 0060 0431     		adds	r1, r1, #4
 670 0062 FFF7FEFF 		bl	vListInsert
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 101


 671              	.LVL67:
 672 0066 70BD     		pop	{r4, r5, r6, pc}
 673              	.LVL68:
 674              	.L58:
4960:..\FreeRTOS/tasks.c **** 			}
4961:..\FreeRTOS/tasks.c **** 			else
4962:..\FreeRTOS/tasks.c **** 			{
4963:..\FreeRTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4964:..\FreeRTOS/tasks.c **** 				is used. */
4965:..\FreeRTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 675              		.loc 1 4965 0
 676 0068 054D     		ldr	r5, .L60
 677              	.LVL69:
 678 006a A86A     		ldr	r0, [r5, #40]
 679 006c D5F8D810 		ldr	r1, [r5, #216]
 680 0070 0431     		adds	r1, r1, #4
 681 0072 FFF7FEFF 		bl	vListInsert
 682              	.LVL70:
4966:..\FreeRTOS/tasks.c **** 
4967:..\FreeRTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
4968:..\FreeRTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4969:..\FreeRTOS/tasks.c **** 				needs to be updated too. */
4970:..\FreeRTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 683              		.loc 1 4970 0
 684 0076 EB6A     		ldr	r3, [r5, #44]
 685 0078 9C42     		cmp	r4, r3
 686 007a 00D2     		bcs	.L54
4971:..\FreeRTOS/tasks.c **** 				{
4972:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 687              		.loc 1 4972 0
 688 007c EC62     		str	r4, [r5, #44]
 689              	.L54:
 690 007e 70BD     		pop	{r4, r5, r6, pc}
 691              	.LVL71:
 692              	.L61:
 693              		.align	2
 694              	.L60:
 695 0080 00000000 		.word	.LANCHOR0
 696              		.cfi_endproc
 697              	.LFE120:
 698              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 699              		.section	.text.xTaskCreate,"ax",%progbits
 700              		.align	2
 701              		.global	xTaskCreate
 702              		.thumb
 703              		.thumb_func
 704              		.type	xTaskCreate, %function
 705              	xTaskCreate:
 706              	.LFB69:
 738:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 707              		.loc 1 738 0
 708              		.cfi_startproc
 709              		@ args = 8, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              	.LVL72:
 712 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 713              		.cfi_def_cfa_offset 28
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 102


 714              		.cfi_offset 4, -28
 715              		.cfi_offset 5, -24
 716              		.cfi_offset 6, -20
 717              		.cfi_offset 7, -16
 718              		.cfi_offset 8, -12
 719              		.cfi_offset 9, -8
 720              		.cfi_offset 14, -4
 721 0004 85B0     		sub	sp, sp, #20
 722              		.cfi_def_cfa_offset 48
 723 0006 0646     		mov	r6, r0
 724 0008 0F46     		mov	r7, r1
 725 000a 1546     		mov	r5, r2
 726 000c 9846     		mov	r8, r3
 727              	.LBB27:
 772:..\FreeRTOS/tasks.c **** 
 728              		.loc 1 772 0
 729 000e 9000     		lsls	r0, r2, #2
 730              	.LVL73:
 731 0010 FFF7FEFF 		bl	pvPortMalloc
 732              	.LVL74:
 774:..\FreeRTOS/tasks.c **** 			{
 733              		.loc 1 774 0
 734 0014 60B1     		cbz	r0, .L66
 735 0016 8146     		mov	r9, r0
 777:..\FreeRTOS/tasks.c **** 
 736              		.loc 1 777 0
 737 0018 5020     		movs	r0, #80
 738              	.LVL75:
 739 001a FFF7FEFF 		bl	pvPortMalloc
 740              	.LVL76:
 779:..\FreeRTOS/tasks.c **** 				{
 741              		.loc 1 779 0
 742 001e 0446     		mov	r4, r0
 743 0020 10B1     		cbz	r0, .L64
 782:..\FreeRTOS/tasks.c **** 				}
 744              		.loc 1 782 0
 745 0022 C0F83090 		str	r9, [r0, #48]
 746 0026 04E0     		b	.L63
 747              	.L64:
 788:..\FreeRTOS/tasks.c **** 				}
 748              		.loc 1 788 0
 749 0028 4846     		mov	r0, r9
 750              	.LVL77:
 751 002a FFF7FEFF 		bl	vPortFree
 752              	.LVL78:
 753 002e 00E0     		b	.L63
 754              	.LVL79:
 755              	.L66:
 793:..\FreeRTOS/tasks.c **** 			}
 756              		.loc 1 793 0
 757 0030 0024     		movs	r4, #0
 758              	.LVL80:
 759              	.L63:
 760              	.LBE27:
 798:..\FreeRTOS/tasks.c **** 		{
 761              		.loc 1 798 0
 762 0032 8CB1     		cbz	r4, .L67
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 103


 808:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 763              		.loc 1 808 0
 764 0034 0023     		movs	r3, #0
 765 0036 0393     		str	r3, [sp, #12]
 766 0038 0294     		str	r4, [sp, #8]
 767 003a 0D9B     		ldr	r3, [sp, #52]
 768 003c 0193     		str	r3, [sp, #4]
 769 003e 0C9B     		ldr	r3, [sp, #48]
 770 0040 0093     		str	r3, [sp]
 771 0042 4346     		mov	r3, r8
 772 0044 2A46     		mov	r2, r5
 773 0046 3946     		mov	r1, r7
 774 0048 3046     		mov	r0, r6
 775 004a FFF7FEFF 		bl	prvInitialiseNewTask
 776              	.LVL81:
 809:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 777              		.loc 1 809 0
 778 004e 2046     		mov	r0, r4
 779 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 780              	.LVL82:
 810:..\FreeRTOS/tasks.c **** 		}
 781              		.loc 1 810 0
 782 0054 0120     		movs	r0, #1
 783 0056 01E0     		b	.L65
 784              	.LVL83:
 785              	.L67:
 814:..\FreeRTOS/tasks.c **** 		}
 786              		.loc 1 814 0
 787 0058 4FF0FF30 		mov	r0, #-1
 788              	.L65:
 789              	.LVL84:
 818:..\FreeRTOS/tasks.c **** 
 790              		.loc 1 818 0
 791 005c 05B0     		add	sp, sp, #20
 792              		.cfi_def_cfa_offset 28
 793              		@ sp needed
 794 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 795              		.cfi_endproc
 796              	.LFE69:
 797              		.size	xTaskCreate, .-xTaskCreate
 798 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 799              		.align	2
 800              		.global	vTaskDelete
 801              		.thumb
 802              		.thumb_func
 803              		.type	vTaskDelete, %function
 804              	vTaskDelete:
 805              	.LFB72:
1113:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 806              		.loc 1 1113 0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810              	.LVL85:
 811 0000 70B5     		push	{r4, r5, r6, lr}
 812              		.cfi_def_cfa_offset 16
 813              		.cfi_offset 4, -16
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 104


 814              		.cfi_offset 5, -12
 815              		.cfi_offset 6, -8
 816              		.cfi_offset 14, -4
 817 0002 0446     		mov	r4, r0
1116:..\FreeRTOS/tasks.c **** 		{
 818              		.loc 1 1116 0
 819 0004 FFF7FEFF 		bl	vPortEnterCritical
 820              	.LVL86:
1120:..\FreeRTOS/tasks.c **** 
 821              		.loc 1 1120 0
 822 0008 14B9     		cbnz	r4, .L70
1120:..\FreeRTOS/tasks.c **** 
 823              		.loc 1 1120 0 is_stmt 0 discriminator 1
 824 000a 2A4B     		ldr	r3, .L77
 825 000c D3F8D840 		ldr	r4, [r3, #216]
 826              	.LVL87:
 827              	.L70:
1123:..\FreeRTOS/tasks.c **** 			{
 828              		.loc 1 1123 0 is_stmt 1 discriminator 4
 829 0010 251D     		adds	r5, r4, #4
 830 0012 2846     		mov	r0, r5
 831 0014 FFF7FEFF 		bl	uxListRemove
 832              	.LVL88:
 833 0018 80B9     		cbnz	r0, .L71
1125:..\FreeRTOS/tasks.c **** 			}
 834              		.loc 1 1125 0
 835 001a E26A     		ldr	r2, [r4, #44]
 836 001c 02EB8201 		add	r1, r2, r2, lsl #2
 837 0020 8B00     		lsls	r3, r1, #2
 838 0022 2449     		ldr	r1, .L77
 839 0024 0B44     		add	r3, r3, r1
 840 0026 1B6B     		ldr	r3, [r3, #48]
 841 0028 43B9     		cbnz	r3, .L71
1125:..\FreeRTOS/tasks.c **** 			}
 842              		.loc 1 1125 0 is_stmt 0 discriminator 1
 843 002a 0123     		movs	r3, #1
 844 002c 03FA02F2 		lsl	r2, r3, r2
 845 0030 D1F8E430 		ldr	r3, [r1, #228]
 846 0034 23EA0202 		bic	r2, r3, r2
 847 0038 C1F8E420 		str	r2, [r1, #228]
 848              	.L71:
1133:..\FreeRTOS/tasks.c **** 			{
 849              		.loc 1 1133 0 is_stmt 1
 850 003c A36A     		ldr	r3, [r4, #40]
 851 003e 1BB1     		cbz	r3, .L72
1135:..\FreeRTOS/tasks.c **** 			}
 852              		.loc 1 1135 0
 853 0040 04F11800 		add	r0, r4, #24
 854 0044 FFF7FEFF 		bl	uxListRemove
 855              	.LVL89:
 856              	.L72:
1146:..\FreeRTOS/tasks.c **** 
 857              		.loc 1 1146 0
 858 0048 1A4B     		ldr	r3, .L77
 859 004a D3F8E020 		ldr	r2, [r3, #224]
 860 004e 0132     		adds	r2, r2, #1
 861 0050 C3F8E020 		str	r2, [r3, #224]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 105


1148:..\FreeRTOS/tasks.c **** 			{
 862              		.loc 1 1148 0
 863 0054 D3F8D830 		ldr	r3, [r3, #216]
 864 0058 9C42     		cmp	r4, r3
 865 005a 0BD1     		bne	.L73
1155:..\FreeRTOS/tasks.c **** 
 866              		.loc 1 1155 0
 867 005c 154E     		ldr	r6, .L77
 868 005e 2946     		mov	r1, r5
 869 0060 06F1BC00 		add	r0, r6, #188
 870 0064 FFF7FEFF 		bl	vListInsertEnd
 871              	.LVL90:
1160:..\FreeRTOS/tasks.c **** 
 872              		.loc 1 1160 0
 873 0068 D6F8E830 		ldr	r3, [r6, #232]
 874 006c 0133     		adds	r3, r3, #1
 875 006e C6F8E830 		str	r3, [r6, #232]
 876 0072 0AE0     		b	.L74
 877              	.L73:
1171:..\FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 878              		.loc 1 1171 0
 879 0074 0F4A     		ldr	r2, .L77
 880 0076 D2F8D430 		ldr	r3, [r2, #212]
 881 007a 013B     		subs	r3, r3, #1
 882 007c C2F8D430 		str	r3, [r2, #212]
1172:..\FreeRTOS/tasks.c **** 
 883              		.loc 1 1172 0
 884 0080 2046     		mov	r0, r4
 885 0082 FFF7FEFF 		bl	prvDeleteTCB
 886              	.LVL91:
1176:..\FreeRTOS/tasks.c **** 			}
 887              		.loc 1 1176 0
 888 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 889              	.LVL92:
 890              	.L74:
1181:..\FreeRTOS/tasks.c **** 
 891              		.loc 1 1181 0
 892 008a FFF7FEFF 		bl	vPortExitCritical
 893              	.LVL93:
1185:..\FreeRTOS/tasks.c **** 		{
 894              		.loc 1 1185 0
 895 008e 094B     		ldr	r3, .L77
 896 0090 D3F8DC30 		ldr	r3, [r3, #220]
 897 0094 63B1     		cbz	r3, .L69
1187:..\FreeRTOS/tasks.c **** 			{
 898              		.loc 1 1187 0
 899 0096 074B     		ldr	r3, .L77
 900 0098 D3F8D830 		ldr	r3, [r3, #216]
 901 009c 9C42     		cmp	r4, r3
 902 009e 07D1     		bne	.L69
1190:..\FreeRTOS/tasks.c **** 			}
 903              		.loc 1 1190 0
 904 00a0 4FF08052 		mov	r2, #268435456
 905 00a4 044B     		ldr	r3, .L77+4
 906 00a6 1A60     		str	r2, [r3]
 907              		.syntax unified
 908              	@ 1190 "..\FreeRTOS\tasks.c" 1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 106


 909 00a8 BFF34F8F 		dsb
 910              	@ 0 "" 2
 911              	@ 1190 "..\FreeRTOS\tasks.c" 1
 912 00ac BFF36F8F 		isb
 913              	@ 0 "" 2
 914              		.thumb
 915              		.syntax unified
 916              	.L69:
 917 00b0 70BD     		pop	{r4, r5, r6, pc}
 918              	.LVL94:
 919              	.L78:
 920 00b2 00BF     		.align	2
 921              	.L77:
 922 00b4 00000000 		.word	.LANCHOR0
 923 00b8 04ED00E0 		.word	-536810236
 924              		.cfi_endproc
 925              	.LFE72:
 926              		.size	vTaskDelete, .-vTaskDelete
 927              		.section	.text.eTaskGetState,"ax",%progbits
 928              		.align	2
 929              		.global	eTaskGetState
 930              		.thumb
 931              		.thumb_func
 932              		.type	eTaskGetState, %function
 933              	eTaskGetState:
 934              	.LFB75:
1334:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
 935              		.loc 1 1334 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              	.LVL95:
 940 0000 38B5     		push	{r3, r4, r5, lr}
 941              		.cfi_def_cfa_offset 16
 942              		.cfi_offset 3, -16
 943              		.cfi_offset 4, -12
 944              		.cfi_offset 5, -8
 945              		.cfi_offset 14, -4
 946              	.LVL96:
1341:..\FreeRTOS/tasks.c **** 		{
 947              		.loc 1 1341 0
 948 0002 164B     		ldr	r3, .L89
 949 0004 D3F8D830 		ldr	r3, [r3, #216]
 950 0008 9842     		cmp	r0, r3
 951 000a 1BD0     		beq	.L82
 952 000c 0446     		mov	r4, r0
1348:..\FreeRTOS/tasks.c **** 			{
 953              		.loc 1 1348 0
 954 000e FFF7FEFF 		bl	vPortEnterCritical
 955              	.LVL97:
1350:..\FreeRTOS/tasks.c **** 			}
 956              		.loc 1 1350 0
 957 0012 6569     		ldr	r5, [r4, #20]
 958              	.LVL98:
1352:..\FreeRTOS/tasks.c **** 
 959              		.loc 1 1352 0
 960 0014 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 107


 961              	.LVL99:
1354:..\FreeRTOS/tasks.c **** 			{
 962              		.loc 1 1354 0
 963 0018 104B     		ldr	r3, .L89
 964 001a 9B6A     		ldr	r3, [r3, #40]
 965 001c 9D42     		cmp	r5, r3
 966 001e 13D0     		beq	.L83
1354:..\FreeRTOS/tasks.c **** 			{
 967              		.loc 1 1354 0 is_stmt 0 discriminator 1
 968 0020 0E4B     		ldr	r3, .L89
 969 0022 D3F8D030 		ldr	r3, [r3, #208]
 970 0026 9D42     		cmp	r5, r3
 971 0028 10D0     		beq	.L84
1362:..\FreeRTOS/tasks.c **** 				{
 972              		.loc 1 1362 0 is_stmt 1
 973 002a 0C4B     		ldr	r3, .L89
 974 002c 9D42     		cmp	r5, r3
 975 002e 03D1     		bne	.L81
1367:..\FreeRTOS/tasks.c **** 					{
 976              		.loc 1 1367 0
 977 0030 A36A     		ldr	r3, [r4, #40]
 978 0032 6BB9     		cbnz	r3, .L85
1369:..\FreeRTOS/tasks.c **** 					}
 979              		.loc 1 1369 0
 980 0034 0320     		movs	r0, #3
 981 0036 38BD     		pop	{r3, r4, r5, pc}
 982              	.LVL100:
 983              	.L81:
1379:..\FreeRTOS/tasks.c **** 				{
 984              		.loc 1 1379 0
 985 0038 094B     		ldr	r3, .L89+4
 986 003a 9D42     		cmp	r5, r3
 987 003c 0AD0     		beq	.L86
1379:..\FreeRTOS/tasks.c **** 				{
 988              		.loc 1 1379 0 is_stmt 0 discriminator 1
 989 003e 5DB9     		cbnz	r5, .L87
1384:..\FreeRTOS/tasks.c **** 				}
 990              		.loc 1 1384 0 is_stmt 1
 991 0040 0420     		movs	r0, #4
 992 0042 38BD     		pop	{r3, r4, r5, pc}
 993              	.LVL101:
 994              	.L82:
1344:..\FreeRTOS/tasks.c **** 		}
 995              		.loc 1 1344 0
 996 0044 0020     		movs	r0, #0
 997              	.LVL102:
 998 0046 38BD     		pop	{r3, r4, r5, pc}
 999              	.LVL103:
 1000              	.L83:
1358:..\FreeRTOS/tasks.c **** 			}
 1001              		.loc 1 1358 0
 1002 0048 0220     		movs	r0, #2
 1003 004a 38BD     		pop	{r3, r4, r5, pc}
 1004              	.LVL104:
 1005              	.L84:
 1006 004c 0220     		movs	r0, #2
 1007 004e 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 108


 1008              	.LVL105:
 1009              	.L85:
1373:..\FreeRTOS/tasks.c **** 					}
 1010              		.loc 1 1373 0
 1011 0050 0220     		movs	r0, #2
 1012 0052 38BD     		pop	{r3, r4, r5, pc}
 1013              	.LVL106:
 1014              	.L86:
1384:..\FreeRTOS/tasks.c **** 				}
 1015              		.loc 1 1384 0
 1016 0054 0420     		movs	r0, #4
 1017 0056 38BD     		pop	{r3, r4, r5, pc}
 1018              	.LVL107:
 1019              	.L87:
1392:..\FreeRTOS/tasks.c **** 			}
 1020              		.loc 1 1392 0
 1021 0058 0120     		movs	r0, #1
 1022              	.LVL108:
1397:..\FreeRTOS/tasks.c **** 
 1023              		.loc 1 1397 0
 1024 005a 38BD     		pop	{r3, r4, r5, pc}
 1025              	.LVL109:
 1026              	.L90:
 1027              		.align	2
 1028              	.L89:
 1029 005c 00000000 		.word	.LANCHOR0
 1030 0060 BC000000 		.word	.LANCHOR0+188
 1031              		.cfi_endproc
 1032              	.LFE75:
 1033              		.size	eTaskGetState, .-eTaskGetState
 1034              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1035              		.align	2
 1036              		.global	uxTaskPriorityGet
 1037              		.thumb
 1038              		.thumb_func
 1039              		.type	uxTaskPriorityGet, %function
 1040              	uxTaskPriorityGet:
 1041              	.LFB76:
1405:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1042              		.loc 1 1405 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 0
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 1046              	.LVL110:
 1047 0000 10B5     		push	{r4, lr}
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 4, -8
 1050              		.cfi_offset 14, -4
 1051 0002 0446     		mov	r4, r0
1409:..\FreeRTOS/tasks.c **** 		{
 1052              		.loc 1 1409 0
 1053 0004 FFF7FEFF 		bl	vPortEnterCritical
 1054              	.LVL111:
1413:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1055              		.loc 1 1413 0
 1056 0008 14B9     		cbnz	r4, .L92
1413:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 109


 1057              		.loc 1 1413 0 is_stmt 0 discriminator 1
 1058 000a 044B     		ldr	r3, .L94
 1059 000c D3F8D840 		ldr	r4, [r3, #216]
 1060              	.LVL112:
 1061              	.L92:
1414:..\FreeRTOS/tasks.c **** 		}
 1062              		.loc 1 1414 0 is_stmt 1 discriminator 4
 1063 0010 E46A     		ldr	r4, [r4, #44]
 1064              	.LVL113:
1416:..\FreeRTOS/tasks.c **** 
 1065              		.loc 1 1416 0 discriminator 4
 1066 0012 FFF7FEFF 		bl	vPortExitCritical
 1067              	.LVL114:
1419:..\FreeRTOS/tasks.c **** 
 1068              		.loc 1 1419 0 discriminator 4
 1069 0016 2046     		mov	r0, r4
 1070 0018 10BD     		pop	{r4, pc}
 1071              	.LVL115:
 1072              	.L95:
 1073 001a 00BF     		.align	2
 1074              	.L94:
 1075 001c 00000000 		.word	.LANCHOR0
 1076              		.cfi_endproc
 1077              	.LFE76:
 1078              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1079              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1080              		.align	2
 1081              		.global	uxTaskPriorityGetFromISR
 1082              		.thumb
 1083              		.thumb_func
 1084              		.type	uxTaskPriorityGetFromISR, %function
 1085              	uxTaskPriorityGetFromISR:
 1086              	.LFB77:
1427:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1087              		.loc 1 1427 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 0
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              		@ link register save eliminated.
 1092              	.LVL116:
 1093              	.LBB28:
 1094              	.LBB29:
 1095              		.file 2 "..\\FreeRTOS\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.0
   3:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 110


  15:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  16:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  23:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  24:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  25:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  26:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  27:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  28:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #include <stdio.h>
  29:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #include <stdlib.h>
  30:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #include <stdint.h>
  31:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #include <stdbool.h>
  32:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #include "projdefs.h"
  33:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  34:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  35:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  36:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  37:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  38:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  39:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  40:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
  41:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  42:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  43:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  44:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  45:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  46:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  47:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  48:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  49:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  50:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  51:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  52:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  53:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** // Added by Airs
  54:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portALIGNMENT_ASSERT_pxCurrentTCB ( void )
  55:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  56:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  57:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  58:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  59:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  60:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  61:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  62:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  63:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  64:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  65:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  67:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  68:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  69:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  70:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  71:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 111


  72:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  73:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #else
  74:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  75:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  76:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  77:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  78:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  79:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  80:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
  81:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  82:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  83:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  84:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  85:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  86:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  87:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  88:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  89:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  90:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  91:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  92:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  93:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  94:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  95:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  96:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  97:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  98:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  99:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 100:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 101:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 102:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 103:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 104:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 105:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 106:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 107:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
 108:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 109:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 110:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 111:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 112:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 113:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 114:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 115:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 116:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 117:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 118:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 119:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 120:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 121:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 122:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 123:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 124:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 125:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 126:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 127:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 128:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 112


 129:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 130:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 131:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 132:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 133:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 134:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 135:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 136:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 137:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 139:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 140:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 141:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 142:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 143:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 144:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 145:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 146:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 147:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 148:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 150:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 151:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 152:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 153:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 154:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 155:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 156:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 157:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 158:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 159:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 161:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 162:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 163:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 164:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 165:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 166:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 167:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 168:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 169:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 170:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 171:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 172:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 173:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 175:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 177:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 178:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 179:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 180:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 181:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 182:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 183:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 184:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 185:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 113


 186:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 187:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 188:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 189:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 190:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 191:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 192:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	else
 193:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 194:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 195:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 196:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 197:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 198:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 199:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 200:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 201:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 202:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 203:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 204:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 205:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 206:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 207:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 208:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 209:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 210:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 211:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 212:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 213:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 214:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 215:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 216:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 217:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 218:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 219:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 220:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 221:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 222:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1096              		.loc 2 222 0
 1097              		.syntax unified
 1098              	@ 222 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1099 0000 EFF31183 			mrs r3, basepri											
 1100 0004 4FF0A002 		mov r2, #160												
 1101 0008 82F31188 		msr basepri, r2											
 1102 000c BFF36F8F 		isb														
 1103 0010 BFF34F8F 		dsb														
 1104              	
 1105              	@ 0 "" 2
 1106              		.thumb
 1107              		.syntax unified
 1108              	.LBE29:
 1109              	.LBE28:
1453:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1110              		.loc 1 1453 0
 1111 0014 10B9     		cbnz	r0, .L97
1453:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1112              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1113 0016 034A     		ldr	r2, .L98
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 114


 1114 0018 D2F8D800 		ldr	r0, [r2, #216]
 1115              	.LVL117:
 1116              	.L97:
1454:..\FreeRTOS/tasks.c **** 		}
 1117              		.loc 1 1454 0 is_stmt 1 discriminator 4
 1118 001c C06A     		ldr	r0, [r0, #44]
 1119              	.LVL118:
 1120              	.LBB30:
 1121              	.LBB31:
 223:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 224:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 225:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 226:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 227:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 228:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 229:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 230:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 231:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 232:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 233:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 234:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 235:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 236:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 237:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 238:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 239:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 240:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1122              		.loc 2 240 0 discriminator 4
 1123              		.syntax unified
 1124              	@ 240 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1125 001e 83F31188 			msr basepri, r3	
 1126              	@ 0 "" 2
 1127              	.LVL119:
 1128              		.thumb
 1129              		.syntax unified
 1130              	.LBE31:
 1131              	.LBE30:
1459:..\FreeRTOS/tasks.c **** 
 1132              		.loc 1 1459 0 discriminator 4
 1133 0022 7047     		bx	lr
 1134              	.L99:
 1135              		.align	2
 1136              	.L98:
 1137 0024 00000000 		.word	.LANCHOR0
 1138              		.cfi_endproc
 1139              	.LFE77:
 1140              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1141              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1142              		.align	2
 1143              		.global	vTaskPrioritySet
 1144              		.thumb
 1145              		.thumb_func
 1146              		.type	vTaskPrioritySet, %function
 1147              	vTaskPrioritySet:
 1148              	.LFB78:
1467:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1149              		.loc 1 1467 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 115


 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 0
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
 1153              	.LVL120:
 1154 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1155              		.cfi_def_cfa_offset 24
 1156              		.cfi_offset 3, -24
 1157              		.cfi_offset 4, -20
 1158              		.cfi_offset 5, -16
 1159              		.cfi_offset 6, -12
 1160              		.cfi_offset 7, -8
 1161              		.cfi_offset 14, -4
 1162 0002 0446     		mov	r4, r0
 1163 0004 0D46     		mov	r5, r1
 1164              	.LVL121:
1475:..\FreeRTOS/tasks.c **** 		{
 1165              		.loc 1 1475 0
 1166 0006 0429     		cmp	r1, #4
 1167 0008 00D9     		bls	.L101
1477:..\FreeRTOS/tasks.c **** 		}
 1168              		.loc 1 1477 0
 1169 000a 0425     		movs	r5, #4
 1170              	.L101:
 1171              	.LVL122:
1484:..\FreeRTOS/tasks.c **** 		{
 1172              		.loc 1 1484 0
 1173 000c FFF7FEFF 		bl	vPortEnterCritical
 1174              	.LVL123:
1488:..\FreeRTOS/tasks.c **** 
 1175              		.loc 1 1488 0
 1176 0010 14B9     		cbnz	r4, .L102
1488:..\FreeRTOS/tasks.c **** 
 1177              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1178 0012 324B     		ldr	r3, .L117
 1179 0014 D3F8D840 		ldr	r4, [r3, #216]
 1180              	.LVL124:
 1181              	.L102:
1494:..\FreeRTOS/tasks.c **** 			}
 1182              		.loc 1 1494 0 is_stmt 1 discriminator 4
 1183 0018 236C     		ldr	r3, [r4, #64]
 1184              	.LVL125:
1502:..\FreeRTOS/tasks.c **** 			{
 1185              		.loc 1 1502 0 discriminator 4
 1186 001a 9D42     		cmp	r5, r3
 1187 001c 5AD0     		beq	.L103
1506:..\FreeRTOS/tasks.c **** 				{
 1188              		.loc 1 1506 0
 1189 001e 0CD9     		bls	.L104
1508:..\FreeRTOS/tasks.c **** 					{
 1190              		.loc 1 1508 0
 1191 0020 2E4A     		ldr	r2, .L117
 1192 0022 D2F8D820 		ldr	r2, [r2, #216]
 1193 0026 9442     		cmp	r4, r2
 1194 0028 0ED0     		beq	.L112
1513:..\FreeRTOS/tasks.c **** 						{
 1195              		.loc 1 1513 0
 1196 002a 2C4A     		ldr	r2, .L117
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 116


 1197 002c D2F8D820 		ldr	r2, [r2, #216]
 1198 0030 D26A     		ldr	r2, [r2, #44]
 1199 0032 9542     		cmp	r5, r2
 1200 0034 0AD2     		bcs	.L113
1470:..\FreeRTOS/tasks.c **** 
 1201              		.loc 1 1470 0
 1202 0036 0027     		movs	r7, #0
 1203 0038 0BE0     		b	.L105
 1204              	.L104:
1529:..\FreeRTOS/tasks.c **** 				{
 1205              		.loc 1 1529 0
 1206 003a 284A     		ldr	r2, .L117
 1207 003c D2F8D820 		ldr	r2, [r2, #216]
 1208 0040 9442     		cmp	r4, r2
 1209 0042 05D0     		beq	.L114
1470:..\FreeRTOS/tasks.c **** 
 1210              		.loc 1 1470 0
 1211 0044 0027     		movs	r7, #0
 1212 0046 04E0     		b	.L105
 1213              	.L112:
 1214 0048 0027     		movs	r7, #0
 1215 004a 02E0     		b	.L105
 1216              	.L113:
1515:..\FreeRTOS/tasks.c **** 						}
 1217              		.loc 1 1515 0
 1218 004c 0127     		movs	r7, #1
 1219 004e 00E0     		b	.L105
 1220              	.L114:
1534:..\FreeRTOS/tasks.c **** 				}
 1221              		.loc 1 1534 0
 1222 0050 0127     		movs	r7, #1
 1223              	.L105:
 1224              	.LVL126:
1546:..\FreeRTOS/tasks.c **** 
 1225              		.loc 1 1546 0
 1226 0052 E66A     		ldr	r6, [r4, #44]
 1227              	.LVL127:
1552:..\FreeRTOS/tasks.c **** 					{
 1228              		.loc 1 1552 0
 1229 0054 B342     		cmp	r3, r6
 1230 0056 00D1     		bne	.L106
1554:..\FreeRTOS/tasks.c **** 					}
 1231              		.loc 1 1554 0
 1232 0058 E562     		str	r5, [r4, #44]
 1233              	.L106:
1562:..\FreeRTOS/tasks.c **** 				}
 1234              		.loc 1 1562 0
 1235 005a 2564     		str	r5, [r4, #64]
1572:..\FreeRTOS/tasks.c **** 				{
 1236              		.loc 1 1572 0
 1237 005c A369     		ldr	r3, [r4, #24]
 1238              	.LVL128:
 1239 005e 002B     		cmp	r3, #0
 1240 0060 02DB     		blt	.L107
1574:..\FreeRTOS/tasks.c **** 				}
 1241              		.loc 1 1574 0
 1242 0062 C5F10505 		rsb	r5, r5, #5
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 117


 1243              	.LVL129:
 1244 0066 A561     		str	r5, [r4, #24]
 1245              	.L107:
1585:..\FreeRTOS/tasks.c **** 				{
 1246              		.loc 1 1585 0
 1247 0068 6169     		ldr	r1, [r4, #20]
 1248 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1249 006e 9300     		lsls	r3, r2, #2
 1250 0070 1B4A     		ldr	r2, .L117+4
 1251 0072 1344     		add	r3, r3, r2
 1252 0074 9942     		cmp	r1, r3
 1253 0076 01D1     		bne	.L115
 1254 0078 0123     		movs	r3, #1
 1255 007a 00E0     		b	.L108
 1256              	.L115:
 1257 007c 0023     		movs	r3, #0
 1258              	.L108:
1585:..\FreeRTOS/tasks.c **** 				{
 1259              		.loc 1 1585 0 is_stmt 0 discriminator 4
 1260 007e 03B3     		cbz	r3, .L109
1590:..\FreeRTOS/tasks.c **** 					{
 1261              		.loc 1 1590 0 is_stmt 1
 1262 0080 251D     		adds	r5, r4, #4
 1263 0082 2846     		mov	r0, r5
 1264 0084 FFF7FEFF 		bl	uxListRemove
 1265              	.LVL130:
 1266 0088 48B9     		cbnz	r0, .L110
1595:..\FreeRTOS/tasks.c **** 					}
 1267              		.loc 1 1595 0
 1268 008a 0123     		movs	r3, #1
 1269 008c 03FA06F6 		lsl	r6, r3, r6
 1270              	.LVL131:
 1271 0090 124A     		ldr	r2, .L117
 1272 0092 D2F8E430 		ldr	r3, [r2, #228]
 1273 0096 23EA0606 		bic	r6, r3, r6
 1274 009a C2F8E460 		str	r6, [r2, #228]
 1275              	.L110:
1601:..\FreeRTOS/tasks.c **** 				}
 1276              		.loc 1 1601 0
 1277 009e E36A     		ldr	r3, [r4, #44]
 1278 00a0 0122     		movs	r2, #1
 1279 00a2 02FA03F1 		lsl	r1, r2, r3
 1280 00a6 0D48     		ldr	r0, .L117
 1281 00a8 D0F8E420 		ldr	r2, [r0, #228]
 1282 00ac 0A43     		orrs	r2, r2, r1
 1283 00ae C0F8E420 		str	r2, [r0, #228]
 1284 00b2 3030     		adds	r0, r0, #48
 1285 00b4 03EB8303 		add	r3, r3, r3, lsl #2
 1286 00b8 9A00     		lsls	r2, r3, #2
 1287 00ba 2946     		mov	r1, r5
 1288 00bc 1044     		add	r0, r0, r2
 1289 00be FFF7FEFF 		bl	vListInsertEnd
 1290              	.LVL132:
 1291              	.L109:
1608:..\FreeRTOS/tasks.c **** 				{
 1292              		.loc 1 1608 0
 1293 00c2 3FB1     		cbz	r7, .L103
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 118


1610:..\FreeRTOS/tasks.c **** 				}
 1294              		.loc 1 1610 0
 1295 00c4 4FF08052 		mov	r2, #268435456
 1296 00c8 064B     		ldr	r3, .L117+8
 1297 00ca 1A60     		str	r2, [r3]
 1298              		.syntax unified
 1299              	@ 1610 "..\FreeRTOS\tasks.c" 1
 1300 00cc BFF34F8F 		dsb
 1301              	@ 0 "" 2
 1302              	@ 1610 "..\FreeRTOS\tasks.c" 1
 1303 00d0 BFF36F8F 		isb
 1304              	@ 0 "" 2
 1305              	.LVL133:
 1306              		.thumb
 1307              		.syntax unified
 1308              	.L103:
1622:..\FreeRTOS/tasks.c **** 	}
 1309              		.loc 1 1622 0
 1310 00d4 FFF7FEFF 		bl	vPortExitCritical
 1311              	.LVL134:
 1312 00d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1313              	.LVL135:
 1314              	.L118:
 1315 00da 00BF     		.align	2
 1316              	.L117:
 1317 00dc 00000000 		.word	.LANCHOR0
 1318 00e0 30000000 		.word	.LANCHOR0+48
 1319 00e4 04ED00E0 		.word	-536810236
 1320              		.cfi_endproc
 1321              	.LFE78:
 1322              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1323              		.section	.text.vTaskResume,"ax",%progbits
 1324              		.align	2
 1325              		.global	vTaskResume
 1326              		.thumb
 1327              		.thumb_func
 1328              		.type	vTaskResume, %function
 1329              	vTaskResume:
 1330              	.LFB81:
1778:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1331              		.loc 1 1778 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335              	.LVL136:
1786:..\FreeRTOS/tasks.c **** 		{
 1336              		.loc 1 1786 0
 1337 0000 A0B3     		cbz	r0, .L123
1786:..\FreeRTOS/tasks.c **** 		{
 1338              		.loc 1 1786 0 is_stmt 0 discriminator 1
 1339 0002 1B4A     		ldr	r2, .L124
 1340 0004 D2F8D820 		ldr	r2, [r2, #216]
 1341 0008 9042     		cmp	r0, r2
 1342 000a 2FD0     		beq	.L123
1778:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1343              		.loc 1 1778 0 is_stmt 1
 1344 000c 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 119


 1345              		.cfi_def_cfa_offset 16
 1346              		.cfi_offset 4, -16
 1347              		.cfi_offset 5, -12
 1348              		.cfi_offset 6, -8
 1349              		.cfi_offset 14, -4
 1350 000e 0446     		mov	r4, r0
1788:..\FreeRTOS/tasks.c **** 			{
 1351              		.loc 1 1788 0
 1352 0010 FFF7FEFF 		bl	vPortEnterCritical
 1353              	.LVL137:
1790:..\FreeRTOS/tasks.c **** 				{
 1354              		.loc 1 1790 0
 1355 0014 2046     		mov	r0, r4
 1356 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1357              	.LVL138:
 1358 001a 20B3     		cbz	r0, .L121
1796:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1359              		.loc 1 1796 0
 1360 001c 261D     		adds	r6, r4, #4
 1361 001e 3046     		mov	r0, r6
 1362 0020 FFF7FEFF 		bl	uxListRemove
 1363              	.LVL139:
1797:..\FreeRTOS/tasks.c **** 
 1364              		.loc 1 1797 0
 1365 0024 E36A     		ldr	r3, [r4, #44]
 1366 0026 0122     		movs	r2, #1
 1367 0028 02FA03F1 		lsl	r1, r2, r3
 1368 002c 104D     		ldr	r5, .L124
 1369 002e D5F8E420 		ldr	r2, [r5, #228]
 1370 0032 0A43     		orrs	r2, r2, r1
 1371 0034 C5F8E420 		str	r2, [r5, #228]
 1372 0038 05F13000 		add	r0, r5, #48
 1373 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1374 0040 9A00     		lsls	r2, r3, #2
 1375 0042 3146     		mov	r1, r6
 1376 0044 1044     		add	r0, r0, r2
 1377 0046 FFF7FEFF 		bl	vListInsertEnd
 1378              	.LVL140:
1800:..\FreeRTOS/tasks.c **** 					{
 1379              		.loc 1 1800 0
 1380 004a E26A     		ldr	r2, [r4, #44]
 1381 004c D5F8D830 		ldr	r3, [r5, #216]
 1382 0050 DB6A     		ldr	r3, [r3, #44]
 1383 0052 9A42     		cmp	r2, r3
 1384 0054 07D3     		bcc	.L121
1805:..\FreeRTOS/tasks.c **** 					}
 1385              		.loc 1 1805 0
 1386 0056 4FF08052 		mov	r2, #268435456
 1387 005a 064B     		ldr	r3, .L124+4
 1388 005c 1A60     		str	r2, [r3]
 1389              		.syntax unified
 1390              	@ 1805 "..\FreeRTOS\tasks.c" 1
 1391 005e BFF34F8F 		dsb
 1392              	@ 0 "" 2
 1393              	@ 1805 "..\FreeRTOS\tasks.c" 1
 1394 0062 BFF36F8F 		isb
 1395              	@ 0 "" 2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 120


 1396              		.thumb
 1397              		.syntax unified
 1398              	.L121:
1817:..\FreeRTOS/tasks.c **** 		}
 1399              		.loc 1 1817 0
 1400 0066 FFF7FEFF 		bl	vPortExitCritical
 1401              	.LVL141:
 1402 006a 70BD     		pop	{r4, r5, r6, pc}
 1403              	.LVL142:
 1404              	.L123:
 1405              		.cfi_def_cfa_offset 0
 1406              		.cfi_restore 4
 1407              		.cfi_restore 5
 1408              		.cfi_restore 6
 1409              		.cfi_restore 14
 1410 006c 7047     		bx	lr
 1411              	.L125:
 1412 006e 00BF     		.align	2
 1413              	.L124:
 1414 0070 00000000 		.word	.LANCHOR0
 1415 0074 04ED00E0 		.word	-536810236
 1416              		.cfi_endproc
 1417              	.LFE81:
 1418              		.size	vTaskResume, .-vTaskResume
 1419              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1420              		.align	2
 1421              		.global	xTaskResumeFromISR
 1422              		.thumb
 1423              		.thumb_func
 1424              		.type	xTaskResumeFromISR, %function
 1425              	xTaskResumeFromISR:
 1426              	.LFB82:
1832:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1427              		.loc 1 1832 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              	.LVL143:
 1432 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1433              		.cfi_def_cfa_offset 24
 1434              		.cfi_offset 3, -24
 1435              		.cfi_offset 4, -20
 1436              		.cfi_offset 5, -16
 1437              		.cfi_offset 6, -12
 1438              		.cfi_offset 7, -8
 1439              		.cfi_offset 14, -4
 1440 0002 0446     		mov	r4, r0
 1441              	.LVL144:
 1442              	.LBB32:
 1443              	.LBB33:
 222:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1444              		.loc 2 222 0
 1445              		.syntax unified
 1446              	@ 222 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1447 0004 EFF31185 			mrs r5, basepri											
 1448 0008 4FF0A003 		mov r3, #160												
 1449 000c 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 121


 1450 0010 BFF36F8F 		isb														
 1451 0014 BFF34F8F 		dsb														
 1452              	
 1453              	@ 0 "" 2
 1454              		.thumb
 1455              		.syntax unified
 1456              	.LBE33:
 1457              	.LBE32:
1859:..\FreeRTOS/tasks.c **** 			{
 1458              		.loc 1 1859 0
 1459 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1460              	.LVL145:
 1461 001c 58B3     		cbz	r0, .L130
1864:..\FreeRTOS/tasks.c **** 				{
 1462              		.loc 1 1864 0
 1463 001e 184B     		ldr	r3, .L133
 1464 0020 D3F8F030 		ldr	r3, [r3, #240]
 1465 0024 03BB     		cbnz	r3, .L128
1868:..\FreeRTOS/tasks.c **** 					{
 1466              		.loc 1 1868 0
 1467 0026 E26A     		ldr	r2, [r4, #44]
 1468 0028 154B     		ldr	r3, .L133
 1469 002a D3F8D830 		ldr	r3, [r3, #216]
 1470 002e DB6A     		ldr	r3, [r3, #44]
 1471 0030 9A42     		cmp	r2, r3
 1472 0032 01D2     		bcs	.L131
1833:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1473              		.loc 1 1833 0
 1474 0034 0026     		movs	r6, #0
 1475 0036 00E0     		b	.L129
 1476              	.L131:
1870:..\FreeRTOS/tasks.c **** 					}
 1477              		.loc 1 1870 0
 1478 0038 0126     		movs	r6, #1
 1479              	.L129:
 1480              	.LVL146:
1877:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1481              		.loc 1 1877 0
 1482 003a 271D     		adds	r7, r4, #4
 1483 003c 3846     		mov	r0, r7
 1484 003e FFF7FEFF 		bl	uxListRemove
 1485              	.LVL147:
1878:..\FreeRTOS/tasks.c **** 				}
 1486              		.loc 1 1878 0
 1487 0042 E36A     		ldr	r3, [r4, #44]
 1488 0044 0122     		movs	r2, #1
 1489 0046 02FA03F1 		lsl	r1, r2, r3
 1490 004a 0D48     		ldr	r0, .L133
 1491 004c D0F8E420 		ldr	r2, [r0, #228]
 1492 0050 0A43     		orrs	r2, r2, r1
 1493 0052 C0F8E420 		str	r2, [r0, #228]
 1494 0056 3030     		adds	r0, r0, #48
 1495 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1496 005c 9A00     		lsls	r2, r3, #2
 1497 005e 3946     		mov	r1, r7
 1498 0060 1044     		add	r0, r0, r2
 1499 0062 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 122


 1500              	.LVL148:
 1501 0066 07E0     		b	.L127
 1502              	.LVL149:
 1503              	.L128:
1885:..\FreeRTOS/tasks.c **** 				}
 1504              		.loc 1 1885 0
 1505 0068 04F11801 		add	r1, r4, #24
 1506 006c 0548     		ldr	r0, .L133+4
 1507 006e FFF7FEFF 		bl	vListInsertEnd
 1508              	.LVL150:
1833:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1509              		.loc 1 1833 0
 1510 0072 0026     		movs	r6, #0
 1511 0074 00E0     		b	.L127
 1512              	.L130:
 1513 0076 0026     		movs	r6, #0
 1514              	.LVL151:
 1515              	.L127:
 1516              	.LBB34:
 1517              	.LBB35:
 1518              		.loc 2 240 0
 1519              		.syntax unified
 1520              	@ 240 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1521 0078 85F31188 			msr basepri, r5	
 1522              	@ 0 "" 2
 1523              	.LVL152:
 1524              		.thumb
 1525              		.syntax unified
 1526              	.LBE35:
 1527              	.LBE34:
1896:..\FreeRTOS/tasks.c **** 
 1528              		.loc 1 1896 0
 1529 007c 3046     		mov	r0, r6
 1530 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1531              	.LVL153:
 1532              	.L134:
 1533              		.align	2
 1534              	.L133:
 1535 0080 00000000 		.word	.LANCHOR0
 1536 0084 14000000 		.word	.LANCHOR0+20
 1537              		.cfi_endproc
 1538              	.LFE82:
 1539              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1540              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1541              		.align	2
 1542              		.global	vTaskStartScheduler
 1543              		.thumb
 1544              		.thumb_func
 1545              		.type	vTaskStartScheduler, %function
 1546              	vTaskStartScheduler:
 1547              	.LFB83:
1902:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 1548              		.loc 1 1902 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552 0000 00B5     		push	{lr}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 123


 1553              		.cfi_def_cfa_offset 4
 1554              		.cfi_offset 14, -4
 1555 0002 83B0     		sub	sp, sp, #12
 1556              		.cfi_def_cfa_offset 16
1935:..\FreeRTOS/tasks.c **** 								configIDLE_TASK_NAME,
 1557              		.loc 1 1935 0
 1558 0004 104B     		ldr	r3, .L138
 1559 0006 0193     		str	r3, [sp, #4]
 1560 0008 0023     		movs	r3, #0
 1561 000a 0093     		str	r3, [sp]
 1562 000c C822     		movs	r2, #200
 1563 000e 0F49     		ldr	r1, .L138+4
 1564 0010 0F48     		ldr	r0, .L138+8
 1565 0012 FFF7FEFF 		bl	xTaskCreate
 1566              	.LVL154:
1957:..\FreeRTOS/tasks.c **** 	{
 1567              		.loc 1 1957 0
 1568 0016 0128     		cmp	r0, #1
 1569 0018 13D1     		bne	.L135
 1570              	.LBB36:
 1571              	.LBB37:
 206:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1572              		.loc 2 206 0
 1573              		.syntax unified
 1574              	@ 206 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1575 001a 4FF0A003 			mov r3, #160												
 1576 001e 83F31188 		msr basepri, r3											
 1577 0022 BFF36F8F 		isb														
 1578 0026 BFF34F8F 		dsb														
 1579              	
 1580              	@ 0 "" 2
 1581              		.thumb
 1582              		.syntax unified
 1583              	.LBE37:
 1584              	.LBE36:
1983:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1585              		.loc 1 1983 0
 1586 002a 0A4B     		ldr	r3, .L138+12
 1587 002c 4FF0FF32 		mov	r2, #-1
 1588 0030 DA62     		str	r2, [r3, #44]
1984:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1589              		.loc 1 1984 0
 1590 0032 0122     		movs	r2, #1
 1591 0034 C3F8DC20 		str	r2, [r3, #220]
1985:..\FreeRTOS/tasks.c **** 
 1592              		.loc 1 1985 0
 1593 0038 0022     		movs	r2, #0
 1594 003a C3F8EC20 		str	r2, [r3, #236]
1997:..\FreeRTOS/tasks.c **** 		{
 1595              		.loc 1 1997 0
 1596 003e FFF7FEFF 		bl	xPortStartScheduler
 1597              	.LVL155:
 1598              	.L135:
2018:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1599              		.loc 1 2018 0
 1600 0042 03B0     		add	sp, sp, #12
 1601              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 124


 1602              		@ sp needed
 1603 0044 5DF804FB 		ldr	pc, [sp], #4
 1604              	.L139:
 1605              		.align	2
 1606              	.L138:
 1607 0048 F4000000 		.word	.LANCHOR0+244
 1608 004c 00000000 		.word	.LC0
 1609 0050 00000000 		.word	prvIdleTask
 1610 0054 00000000 		.word	.LANCHOR0
 1611              		.cfi_endproc
 1612              	.LFE83:
 1613              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1614              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1615              		.align	2
 1616              		.global	vTaskEndScheduler
 1617              		.thumb
 1618              		.thumb_func
 1619              		.type	vTaskEndScheduler, %function
 1620              	vTaskEndScheduler:
 1621              	.LFB84:
2022:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1622              		.loc 1 2022 0
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 0
 1625              		@ frame_needed = 0, uses_anonymous_args = 0
 1626 0000 08B5     		push	{r3, lr}
 1627              		.cfi_def_cfa_offset 8
 1628              		.cfi_offset 3, -8
 1629              		.cfi_offset 14, -4
 1630              	.LBB38:
 1631              	.LBB39:
 206:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1632              		.loc 2 206 0
 1633              		.syntax unified
 1634              	@ 206 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1635 0002 4FF0A003 			mov r3, #160												
 1636 0006 83F31188 		msr basepri, r3											
 1637 000a BFF36F8F 		isb														
 1638 000e BFF34F8F 		dsb														
 1639              	
 1640              	@ 0 "" 2
 1641              		.thumb
 1642              		.syntax unified
 1643              	.LBE39:
 1644              	.LBE38:
2027:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1645              		.loc 1 2027 0
 1646 0012 0022     		movs	r2, #0
 1647 0014 024B     		ldr	r3, .L142
 1648 0016 C3F8DC20 		str	r2, [r3, #220]
2028:..\FreeRTOS/tasks.c **** }
 1649              		.loc 1 2028 0
 1650 001a FFF7FEFF 		bl	vPortEndScheduler
 1651              	.LVL156:
 1652 001e 08BD     		pop	{r3, pc}
 1653              	.L143:
 1654              		.align	2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 125


 1655              	.L142:
 1656 0020 00000000 		.word	.LANCHOR0
 1657              		.cfi_endproc
 1658              	.LFE84:
 1659              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1660              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1661              		.align	2
 1662              		.global	vTaskSuspendAll
 1663              		.thumb
 1664              		.thumb_func
 1665              		.type	vTaskSuspendAll, %function
 1666              	vTaskSuspendAll:
 1667              	.LFB85:
2033:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 1668              		.loc 1 2033 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 0
 1671              		@ frame_needed = 0, uses_anonymous_args = 0
 1672              		@ link register save eliminated.
2038:..\FreeRTOS/tasks.c **** }
 1673              		.loc 1 2038 0
 1674 0000 034A     		ldr	r2, .L145
 1675 0002 D2F8F030 		ldr	r3, [r2, #240]
 1676 0006 0133     		adds	r3, r3, #1
 1677 0008 C2F8F030 		str	r3, [r2, #240]
 1678 000c 7047     		bx	lr
 1679              	.L146:
 1680 000e 00BF     		.align	2
 1681              	.L145:
 1682 0010 00000000 		.word	.LANCHOR0
 1683              		.cfi_endproc
 1684              	.LFE85:
 1685              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1686              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1687              		.align	2
 1688              		.global	xTaskGetTickCount
 1689              		.thumb
 1690              		.thumb_func
 1691              		.type	xTaskGetTickCount, %function
 1692              	xTaskGetTickCount:
 1693              	.LFB87:
2216:..\FreeRTOS/tasks.c **** TickType_t xTicks;
 1694              		.loc 1 2216 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698              		@ link register save eliminated.
2222:..\FreeRTOS/tasks.c **** 	}
 1699              		.loc 1 2222 0
 1700 0000 014B     		ldr	r3, .L148
 1701 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1702              	.LVL157:
2227:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1703              		.loc 1 2227 0
 1704 0006 7047     		bx	lr
 1705              	.L149:
 1706              		.align	2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 126


 1707              	.L148:
 1708 0008 00000000 		.word	.LANCHOR0
 1709              		.cfi_endproc
 1710              	.LFE87:
 1711              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1712              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1713              		.align	2
 1714              		.global	xTaskGetTickCountFromISR
 1715              		.thumb
 1716              		.thumb_func
 1717              		.type	xTaskGetTickCountFromISR, %function
 1718              	xTaskGetTickCountFromISR:
 1719              	.LFB88:
2231:..\FreeRTOS/tasks.c **** TickType_t xReturn;
 1720              		.loc 1 2231 0
 1721              		.cfi_startproc
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 0, uses_anonymous_args = 0
 1724              		@ link register save eliminated.
 1725              	.LVL158:
2253:..\FreeRTOS/tasks.c **** 	}
 1726              		.loc 1 2253 0
 1727 0000 014B     		ldr	r3, .L151
 1728 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1729              	.LVL159:
2258:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1730              		.loc 1 2258 0
 1731 0006 7047     		bx	lr
 1732              	.L152:
 1733              		.align	2
 1734              	.L151:
 1735 0008 00000000 		.word	.LANCHOR0
 1736              		.cfi_endproc
 1737              	.LFE88:
 1738              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1739              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1740              		.align	2
 1741              		.global	uxTaskGetNumberOfTasks
 1742              		.thumb
 1743              		.thumb_func
 1744              		.type	uxTaskGetNumberOfTasks, %function
 1745              	uxTaskGetNumberOfTasks:
 1746              	.LFB89:
2262:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 1747              		.loc 1 2262 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
2265:..\FreeRTOS/tasks.c **** }
 1752              		.loc 1 2265 0
 1753 0000 014B     		ldr	r3, .L154
 1754 0002 D3F8D400 		ldr	r0, [r3, #212]
2266:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1755              		.loc 1 2266 0
 1756 0006 7047     		bx	lr
 1757              	.L155:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 127


 1758              		.align	2
 1759              	.L154:
 1760 0008 00000000 		.word	.LANCHOR0
 1761              		.cfi_endproc
 1762              	.LFE89:
 1763              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1764              		.section	.text.pcTaskGetName,"ax",%progbits
 1765              		.align	2
 1766              		.global	pcTaskGetName
 1767              		.thumb
 1768              		.thumb_func
 1769              		.type	pcTaskGetName, %function
 1770              	pcTaskGetName:
 1771              	.LFB90:
2270:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
 1772              		.loc 1 2270 0
 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 0
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 1776              		@ link register save eliminated.
 1777              	.LVL160:
2275:..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1778              		.loc 1 2275 0
 1779 0000 0346     		mov	r3, r0
 1780 0002 10B9     		cbnz	r0, .L157
2275:..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1781              		.loc 1 2275 0 is_stmt 0 discriminator 1
 1782 0004 024B     		ldr	r3, .L158
 1783 0006 D3F8D830 		ldr	r3, [r3, #216]
 1784              	.LVL161:
 1785              	.L157:
2278:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1786              		.loc 1 2278 0 is_stmt 1 discriminator 4
 1787 000a 03F13400 		add	r0, r3, #52
 1788 000e 7047     		bx	lr
 1789              	.L159:
 1790              		.align	2
 1791              	.L158:
 1792 0010 00000000 		.word	.LANCHOR0
 1793              		.cfi_endproc
 1794              	.LFE90:
 1795              		.size	pcTaskGetName, .-pcTaskGetName
 1796              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1797              		.align	2
 1798              		.global	xTaskIncrementTick
 1799              		.thumb
 1800              		.thumb_func
 1801              		.type	xTaskIncrementTick, %function
 1802              	xTaskIncrementTick:
 1803              	.LFB91:
2590:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
 1804              		.loc 1 2590 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 0
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
 1808 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1809              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 128


 1810              		.cfi_offset 4, -24
 1811              		.cfi_offset 5, -20
 1812              		.cfi_offset 6, -16
 1813              		.cfi_offset 7, -12
 1814              		.cfi_offset 8, -8
 1815              		.cfi_offset 14, -4
 1816              	.LVL162:
2599:..\FreeRTOS/tasks.c **** 	{
 1817              		.loc 1 2599 0
 1818 0004 3F4B     		ldr	r3, .L179
 1819 0006 D3F8F030 		ldr	r3, [r3, #240]
 1820 000a 002B     		cmp	r3, #0
 1821 000c 66D1     		bne	.L161
 1822              	.LBB40:
2603:..\FreeRTOS/tasks.c **** 
 1823              		.loc 1 2603 0
 1824 000e 3D4B     		ldr	r3, .L179
 1825 0010 D3F8EC70 		ldr	r7, [r3, #236]
 1826 0014 0137     		adds	r7, r7, #1
 1827              	.LVL163:
2607:..\FreeRTOS/tasks.c **** 
 1828              		.loc 1 2607 0
 1829 0016 C3F8EC70 		str	r7, [r3, #236]
2609:..\FreeRTOS/tasks.c **** 		{
 1830              		.loc 1 2609 0
 1831 001a 67B9     		cbnz	r7, .L162
 1832              	.LBB41:
2611:..\FreeRTOS/tasks.c **** 		}
 1833              		.loc 1 2611 0
 1834 001c 9A6A     		ldr	r2, [r3, #40]
 1835              	.LVL164:
 1836 001e D3F8D010 		ldr	r1, [r3, #208]
 1837 0022 9962     		str	r1, [r3, #40]
 1838 0024 C3F8D020 		str	r2, [r3, #208]
 1839 0028 D3F8F820 		ldr	r2, [r3, #248]
 1840              	.LVL165:
 1841 002c 0132     		adds	r2, r2, #1
 1842 002e C3F8F820 		str	r2, [r3, #248]
 1843              	.LVL166:
 1844 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1845              	.LVL167:
 1846              	.L162:
 1847              	.LBE41:
2622:..\FreeRTOS/tasks.c **** 		{
 1848              		.loc 1 2622 0
 1849 0036 334B     		ldr	r3, .L179
 1850 0038 DB6A     		ldr	r3, [r3, #44]
 1851 003a 9F42     		cmp	r7, r3
 1852 003c 05D2     		bcs	.L173
 1853              	.LBE40:
2593:..\FreeRTOS/tasks.c **** 
 1854              		.loc 1 2593 0
 1855 003e 4FF00008 		mov	r8, #0
 1856 0042 3FE0     		b	.L164
 1857              	.LVL168:
 1858              	.L175:
 1859              	.LBB42:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 129


2688:..\FreeRTOS/tasks.c **** 						}
 1860              		.loc 1 2688 0
 1861 0044 4FF00108 		mov	r8, #1
 1862              	.LVL169:
 1863 0048 01E0     		b	.L163
 1864              	.LVL170:
 1865              	.L173:
 1866 004a 4FF00008 		mov	r8, #0
 1867              	.LVL171:
 1868              	.L163:
2626:..\FreeRTOS/tasks.c **** 				{
 1869              		.loc 1 2626 0
 1870 004e 2D4B     		ldr	r3, .L179
 1871 0050 9B6A     		ldr	r3, [r3, #40]
 1872 0052 1B68     		ldr	r3, [r3]
 1873 0054 0BB9     		cbnz	r3, .L174
 1874 0056 0123     		movs	r3, #1
 1875 0058 00E0     		b	.L165
 1876              	.L174:
 1877 005a 0023     		movs	r3, #0
 1878              	.L165:
2626:..\FreeRTOS/tasks.c **** 				{
 1879              		.loc 1 2626 0 is_stmt 0 discriminator 4
 1880 005c 23B1     		cbz	r3, .L166
2633:..\FreeRTOS/tasks.c **** 					break;
 1881              		.loc 1 2633 0 is_stmt 1
 1882 005e 4FF0FF32 		mov	r2, #-1
 1883 0062 284B     		ldr	r3, .L179
 1884 0064 DA62     		str	r2, [r3, #44]
2634:..\FreeRTOS/tasks.c **** 				}
 1885              		.loc 1 2634 0
 1886 0066 2DE0     		b	.L164
 1887              	.L166:
2642:..\FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1888              		.loc 1 2642 0
 1889 0068 264B     		ldr	r3, .L179
 1890 006a 9B6A     		ldr	r3, [r3, #40]
 1891 006c DB68     		ldr	r3, [r3, #12]
 1892 006e DC68     		ldr	r4, [r3, #12]
 1893              	.LVL172:
2643:..\FreeRTOS/tasks.c **** 
 1894              		.loc 1 2643 0
 1895 0070 6368     		ldr	r3, [r4, #4]
 1896              	.LVL173:
2645:..\FreeRTOS/tasks.c **** 					{
 1897              		.loc 1 2645 0
 1898 0072 9F42     		cmp	r7, r3
 1899 0074 02D2     		bcs	.L167
2652:..\FreeRTOS/tasks.c **** 						break;
 1900              		.loc 1 2652 0
 1901 0076 234A     		ldr	r2, .L179
 1902 0078 D362     		str	r3, [r2, #44]
2653:..\FreeRTOS/tasks.c **** 					}
 1903              		.loc 1 2653 0
 1904 007a 23E0     		b	.L164
 1905              	.L167:
2661:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 130


 1906              		.loc 1 2661 0
 1907 007c 261D     		adds	r6, r4, #4
 1908 007e 3046     		mov	r0, r6
 1909 0080 FFF7FEFF 		bl	uxListRemove
 1910              	.LVL174:
2665:..\FreeRTOS/tasks.c **** 					{
 1911              		.loc 1 2665 0
 1912 0084 A36A     		ldr	r3, [r4, #40]
 1913 0086 1BB1     		cbz	r3, .L168
2667:..\FreeRTOS/tasks.c **** 					}
 1914              		.loc 1 2667 0
 1915 0088 04F11800 		add	r0, r4, #24
 1916 008c FFF7FEFF 		bl	uxListRemove
 1917              	.LVL175:
 1918              	.L168:
2676:..\FreeRTOS/tasks.c **** 
 1919              		.loc 1 2676 0
 1920 0090 E36A     		ldr	r3, [r4, #44]
 1921 0092 0122     		movs	r2, #1
 1922 0094 02FA03F1 		lsl	r1, r2, r3
 1923 0098 1A4D     		ldr	r5, .L179
 1924 009a D5F8E420 		ldr	r2, [r5, #228]
 1925 009e 0A43     		orrs	r2, r2, r1
 1926 00a0 C5F8E420 		str	r2, [r5, #228]
 1927 00a4 05F13000 		add	r0, r5, #48
 1928 00a8 03EB8303 		add	r3, r3, r3, lsl #2
 1929 00ac 9A00     		lsls	r2, r3, #2
 1930 00ae 3146     		mov	r1, r6
 1931 00b0 1044     		add	r0, r0, r2
 1932 00b2 FFF7FEFF 		bl	vListInsertEnd
 1933              	.LVL176:
2686:..\FreeRTOS/tasks.c **** 						{
 1934              		.loc 1 2686 0
 1935 00b6 E26A     		ldr	r2, [r4, #44]
 1936 00b8 D5F8D830 		ldr	r3, [r5, #216]
 1937 00bc DB6A     		ldr	r3, [r3, #44]
 1938 00be 9A42     		cmp	r2, r3
 1939 00c0 C0D2     		bcs	.L175
 1940 00c2 C4E7     		b	.L163
 1941              	.LVL177:
 1942              	.L164:
2705:..\FreeRTOS/tasks.c **** 			{
 1943              		.loc 1 2705 0
 1944 00c4 0F49     		ldr	r1, .L179
 1945 00c6 D1F8D830 		ldr	r3, [r1, #216]
 1946 00ca DB6A     		ldr	r3, [r3, #44]
 1947 00cc 03EB8303 		add	r3, r3, r3, lsl #2
 1948 00d0 9A00     		lsls	r2, r3, #2
 1949 00d2 0A44     		add	r2, r2, r1
 1950 00d4 136B     		ldr	r3, [r2, #48]
 1951 00d6 012B     		cmp	r3, #1
 1952 00d8 09D8     		bhi	.L176
 1953 00da 0AE0     		b	.L171
 1954              	.LVL178:
 1955              	.L161:
 1956              	.LBE42:
2733:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 131


 1957              		.loc 1 2733 0
 1958 00dc 094A     		ldr	r2, .L179
 1959 00de D2F8FC30 		ldr	r3, [r2, #252]
 1960 00e2 0133     		adds	r3, r3, #1
 1961 00e4 C2F8FC30 		str	r3, [r2, #252]
2593:..\FreeRTOS/tasks.c **** 
 1962              		.loc 1 2593 0
 1963 00e8 4FF00008 		mov	r8, #0
 1964 00ec 01E0     		b	.L171
 1965              	.LVL179:
 1966              	.L176:
 1967              	.LBB43:
2707:..\FreeRTOS/tasks.c **** 			}
 1968              		.loc 1 2707 0
 1969 00ee 4FF00108 		mov	r8, #1
 1970              	.LVL180:
 1971              	.L171:
 1972              	.LBE43:
2746:..\FreeRTOS/tasks.c **** 		{
 1973              		.loc 1 2746 0
 1974 00f2 044B     		ldr	r3, .L179
 1975 00f4 D3F80031 		ldr	r3, [r3, #256]
 1976 00f8 0BB1     		cbz	r3, .L172
2748:..\FreeRTOS/tasks.c **** 		}
 1977              		.loc 1 2748 0
 1978 00fa 4FF00108 		mov	r8, #1
 1979              	.LVL181:
 1980              	.L172:
2758:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1981              		.loc 1 2758 0
 1982 00fe 4046     		mov	r0, r8
 1983 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1984              	.LVL182:
 1985              	.L180:
 1986              		.align	2
 1987              	.L179:
 1988 0104 00000000 		.word	.LANCHOR0
 1989              		.cfi_endproc
 1990              	.LFE91:
 1991              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1992              		.section	.text.xTaskResumeAll,"ax",%progbits
 1993              		.align	2
 1994              		.global	xTaskResumeAll
 1995              		.thumb
 1996              		.thumb_func
 1997              		.type	xTaskResumeAll, %function
 1998              	xTaskResumeAll:
 1999              	.LFB86:
2106:..\FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2000              		.loc 1 2106 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 0
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004 0000 70B5     		push	{r4, r5, r6, lr}
 2005              		.cfi_def_cfa_offset 16
 2006              		.cfi_offset 4, -16
 2007              		.cfi_offset 5, -12
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 132


 2008              		.cfi_offset 6, -8
 2009              		.cfi_offset 14, -4
 2010              	.LVL183:
2119:..\FreeRTOS/tasks.c **** 	{
 2011              		.loc 1 2119 0
 2012 0002 FFF7FEFF 		bl	vPortEnterCritical
 2013              	.LVL184:
2121:..\FreeRTOS/tasks.c **** 
 2014              		.loc 1 2121 0
 2015 0006 324B     		ldr	r3, .L194
 2016 0008 D3F8F020 		ldr	r2, [r3, #240]
 2017 000c 013A     		subs	r2, r2, #1
 2018 000e C3F8F020 		str	r2, [r3, #240]
2123:..\FreeRTOS/tasks.c **** 		{
 2019              		.loc 1 2123 0
 2020 0012 D3F8F030 		ldr	r3, [r3, #240]
 2021 0016 002B     		cmp	r3, #0
 2022 0018 53D1     		bne	.L190
2125:..\FreeRTOS/tasks.c **** 			{
 2023              		.loc 1 2125 0
 2024 001a 2D4B     		ldr	r3, .L194
 2025 001c D3F8D430 		ldr	r3, [r3, #212]
 2026 0020 43BB     		cbnz	r3, .L191
2108:..\FreeRTOS/tasks.c **** 
 2027              		.loc 1 2108 0
 2028 0022 0024     		movs	r4, #0
 2029 0024 50E0     		b	.L182
 2030              	.LVL185:
 2031              	.L185:
2131:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2032              		.loc 1 2131 0
 2033 0026 2A4C     		ldr	r4, .L194
 2034 0028 236A     		ldr	r3, [r4, #32]
 2035 002a DD68     		ldr	r5, [r3, #12]
 2036              	.LVL186:
2132:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2037              		.loc 1 2132 0
 2038 002c 05F11800 		add	r0, r5, #24
 2039 0030 FFF7FEFF 		bl	uxListRemove
 2040              	.LVL187:
2133:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2041              		.loc 1 2133 0
 2042 0034 2E1D     		adds	r6, r5, #4
 2043 0036 3046     		mov	r0, r6
 2044 0038 FFF7FEFF 		bl	uxListRemove
 2045              	.LVL188:
2134:..\FreeRTOS/tasks.c **** 
 2046              		.loc 1 2134 0
 2047 003c EB6A     		ldr	r3, [r5, #44]
 2048 003e 0122     		movs	r2, #1
 2049 0040 02FA03F1 		lsl	r1, r2, r3
 2050 0044 D4F8E420 		ldr	r2, [r4, #228]
 2051 0048 0A43     		orrs	r2, r2, r1
 2052 004a C4F8E420 		str	r2, [r4, #228]
 2053 004e 04F13000 		add	r0, r4, #48
 2054 0052 03EB8303 		add	r3, r3, r3, lsl #2
 2055 0056 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 133


 2056 0058 3146     		mov	r1, r6
 2057 005a 1044     		add	r0, r0, r2
 2058 005c FFF7FEFF 		bl	vListInsertEnd
 2059              	.LVL189:
2138:..\FreeRTOS/tasks.c **** 					{
 2060              		.loc 1 2138 0
 2061 0060 EA6A     		ldr	r2, [r5, #44]
 2062 0062 D4F8D830 		ldr	r3, [r4, #216]
 2063 0066 DB6A     		ldr	r3, [r3, #44]
 2064 0068 9A42     		cmp	r2, r3
 2065 006a 04D3     		bcc	.L183
2140:..\FreeRTOS/tasks.c **** 					}
 2066              		.loc 1 2140 0
 2067 006c 0122     		movs	r2, #1
 2068 006e C4F80021 		str	r2, [r4, #256]
 2069 0072 00E0     		b	.L183
 2070              	.LVL190:
 2071              	.L191:
 2072 0074 0025     		movs	r5, #0
 2073              	.LVL191:
 2074              	.L183:
2129:..\FreeRTOS/tasks.c **** 				{
 2075              		.loc 1 2129 0
 2076 0076 164B     		ldr	r3, .L194
 2077 0078 5B69     		ldr	r3, [r3, #20]
 2078 007a 002B     		cmp	r3, #0
 2079 007c D3D1     		bne	.L185
2148:..\FreeRTOS/tasks.c **** 				{
 2080              		.loc 1 2148 0
 2081 007e 0DB1     		cbz	r5, .L186
2156:..\FreeRTOS/tasks.c **** 				}
 2082              		.loc 1 2156 0
 2083 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2084              	.LVL192:
 2085              	.L186:
 2086              	.LBB44:
2164:..\FreeRTOS/tasks.c **** 
 2087              		.loc 1 2164 0
 2088 0084 124B     		ldr	r3, .L194
 2089 0086 D3F8FC40 		ldr	r4, [r3, #252]
 2090              	.LVL193:
2166:..\FreeRTOS/tasks.c **** 					{
 2091              		.loc 1 2166 0
 2092 008a 64B1     		cbz	r4, .L187
 2093              	.L189:
2170:..\FreeRTOS/tasks.c **** 							{
 2094              		.loc 1 2170 0
 2095 008c FFF7FEFF 		bl	xTaskIncrementTick
 2096              	.LVL194:
 2097 0090 18B1     		cbz	r0, .L188
2172:..\FreeRTOS/tasks.c **** 							}
 2098              		.loc 1 2172 0
 2099 0092 0122     		movs	r2, #1
 2100 0094 0E4B     		ldr	r3, .L194
 2101 0096 C3F80021 		str	r2, [r3, #256]
 2102              	.L188:
 2103              	.LVL195:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 134


2179:..\FreeRTOS/tasks.c **** 
 2104              		.loc 1 2179 0
 2105 009a 013C     		subs	r4, r4, #1
 2106              	.LVL196:
 2107 009c F6D1     		bne	.L189
2181:..\FreeRTOS/tasks.c **** 					}
 2108              		.loc 1 2181 0
 2109 009e 0022     		movs	r2, #0
 2110 00a0 0B4B     		ldr	r3, .L194
 2111 00a2 C3F8FC20 		str	r2, [r3, #252]
 2112              	.L187:
 2113              	.LBE44:
2189:..\FreeRTOS/tasks.c **** 				{
 2114              		.loc 1 2189 0
 2115 00a6 0A4B     		ldr	r3, .L194
 2116 00a8 D3F80031 		ldr	r3, [r3, #256]
 2117 00ac 5BB1     		cbz	r3, .L192
 2118              	.LVL197:
2196:..\FreeRTOS/tasks.c **** 				}
 2119              		.loc 1 2196 0
 2120 00ae 4FF08052 		mov	r2, #268435456
 2121 00b2 084B     		ldr	r3, .L194+4
 2122 00b4 1A60     		str	r2, [r3]
 2123              		.syntax unified
 2124              	@ 2196 "..\FreeRTOS\tasks.c" 1
 2125 00b6 BFF34F8F 		dsb
 2126              	@ 0 "" 2
 2127              	@ 2196 "..\FreeRTOS\tasks.c" 1
 2128 00ba BFF36F8F 		isb
 2129              	@ 0 "" 2
2193:..\FreeRTOS/tasks.c **** 					}
 2130              		.loc 1 2193 0
 2131              		.thumb
 2132              		.syntax unified
 2133 00be 0124     		movs	r4, #1
 2134              	.LVL198:
 2135 00c0 02E0     		b	.L182
 2136              	.LVL199:
 2137              	.L190:
2108:..\FreeRTOS/tasks.c **** 
 2138              		.loc 1 2108 0
 2139 00c2 0024     		movs	r4, #0
 2140 00c4 00E0     		b	.L182
 2141              	.LVL200:
 2142              	.L192:
 2143 00c6 0024     		movs	r4, #0
 2144              	.LVL201:
 2145              	.L182:
2209:..\FreeRTOS/tasks.c **** 
 2146              		.loc 1 2209 0
 2147 00c8 FFF7FEFF 		bl	vPortExitCritical
 2148              	.LVL202:
2212:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2149              		.loc 1 2212 0
 2150 00cc 2046     		mov	r0, r4
 2151 00ce 70BD     		pop	{r4, r5, r6, pc}
 2152              	.LVL203:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 135


 2153              	.L195:
 2154              		.align	2
 2155              	.L194:
 2156 00d0 00000000 		.word	.LANCHOR0
 2157 00d4 04ED00E0 		.word	-536810236
 2158              		.cfi_endproc
 2159              	.LFE86:
 2160              		.size	xTaskResumeAll, .-xTaskResumeAll
 2161              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2162              		.align	2
 2163              		.global	vTaskDelayUntil
 2164              		.thumb
 2165              		.thumb_func
 2166              		.type	vTaskDelayUntil, %function
 2167              	vTaskDelayUntil:
 2168              	.LFB73:
1205:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 2169              		.loc 1 1205 0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 0
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 2173              	.LVL204:
 2174 0000 38B5     		push	{r3, r4, r5, lr}
 2175              		.cfi_def_cfa_offset 16
 2176              		.cfi_offset 3, -16
 2177              		.cfi_offset 4, -12
 2178              		.cfi_offset 5, -8
 2179              		.cfi_offset 14, -4
 2180 0002 0546     		mov	r5, r0
 2181 0004 0C46     		mov	r4, r1
 2182              	.LVL205:
1213:..\FreeRTOS/tasks.c **** 		{
 2183              		.loc 1 1213 0
 2184 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2185              	.LVL206:
 2186              	.LBB45:
1217:..\FreeRTOS/tasks.c **** 
 2187              		.loc 1 1217 0
 2188 000a 164B     		ldr	r3, .L206
 2189 000c D3F8EC00 		ldr	r0, [r3, #236]
 2190              	.LVL207:
1220:..\FreeRTOS/tasks.c **** 
 2191              		.loc 1 1220 0
 2192 0010 2A68     		ldr	r2, [r5]
 2193 0012 1319     		adds	r3, r2, r4
 2194              	.LVL208:
1222:..\FreeRTOS/tasks.c **** 			{
 2195              		.loc 1 1222 0
 2196 0014 9042     		cmp	r0, r2
 2197 0016 05D2     		bcs	.L197
1229:..\FreeRTOS/tasks.c **** 				{
 2198              		.loc 1 1229 0
 2199 0018 9A42     		cmp	r2, r3
 2200 001a 09D9     		bls	.L201
1229:..\FreeRTOS/tasks.c **** 				{
 2201              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2202 001c 9842     		cmp	r0, r3
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 136


 2203 001e 09D3     		bcc	.L202
 2204              	.LBE45:
1207:..\FreeRTOS/tasks.c **** 
 2205              		.loc 1 1207 0 is_stmt 1
 2206 0020 0022     		movs	r2, #0
 2207 0022 0CE0     		b	.L198
 2208              	.L197:
 2209              	.LBB46:
1243:..\FreeRTOS/tasks.c **** 				{
 2210              		.loc 1 1243 0
 2211 0024 9A42     		cmp	r2, r3
 2212 0026 07D8     		bhi	.L203
1243:..\FreeRTOS/tasks.c **** 				{
 2213              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2214 0028 9842     		cmp	r0, r3
 2215 002a 07D3     		bcc	.L204
 2216              	.LBE46:
1207:..\FreeRTOS/tasks.c **** 
 2217              		.loc 1 1207 0 is_stmt 1
 2218 002c 0022     		movs	r2, #0
 2219 002e 06E0     		b	.L198
 2220              	.L201:
 2221 0030 0022     		movs	r2, #0
 2222 0032 04E0     		b	.L198
 2223              	.L202:
 2224              	.LBB47:
1231:..\FreeRTOS/tasks.c **** 				}
 2225              		.loc 1 1231 0
 2226 0034 0122     		movs	r2, #1
 2227 0036 02E0     		b	.L198
 2228              	.L203:
1245:..\FreeRTOS/tasks.c **** 				}
 2229              		.loc 1 1245 0
 2230 0038 0122     		movs	r2, #1
 2231 003a 00E0     		b	.L198
 2232              	.L204:
 2233 003c 0122     		movs	r2, #1
 2234              	.L198:
 2235              	.LVL209:
1254:..\FreeRTOS/tasks.c **** 
 2236              		.loc 1 1254 0
 2237 003e 2B60     		str	r3, [r5]
1256:..\FreeRTOS/tasks.c **** 			{
 2238              		.loc 1 1256 0
 2239 0040 1AB1     		cbz	r2, .L199
1262:..\FreeRTOS/tasks.c **** 			}
 2240              		.loc 1 1262 0
 2241 0042 0021     		movs	r1, #0
 2242 0044 181A     		subs	r0, r3, r0
 2243              	.LVL210:
 2244 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2245              	.LVL211:
 2246              	.L199:
 2247              	.LBE47:
1269:..\FreeRTOS/tasks.c **** 
 2248              		.loc 1 1269 0
 2249 004a FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 137


 2250              	.LVL212:
1273:..\FreeRTOS/tasks.c **** 		{
 2251              		.loc 1 1273 0
 2252 004e 38B9     		cbnz	r0, .L196
1275:..\FreeRTOS/tasks.c **** 		}
 2253              		.loc 1 1275 0
 2254 0050 4FF08052 		mov	r2, #268435456
 2255 0054 044B     		ldr	r3, .L206+4
 2256 0056 1A60     		str	r2, [r3]
 2257              		.syntax unified
 2258              	@ 1275 "..\FreeRTOS\tasks.c" 1
 2259 0058 BFF34F8F 		dsb
 2260              	@ 0 "" 2
 2261              	@ 1275 "..\FreeRTOS\tasks.c" 1
 2262 005c BFF36F8F 		isb
 2263              	@ 0 "" 2
 2264              		.thumb
 2265              		.syntax unified
 2266              	.L196:
 2267 0060 38BD     		pop	{r3, r4, r5, pc}
 2268              	.LVL213:
 2269              	.L207:
 2270 0062 00BF     		.align	2
 2271              	.L206:
 2272 0064 00000000 		.word	.LANCHOR0
 2273 0068 04ED00E0 		.word	-536810236
 2274              		.cfi_endproc
 2275              	.LFE73:
 2276              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2277              		.section	.text.vTaskDelay,"ax",%progbits
 2278              		.align	2
 2279              		.global	vTaskDelay
 2280              		.thumb
 2281              		.thumb_func
 2282              		.type	vTaskDelay, %function
 2283              	vTaskDelay:
 2284              	.LFB74:
1289:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2285              		.loc 1 1289 0
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 0
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 2289              	.LVL214:
 2290 0000 10B5     		push	{r4, lr}
 2291              		.cfi_def_cfa_offset 8
 2292              		.cfi_offset 4, -8
 2293              		.cfi_offset 14, -4
 2294              	.LVL215:
1293:..\FreeRTOS/tasks.c **** 		{
 2295              		.loc 1 1293 0
 2296 0002 48B1     		cbz	r0, .L211
 2297 0004 0446     		mov	r4, r0
1296:..\FreeRTOS/tasks.c **** 			{
 2298              		.loc 1 1296 0
 2299 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2300              	.LVL216:
1307:..\FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 138


 2301              		.loc 1 1307 0
 2302 000a 0021     		movs	r1, #0
 2303 000c 2046     		mov	r0, r4
 2304 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2305              	.LVL217:
1309:..\FreeRTOS/tasks.c **** 		}
 2306              		.loc 1 1309 0
 2307 0012 FFF7FEFF 		bl	xTaskResumeAll
 2308              	.LVL218:
 2309 0016 00E0     		b	.L209
 2310              	.LVL219:
 2311              	.L211:
1290:..\FreeRTOS/tasks.c **** 
 2312              		.loc 1 1290 0
 2313 0018 0020     		movs	r0, #0
 2314              	.LVL220:
 2315              	.L209:
1318:..\FreeRTOS/tasks.c **** 		{
 2316              		.loc 1 1318 0
 2317 001a 38B9     		cbnz	r0, .L208
1320:..\FreeRTOS/tasks.c **** 		}
 2318              		.loc 1 1320 0
 2319 001c 4FF08052 		mov	r2, #268435456
 2320 0020 034B     		ldr	r3, .L213
 2321 0022 1A60     		str	r2, [r3]
 2322              		.syntax unified
 2323              	@ 1320 "..\FreeRTOS\tasks.c" 1
 2324 0024 BFF34F8F 		dsb
 2325              	@ 0 "" 2
 2326              	@ 1320 "..\FreeRTOS\tasks.c" 1
 2327 0028 BFF36F8F 		isb
 2328              	@ 0 "" 2
 2329              		.thumb
 2330              		.syntax unified
 2331              	.L208:
 2332 002c 10BD     		pop	{r4, pc}
 2333              	.L214:
 2334 002e 00BF     		.align	2
 2335              	.L213:
 2336 0030 04ED00E0 		.word	-536810236
 2337              		.cfi_endproc
 2338              	.LFE74:
 2339              		.size	vTaskDelay, .-vTaskDelay
 2340              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2341              		.align	2
 2342              		.global	vTaskSwitchContext
 2343              		.thumb
 2344              		.thumb_func
 2345              		.type	vTaskSwitchContext, %function
 2346              	vTaskSwitchContext:
 2347              	.LFB92:
2852:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2348              		.loc 1 2852 0
 2349              		.cfi_startproc
 2350              		@ args = 0, pretend = 0, frame = 0
 2351              		@ frame_needed = 0, uses_anonymous_args = 0
 2352              		@ link register save eliminated.
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 139


2853:..\FreeRTOS/tasks.c **** 	{
 2353              		.loc 1 2853 0
 2354 0000 1A4B     		ldr	r3, .L220
 2355 0002 D3F8F030 		ldr	r3, [r3, #240]
 2356 0006 23B1     		cbz	r3, .L216
2857:..\FreeRTOS/tasks.c **** 	}
 2357              		.loc 1 2857 0
 2358 0008 0122     		movs	r2, #1
 2359 000a 184B     		ldr	r3, .L220
 2360 000c C3F80021 		str	r2, [r3, #256]
 2361 0010 7047     		bx	lr
 2362              	.L216:
2852:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2363              		.loc 1 2852 0
 2364 0012 10B4     		push	{r4}
 2365              		.cfi_def_cfa_offset 4
 2366              		.cfi_offset 4, -4
2861:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2367              		.loc 1 2861 0
 2368 0014 154A     		ldr	r2, .L220
 2369 0016 0023     		movs	r3, #0
 2370 0018 C2F80031 		str	r3, [r2, #256]
 2371              	.LBB48:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2372              		.loc 1 2896 0
 2373 001c D2F8E430 		ldr	r3, [r2, #228]
 2374              	.LVL221:
 2375              	.LBB49:
 2376              	.LBB50:
 145:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 2377              		.loc 2 145 0
 2378              		.syntax unified
 2379              	@ 145 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 2380 0020 B3FA83F3 		clz r3, r3
 2381              	@ 0 "" 2
 2382              	.LVL222:
 2383              		.thumb
 2384              		.syntax unified
 2385 0024 DBB2     		uxtb	r3, r3
 2386              	.LBE50:
 2387              	.LBE49:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2388              		.loc 1 2896 0
 2389 0026 C3F11F03 		rsb	r3, r3, #31
 2390              	.LVL223:
 2391              	.LBB51:
 2392 002a 9800     		lsls	r0, r3, #2
 2393 002c C418     		adds	r4, r0, r3
 2394 002e A100     		lsls	r1, r4, #2
 2395 0030 1144     		add	r1, r1, r2
 2396 0032 4C6B     		ldr	r4, [r1, #52]
 2397 0034 6468     		ldr	r4, [r4, #4]
 2398 0036 4C63     		str	r4, [r1, #52]
 2399 0038 02F13001 		add	r1, r2, #48
 2400 003c 1844     		add	r0, r0, r3
 2401 003e 8200     		lsls	r2, r0, #2
 2402 0040 0832     		adds	r2, r2, #8
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 140


 2403 0042 0A44     		add	r2, r2, r1
 2404 0044 9442     		cmp	r4, r2
 2405 0046 06D1     		bne	.L218
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2406              		.loc 1 2896 0 is_stmt 0 discriminator 1
 2407 0048 6068     		ldr	r0, [r4, #4]
 2408 004a 03EB8301 		add	r1, r3, r3, lsl #2
 2409 004e 8A00     		lsls	r2, r1, #2
 2410 0050 0649     		ldr	r1, .L220
 2411 0052 0A44     		add	r2, r2, r1
 2412 0054 5063     		str	r0, [r2, #52]
 2413              	.L218:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2414              		.loc 1 2896 0 discriminator 3
 2415 0056 0549     		ldr	r1, .L220
 2416 0058 03EB8303 		add	r3, r3, r3, lsl #2
 2417              	.LVL224:
 2418 005c 9A00     		lsls	r2, r3, #2
 2419 005e 0A44     		add	r2, r2, r1
 2420 0060 536B     		ldr	r3, [r2, #52]
 2421 0062 DB68     		ldr	r3, [r3, #12]
 2422 0064 C1F8D830 		str	r3, [r1, #216]
 2423              	.LBE51:
 2424              	.LBE48:
2907:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2425              		.loc 1 2907 0 is_stmt 1 discriminator 3
 2426 0068 10BC     		pop	{r4}
 2427              		.cfi_restore 4
 2428              		.cfi_def_cfa_offset 0
 2429 006a 7047     		bx	lr
 2430              	.L221:
 2431              		.align	2
 2432              	.L220:
 2433 006c 00000000 		.word	.LANCHOR0
 2434              		.cfi_endproc
 2435              	.LFE92:
 2436              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2437              		.section	.text.vTaskSuspend,"ax",%progbits
 2438              		.align	2
 2439              		.global	vTaskSuspend
 2440              		.thumb
 2441              		.thumb_func
 2442              		.type	vTaskSuspend, %function
 2443              	vTaskSuspend:
 2444              	.LFB79:
1631:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2445              		.loc 1 1631 0
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 0
 2448              		@ frame_needed = 0, uses_anonymous_args = 0
 2449              	.LVL225:
 2450 0000 38B5     		push	{r3, r4, r5, lr}
 2451              		.cfi_def_cfa_offset 16
 2452              		.cfi_offset 3, -16
 2453              		.cfi_offset 4, -12
 2454              		.cfi_offset 5, -8
 2455              		.cfi_offset 14, -4
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 141


 2456 0002 0446     		mov	r4, r0
1634:..\FreeRTOS/tasks.c **** 		{
 2457              		.loc 1 1634 0
 2458 0004 FFF7FEFF 		bl	vPortEnterCritical
 2459              	.LVL226:
1638:..\FreeRTOS/tasks.c **** 
 2460              		.loc 1 1638 0
 2461 0008 14B9     		cbnz	r4, .L223
1638:..\FreeRTOS/tasks.c **** 
 2462              		.loc 1 1638 0 is_stmt 0 discriminator 1
 2463 000a 2B4B     		ldr	r3, .L232
 2464 000c D3F8D840 		ldr	r4, [r3, #216]
 2465              	.LVL227:
 2466              	.L223:
1644:..\FreeRTOS/tasks.c **** 			{
 2467              		.loc 1 1644 0 is_stmt 1 discriminator 4
 2468 0010 251D     		adds	r5, r4, #4
 2469 0012 2846     		mov	r0, r5
 2470 0014 FFF7FEFF 		bl	uxListRemove
 2471              	.LVL228:
 2472 0018 80B9     		cbnz	r0, .L224
1646:..\FreeRTOS/tasks.c **** 			}
 2473              		.loc 1 1646 0
 2474 001a E26A     		ldr	r2, [r4, #44]
 2475 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2476 0020 8B00     		lsls	r3, r1, #2
 2477 0022 2549     		ldr	r1, .L232
 2478 0024 0B44     		add	r3, r3, r1
 2479 0026 1B6B     		ldr	r3, [r3, #48]
 2480 0028 43B9     		cbnz	r3, .L224
1646:..\FreeRTOS/tasks.c **** 			}
 2481              		.loc 1 1646 0 is_stmt 0 discriminator 1
 2482 002a 0123     		movs	r3, #1
 2483 002c 03FA02F2 		lsl	r2, r3, r2
 2484 0030 D1F8E430 		ldr	r3, [r1, #228]
 2485 0034 23EA0202 		bic	r2, r3, r2
 2486 0038 C1F8E420 		str	r2, [r1, #228]
 2487              	.L224:
1654:..\FreeRTOS/tasks.c **** 			{
 2488              		.loc 1 1654 0 is_stmt 1
 2489 003c A36A     		ldr	r3, [r4, #40]
 2490 003e 1BB1     		cbz	r3, .L225
1656:..\FreeRTOS/tasks.c **** 			}
 2491              		.loc 1 1656 0
 2492 0040 04F11800 		add	r0, r4, #24
 2493 0044 FFF7FEFF 		bl	uxListRemove
 2494              	.LVL229:
 2495              	.L225:
1663:..\FreeRTOS/tasks.c **** 
 2496              		.loc 1 1663 0
 2497 0048 2946     		mov	r1, r5
 2498 004a 1B48     		ldr	r0, .L232
 2499 004c FFF7FEFF 		bl	vListInsertEnd
 2500              	.LVL230:
1667:..\FreeRTOS/tasks.c **** 				{
 2501              		.loc 1 1667 0
 2502 0050 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 142


 2503 0054 DBB2     		uxtb	r3, r3
 2504 0056 012B     		cmp	r3, #1
 2505 0058 02D1     		bne	.L226
1671:..\FreeRTOS/tasks.c **** 				}
 2506              		.loc 1 1671 0
 2507 005a 0023     		movs	r3, #0
 2508 005c 84F84C30 		strb	r3, [r4, #76]
 2509              	.L226:
1676:..\FreeRTOS/tasks.c **** 
 2510              		.loc 1 1676 0
 2511 0060 FFF7FEFF 		bl	vPortExitCritical
 2512              	.LVL231:
1678:..\FreeRTOS/tasks.c **** 		{
 2513              		.loc 1 1678 0
 2514 0064 144B     		ldr	r3, .L232
 2515 0066 D3F8DC30 		ldr	r3, [r3, #220]
 2516 006a 2BB1     		cbz	r3, .L227
1682:..\FreeRTOS/tasks.c **** 			{
 2517              		.loc 1 1682 0
 2518 006c FFF7FEFF 		bl	vPortEnterCritical
 2519              	.LVL232:
1684:..\FreeRTOS/tasks.c **** 			}
 2520              		.loc 1 1684 0
 2521 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2522              	.LVL233:
1686:..\FreeRTOS/tasks.c **** 		}
 2523              		.loc 1 1686 0
 2524 0074 FFF7FEFF 		bl	vPortExitCritical
 2525              	.LVL234:
 2526              	.L227:
1693:..\FreeRTOS/tasks.c **** 		{
 2527              		.loc 1 1693 0
 2528 0078 0F4B     		ldr	r3, .L232
 2529 007a D3F8D830 		ldr	r3, [r3, #216]
 2530 007e 9C42     		cmp	r4, r3
 2531 0080 19D1     		bne	.L222
1695:..\FreeRTOS/tasks.c **** 			{
 2532              		.loc 1 1695 0
 2533 0082 0D4B     		ldr	r3, .L232
 2534 0084 D3F8DC30 		ldr	r3, [r3, #220]
 2535 0088 43B1     		cbz	r3, .L229
1699:..\FreeRTOS/tasks.c **** 			}
 2536              		.loc 1 1699 0
 2537 008a 4FF08052 		mov	r2, #268435456
 2538 008e 0B4B     		ldr	r3, .L232+4
 2539 0090 1A60     		str	r2, [r3]
 2540              		.syntax unified
 2541              	@ 1699 "..\FreeRTOS\tasks.c" 1
 2542 0092 BFF34F8F 		dsb
 2543              	@ 0 "" 2
 2544              	@ 1699 "..\FreeRTOS\tasks.c" 1
 2545 0096 BFF36F8F 		isb
 2546              	@ 0 "" 2
 2547              		.thumb
 2548              		.syntax unified
 2549 009a 38BD     		pop	{r3, r4, r5, pc}
 2550              	.LVL235:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 143


 2551              	.L229:
1706:..\FreeRTOS/tasks.c **** 				{
 2552              		.loc 1 1706 0
 2553 009c 064B     		ldr	r3, .L232
 2554 009e 1A68     		ldr	r2, [r3]
 2555 00a0 D3F8D430 		ldr	r3, [r3, #212]
 2556 00a4 9A42     		cmp	r2, r3
 2557 00a6 04D1     		bne	.L230
1712:..\FreeRTOS/tasks.c **** 				}
 2558              		.loc 1 1712 0
 2559 00a8 0022     		movs	r2, #0
 2560 00aa 034B     		ldr	r3, .L232
 2561 00ac C3F8D820 		str	r2, [r3, #216]
 2562 00b0 38BD     		pop	{r3, r4, r5, pc}
 2563              	.LVL236:
 2564              	.L230:
1716:..\FreeRTOS/tasks.c **** 				}
 2565              		.loc 1 1716 0
 2566 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2567              	.LVL237:
 2568              	.L222:
 2569 00b6 38BD     		pop	{r3, r4, r5, pc}
 2570              	.LVL238:
 2571              	.L233:
 2572              		.align	2
 2573              	.L232:
 2574 00b8 00000000 		.word	.LANCHOR0
 2575 00bc 04ED00E0 		.word	-536810236
 2576              		.cfi_endproc
 2577              	.LFE79:
 2578              		.size	vTaskSuspend, .-vTaskSuspend
 2579              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2580              		.align	2
 2581              		.global	vTaskPlaceOnEventList
 2582              		.thumb
 2583              		.thumb_func
 2584              		.type	vTaskPlaceOnEventList, %function
 2585              	vTaskPlaceOnEventList:
 2586              	.LFB93:
2911:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2587              		.loc 1 2911 0
 2588              		.cfi_startproc
 2589              		@ args = 0, pretend = 0, frame = 0
 2590              		@ frame_needed = 0, uses_anonymous_args = 0
 2591              	.LVL239:
 2592 0000 10B5     		push	{r4, lr}
 2593              		.cfi_def_cfa_offset 8
 2594              		.cfi_offset 4, -8
 2595              		.cfi_offset 14, -4
 2596 0002 0C46     		mov	r4, r1
2921:..\FreeRTOS/tasks.c **** 
 2597              		.loc 1 2921 0
 2598 0004 054B     		ldr	r3, .L236
 2599 0006 D3F8D810 		ldr	r1, [r3, #216]
 2600              	.LVL240:
 2601 000a 1831     		adds	r1, r1, #24
 2602 000c FFF7FEFF 		bl	vListInsert
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 144


 2603              	.LVL241:
2923:..\FreeRTOS/tasks.c **** }
 2604              		.loc 1 2923 0
 2605 0010 0121     		movs	r1, #1
 2606 0012 2046     		mov	r0, r4
 2607 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2608              	.LVL242:
 2609 0018 10BD     		pop	{r4, pc}
 2610              	.LVL243:
 2611              	.L237:
 2612 001a 00BF     		.align	2
 2613              	.L236:
 2614 001c 00000000 		.word	.LANCHOR0
 2615              		.cfi_endproc
 2616              	.LFE93:
 2617              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2618              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2619              		.align	2
 2620              		.global	vTaskPlaceOnUnorderedEventList
 2621              		.thumb
 2622              		.thumb_func
 2623              		.type	vTaskPlaceOnUnorderedEventList, %function
 2624              	vTaskPlaceOnUnorderedEventList:
 2625              	.LFB94:
2928:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2626              		.loc 1 2928 0
 2627              		.cfi_startproc
 2628              		@ args = 0, pretend = 0, frame = 0
 2629              		@ frame_needed = 0, uses_anonymous_args = 0
 2630              	.LVL244:
 2631 0000 10B5     		push	{r4, lr}
 2632              		.cfi_def_cfa_offset 8
 2633              		.cfi_offset 4, -8
 2634              		.cfi_offset 14, -4
 2635 0002 1446     		mov	r4, r2
2938:..\FreeRTOS/tasks.c **** 
 2636              		.loc 1 2938 0
 2637 0004 074B     		ldr	r3, .L240
 2638 0006 D3F8D820 		ldr	r2, [r3, #216]
 2639              	.LVL245:
 2640 000a 41F00041 		orr	r1, r1, #-2147483648
 2641              	.LVL246:
 2642 000e 9161     		str	r1, [r2, #24]
2945:..\FreeRTOS/tasks.c **** 
 2643              		.loc 1 2945 0
 2644 0010 D3F8D810 		ldr	r1, [r3, #216]
 2645 0014 1831     		adds	r1, r1, #24
 2646 0016 FFF7FEFF 		bl	vListInsertEnd
 2647              	.LVL247:
2947:..\FreeRTOS/tasks.c **** }
 2648              		.loc 1 2947 0
 2649 001a 0121     		movs	r1, #1
 2650 001c 2046     		mov	r0, r4
 2651 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2652              	.LVL248:
 2653 0022 10BD     		pop	{r4, pc}
 2654              	.LVL249:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 145


 2655              	.L241:
 2656              		.align	2
 2657              	.L240:
 2658 0024 00000000 		.word	.LANCHOR0
 2659              		.cfi_endproc
 2660              	.LFE94:
 2661              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2662              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2663              		.align	2
 2664              		.global	xTaskRemoveFromEventList
 2665              		.thumb
 2666              		.thumb_func
 2667              		.type	xTaskRemoveFromEventList, %function
 2668              	xTaskRemoveFromEventList:
 2669              	.LFB95:
2985:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2670              		.loc 1 2985 0
 2671              		.cfi_startproc
 2672              		@ args = 0, pretend = 0, frame = 0
 2673              		@ frame_needed = 0, uses_anonymous_args = 0
 2674              	.LVL250:
 2675 0000 38B5     		push	{r3, r4, r5, lr}
 2676              		.cfi_def_cfa_offset 16
 2677              		.cfi_offset 3, -16
 2678              		.cfi_offset 4, -12
 2679              		.cfi_offset 5, -8
 2680              		.cfi_offset 14, -4
3002:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2681              		.loc 1 3002 0
 2682 0002 C368     		ldr	r3, [r0, #12]
 2683 0004 DC68     		ldr	r4, [r3, #12]
 2684              	.LVL251:
3004:..\FreeRTOS/tasks.c **** 
 2685              		.loc 1 3004 0
 2686 0006 04F11805 		add	r5, r4, #24
 2687 000a 2846     		mov	r0, r5
 2688              	.LVL252:
 2689 000c FFF7FEFF 		bl	uxListRemove
 2690              	.LVL253:
3006:..\FreeRTOS/tasks.c **** 	{
 2691              		.loc 1 3006 0
 2692 0010 164B     		ldr	r3, .L248
 2693 0012 D3F8F030 		ldr	r3, [r3, #240]
 2694 0016 B3B9     		cbnz	r3, .L243
3008:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2695              		.loc 1 3008 0
 2696 0018 251D     		adds	r5, r4, #4
 2697 001a 2846     		mov	r0, r5
 2698 001c FFF7FEFF 		bl	uxListRemove
 2699              	.LVL254:
3009:..\FreeRTOS/tasks.c **** 	}
 2700              		.loc 1 3009 0
 2701 0020 E36A     		ldr	r3, [r4, #44]
 2702 0022 0122     		movs	r2, #1
 2703 0024 02FA03F1 		lsl	r1, r2, r3
 2704 0028 1048     		ldr	r0, .L248
 2705 002a D0F8E420 		ldr	r2, [r0, #228]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 146


 2706 002e 0A43     		orrs	r2, r2, r1
 2707 0030 C0F8E420 		str	r2, [r0, #228]
 2708 0034 3030     		adds	r0, r0, #48
 2709 0036 03EB8303 		add	r3, r3, r3, lsl #2
 2710 003a 9A00     		lsls	r2, r3, #2
 2711 003c 2946     		mov	r1, r5
 2712 003e 1044     		add	r0, r0, r2
 2713 0040 FFF7FEFF 		bl	vListInsertEnd
 2714              	.LVL255:
 2715 0044 03E0     		b	.L244
 2716              	.L243:
3015:..\FreeRTOS/tasks.c **** 	}
 2717              		.loc 1 3015 0
 2718 0046 2946     		mov	r1, r5
 2719 0048 0948     		ldr	r0, .L248+4
 2720 004a FFF7FEFF 		bl	vListInsertEnd
 2721              	.LVL256:
 2722              	.L244:
3018:..\FreeRTOS/tasks.c **** 	{
 2723              		.loc 1 3018 0
 2724 004e E26A     		ldr	r2, [r4, #44]
 2725 0050 064B     		ldr	r3, .L248
 2726 0052 D3F8D830 		ldr	r3, [r3, #216]
 2727 0056 DB6A     		ldr	r3, [r3, #44]
 2728 0058 9A42     		cmp	r2, r3
 2729 005a 04D9     		bls	.L246
 2730              	.LVL257:
3027:..\FreeRTOS/tasks.c **** 	}
 2731              		.loc 1 3027 0
 2732 005c 0120     		movs	r0, #1
 2733 005e 034B     		ldr	r3, .L248
 2734 0060 C3F80001 		str	r0, [r3, #256]
 2735 0064 38BD     		pop	{r3, r4, r5, pc}
 2736              	.LVL258:
 2737              	.L246:
3031:..\FreeRTOS/tasks.c **** 	}
 2738              		.loc 1 3031 0
 2739 0066 0020     		movs	r0, #0
 2740              	.LVL259:
3049:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2741              		.loc 1 3049 0
 2742 0068 38BD     		pop	{r3, r4, r5, pc}
 2743              	.LVL260:
 2744              	.L249:
 2745 006a 00BF     		.align	2
 2746              	.L248:
 2747 006c 00000000 		.word	.LANCHOR0
 2748 0070 14000000 		.word	.LANCHOR0+20
 2749              		.cfi_endproc
 2750              	.LFE95:
 2751              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2752              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2753              		.align	2
 2754              		.global	vTaskRemoveFromUnorderedEventList
 2755              		.thumb
 2756              		.thumb_func
 2757              		.type	vTaskRemoveFromUnorderedEventList, %function
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 147


 2758              	vTaskRemoveFromUnorderedEventList:
 2759              	.LFB96:
3053:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2760              		.loc 1 3053 0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 0
 2763              		@ frame_needed = 0, uses_anonymous_args = 0
 2764              	.LVL261:
 2765 0000 70B5     		push	{r4, r5, r6, lr}
 2766              		.cfi_def_cfa_offset 16
 2767              		.cfi_offset 4, -16
 2768              		.cfi_offset 5, -12
 2769              		.cfi_offset 6, -8
 2770              		.cfi_offset 14, -4
3061:..\FreeRTOS/tasks.c **** 
 2771              		.loc 1 3061 0
 2772 0002 41F00041 		orr	r1, r1, #-2147483648
 2773              	.LVL262:
 2774 0006 0160     		str	r1, [r0]
3065:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2775              		.loc 1 3065 0
 2776 0008 C568     		ldr	r5, [r0, #12]
 2777              	.LVL263:
3067:..\FreeRTOS/tasks.c **** 
 2778              		.loc 1 3067 0
 2779 000a FFF7FEFF 		bl	uxListRemove
 2780              	.LVL264:
3072:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2781              		.loc 1 3072 0
 2782 000e 2E1D     		adds	r6, r5, #4
 2783 0010 3046     		mov	r0, r6
 2784 0012 FFF7FEFF 		bl	uxListRemove
 2785              	.LVL265:
3073:..\FreeRTOS/tasks.c **** 
 2786              		.loc 1 3073 0
 2787 0016 EB6A     		ldr	r3, [r5, #44]
 2788 0018 0122     		movs	r2, #1
 2789 001a 02FA03F1 		lsl	r1, r2, r3
 2790 001e 0C4C     		ldr	r4, .L253
 2791 0020 D4F8E420 		ldr	r2, [r4, #228]
 2792 0024 0A43     		orrs	r2, r2, r1
 2793 0026 C4F8E420 		str	r2, [r4, #228]
 2794 002a 04F13000 		add	r0, r4, #48
 2795 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2796 0032 9A00     		lsls	r2, r3, #2
 2797 0034 3146     		mov	r1, r6
 2798 0036 1044     		add	r0, r0, r2
 2799 0038 FFF7FEFF 		bl	vListInsertEnd
 2800              	.LVL266:
3075:..\FreeRTOS/tasks.c **** 	{
 2801              		.loc 1 3075 0
 2802 003c EA6A     		ldr	r2, [r5, #44]
 2803 003e D4F8D830 		ldr	r3, [r4, #216]
 2804 0042 DB6A     		ldr	r3, [r3, #44]
 2805 0044 9A42     		cmp	r2, r3
 2806 0046 02D9     		bls	.L250
3081:..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 148


 2807              		.loc 1 3081 0
 2808 0048 0122     		movs	r2, #1
 2809 004a C4F80021 		str	r2, [r4, #256]
 2810              	.L250:
 2811 004e 70BD     		pop	{r4, r5, r6, pc}
 2812              	.LVL267:
 2813              	.L254:
 2814              		.align	2
 2815              	.L253:
 2816 0050 00000000 		.word	.LANCHOR0
 2817              		.cfi_endproc
 2818              	.LFE96:
 2819              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2820              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2821              		.align	2
 2822              		.global	vTaskSetTimeOutState
 2823              		.thumb
 2824              		.thumb_func
 2825              		.type	vTaskSetTimeOutState, %function
 2826              	vTaskSetTimeOutState:
 2827              	.LFB97:
3087:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 2828              		.loc 1 3087 0
 2829              		.cfi_startproc
 2830              		@ args = 0, pretend = 0, frame = 0
 2831              		@ frame_needed = 0, uses_anonymous_args = 0
 2832              	.LVL268:
 2833 0000 10B5     		push	{r4, lr}
 2834              		.cfi_def_cfa_offset 8
 2835              		.cfi_offset 4, -8
 2836              		.cfi_offset 14, -4
 2837 0002 0446     		mov	r4, r0
3089:..\FreeRTOS/tasks.c **** 	{
 2838              		.loc 1 3089 0
 2839 0004 FFF7FEFF 		bl	vPortEnterCritical
 2840              	.LVL269:
3091:..\FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2841              		.loc 1 3091 0
 2842 0008 044B     		ldr	r3, .L257
 2843 000a D3F8F820 		ldr	r2, [r3, #248]
 2844 000e 2260     		str	r2, [r4]
3092:..\FreeRTOS/tasks.c **** 	}
 2845              		.loc 1 3092 0
 2846 0010 D3F8EC30 		ldr	r3, [r3, #236]
 2847 0014 6360     		str	r3, [r4, #4]
3094:..\FreeRTOS/tasks.c **** }
 2848              		.loc 1 3094 0
 2849 0016 FFF7FEFF 		bl	vPortExitCritical
 2850              	.LVL270:
 2851 001a 10BD     		pop	{r4, pc}
 2852              	.LVL271:
 2853              	.L258:
 2854              		.align	2
 2855              	.L257:
 2856 001c 00000000 		.word	.LANCHOR0
 2857              		.cfi_endproc
 2858              	.LFE97:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 149


 2859              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2860              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2861              		.align	2
 2862              		.global	vTaskInternalSetTimeOutState
 2863              		.thumb
 2864              		.thumb_func
 2865              		.type	vTaskInternalSetTimeOutState, %function
 2866              	vTaskInternalSetTimeOutState:
 2867              	.LFB98:
3099:..\FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2868              		.loc 1 3099 0
 2869              		.cfi_startproc
 2870              		@ args = 0, pretend = 0, frame = 0
 2871              		@ frame_needed = 0, uses_anonymous_args = 0
 2872              		@ link register save eliminated.
 2873              	.LVL272:
3101:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2874              		.loc 1 3101 0
 2875 0000 034B     		ldr	r3, .L260
 2876 0002 D3F8F820 		ldr	r2, [r3, #248]
 2877 0006 0260     		str	r2, [r0]
3102:..\FreeRTOS/tasks.c **** }
 2878              		.loc 1 3102 0
 2879 0008 D3F8EC30 		ldr	r3, [r3, #236]
 2880 000c 4360     		str	r3, [r0, #4]
 2881 000e 7047     		bx	lr
 2882              	.L261:
 2883              		.align	2
 2884              	.L260:
 2885 0010 00000000 		.word	.LANCHOR0
 2886              		.cfi_endproc
 2887              	.LFE98:
 2888              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2889              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2890              		.align	2
 2891              		.global	xTaskCheckForTimeOut
 2892              		.thumb
 2893              		.thumb_func
 2894              		.type	xTaskCheckForTimeOut, %function
 2895              	xTaskCheckForTimeOut:
 2896              	.LFB99:
3107:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 2897              		.loc 1 3107 0
 2898              		.cfi_startproc
 2899              		@ args = 0, pretend = 0, frame = 0
 2900              		@ frame_needed = 0, uses_anonymous_args = 0
 2901              	.LVL273:
 2902 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2903              		.cfi_def_cfa_offset 24
 2904              		.cfi_offset 3, -24
 2905              		.cfi_offset 4, -20
 2906              		.cfi_offset 5, -16
 2907              		.cfi_offset 6, -12
 2908              		.cfi_offset 7, -8
 2909              		.cfi_offset 14, -4
 2910 0002 0446     		mov	r4, r0
 2911 0004 0D46     		mov	r5, r1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 150


3113:..\FreeRTOS/tasks.c **** 	{
 2912              		.loc 1 3113 0
 2913 0006 FFF7FEFF 		bl	vPortEnterCritical
 2914              	.LVL274:
 2915              	.LBB52:
3116:..\FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2916              		.loc 1 3116 0
 2917 000a 124B     		ldr	r3, .L269
 2918 000c D3F8EC10 		ldr	r1, [r3, #236]
 2919              	.LVL275:
3117:..\FreeRTOS/tasks.c **** 
 2920              		.loc 1 3117 0
 2921 0010 6268     		ldr	r2, [r4, #4]
 2922 0012 881A     		subs	r0, r1, r2
 2923              	.LVL276:
3131:..\FreeRTOS/tasks.c **** 			{
 2924              		.loc 1 3131 0
 2925 0014 2B68     		ldr	r3, [r5]
 2926 0016 B3F1FF3F 		cmp	r3, #-1
 2927 001a 14D0     		beq	.L266
3141:..\FreeRTOS/tasks.c **** 		{
 2928              		.loc 1 3141 0
 2929 001c 2768     		ldr	r7, [r4]
 2930 001e 0D4E     		ldr	r6, .L269
 2931 0020 D6F8F860 		ldr	r6, [r6, #248]
 2932 0024 B742     		cmp	r7, r6
 2933 0026 01D0     		beq	.L264
3141:..\FreeRTOS/tasks.c **** 		{
 2934              		.loc 1 3141 0 is_stmt 0 discriminator 1
 2935 0028 9142     		cmp	r1, r2
 2936 002a 0ED2     		bcs	.L267
 2937              	.L264:
3150:..\FreeRTOS/tasks.c **** 		{
 2938              		.loc 1 3150 0 is_stmt 1
 2939 002c 9842     		cmp	r0, r3
 2940 002e 06D2     		bcs	.L265
3153:..\FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 2941              		.loc 1 3153 0
 2942 0030 1B1A     		subs	r3, r3, r0
 2943 0032 2B60     		str	r3, [r5]
3154:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 2944              		.loc 1 3154 0
 2945 0034 2046     		mov	r0, r4
 2946              	.LVL277:
 2947 0036 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2948              	.LVL278:
3155:..\FreeRTOS/tasks.c **** 		}
 2949              		.loc 1 3155 0
 2950 003a 0024     		movs	r4, #0
 2951              	.LVL279:
 2952 003c 06E0     		b	.L263
 2953              	.LVL280:
 2954              	.L265:
3159:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 2955              		.loc 1 3159 0
 2956 003e 0023     		movs	r3, #0
 2957 0040 2B60     		str	r3, [r5]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 151


 2958              	.LVL281:
3160:..\FreeRTOS/tasks.c **** 		}
 2959              		.loc 1 3160 0
 2960 0042 0124     		movs	r4, #1
 2961              	.LVL282:
 2962 0044 02E0     		b	.L263
 2963              	.LVL283:
 2964              	.L266:
3136:..\FreeRTOS/tasks.c **** 			}
 2965              		.loc 1 3136 0
 2966 0046 0024     		movs	r4, #0
 2967              	.LVL284:
 2968 0048 00E0     		b	.L263
 2969              	.LVL285:
 2970              	.L267:
3148:..\FreeRTOS/tasks.c **** 		}
 2971              		.loc 1 3148 0
 2972 004a 0124     		movs	r4, #1
 2973              	.LVL286:
 2974              	.L263:
 2975              	.LBE52:
3163:..\FreeRTOS/tasks.c **** 
 2976              		.loc 1 3163 0
 2977 004c FFF7FEFF 		bl	vPortExitCritical
 2978              	.LVL287:
3166:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2979              		.loc 1 3166 0
 2980 0050 2046     		mov	r0, r4
 2981 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2982              	.LVL288:
 2983              	.L270:
 2984              		.align	2
 2985              	.L269:
 2986 0054 00000000 		.word	.LANCHOR0
 2987              		.cfi_endproc
 2988              	.LFE99:
 2989              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2990              		.section	.text.vTaskMissedYield,"ax",%progbits
 2991              		.align	2
 2992              		.global	vTaskMissedYield
 2993              		.thumb
 2994              		.thumb_func
 2995              		.type	vTaskMissedYield, %function
 2996              	vTaskMissedYield:
 2997              	.LFB100:
3170:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 2998              		.loc 1 3170 0
 2999              		.cfi_startproc
 3000              		@ args = 0, pretend = 0, frame = 0
 3001              		@ frame_needed = 0, uses_anonymous_args = 0
 3002              		@ link register save eliminated.
3171:..\FreeRTOS/tasks.c **** }
 3003              		.loc 1 3171 0
 3004 0000 0122     		movs	r2, #1
 3005 0002 024B     		ldr	r3, .L272
 3006 0004 C3F80021 		str	r2, [r3, #256]
 3007 0008 7047     		bx	lr
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 152


 3008              	.L273:
 3009 000a 00BF     		.align	2
 3010              	.L272:
 3011 000c 00000000 		.word	.LANCHOR0
 3012              		.cfi_endproc
 3013              	.LFE100:
 3014              		.size	vTaskMissedYield, .-vTaskMissedYield
 3015              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3016              		.align	2
 3017              		.global	uxTaskGetStackHighWaterMark
 3018              		.thumb
 3019              		.thumb_func
 3020              		.type	uxTaskGetStackHighWaterMark, %function
 3021              	uxTaskGetStackHighWaterMark:
 3022              	.LFB105:
3649:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3023              		.loc 1 3649 0
 3024              		.cfi_startproc
 3025              		@ args = 0, pretend = 0, frame = 0
 3026              		@ frame_needed = 0, uses_anonymous_args = 0
 3027              	.LVL289:
 3028 0000 08B5     		push	{r3, lr}
 3029              		.cfi_def_cfa_offset 8
 3030              		.cfi_offset 3, -8
 3031              		.cfi_offset 14, -4
3654:..\FreeRTOS/tasks.c **** 
 3032              		.loc 1 3654 0
 3033 0002 0346     		mov	r3, r0
 3034 0004 10B9     		cbnz	r0, .L275
3654:..\FreeRTOS/tasks.c **** 
 3035              		.loc 1 3654 0 is_stmt 0 discriminator 1
 3036 0006 034B     		ldr	r3, .L277
 3037 0008 D3F8D830 		ldr	r3, [r3, #216]
 3038              	.LVL290:
 3039              	.L275:
3666:..\FreeRTOS/tasks.c **** 
 3040              		.loc 1 3666 0 is_stmt 1 discriminator 4
 3041 000c 186B     		ldr	r0, [r3, #48]
 3042 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3043              	.LVL291:
3669:..\FreeRTOS/tasks.c **** 
 3044              		.loc 1 3669 0 discriminator 4
 3045 0012 08BD     		pop	{r3, pc}
 3046              	.L278:
 3047              		.align	2
 3048              	.L277:
 3049 0014 00000000 		.word	.LANCHOR0
 3050              		.cfi_endproc
 3051              	.LFE105:
 3052              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3053              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3054              		.align	2
 3055              		.global	xTaskGetCurrentTaskHandle
 3056              		.thumb
 3057              		.thumb_func
 3058              		.type	xTaskGetCurrentTaskHandle, %function
 3059              	xTaskGetCurrentTaskHandle:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 153


 3060              	.LFB108:
3757:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 3061              		.loc 1 3757 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 0
 3064              		@ frame_needed = 0, uses_anonymous_args = 0
 3065              		@ link register save eliminated.
3763:..\FreeRTOS/tasks.c **** 
 3066              		.loc 1 3763 0
 3067 0000 014B     		ldr	r3, .L280
 3068 0002 D3F8D800 		ldr	r0, [r3, #216]
 3069              	.LVL292:
3766:..\FreeRTOS/tasks.c **** 
 3070              		.loc 1 3766 0
 3071 0006 7047     		bx	lr
 3072              	.L281:
 3073              		.align	2
 3074              	.L280:
 3075 0008 00000000 		.word	.LANCHOR0
 3076              		.cfi_endproc
 3077              	.LFE108:
 3078              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3079              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3080              		.align	2
 3081              		.global	xTaskPriorityInherit
 3082              		.thumb
 3083              		.thumb_func
 3084              		.type	xTaskPriorityInherit, %function
 3085              	xTaskPriorityInherit:
 3086              	.LFB109:
3802:..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3087              		.loc 1 3802 0
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 0
 3090              		@ frame_needed = 0, uses_anonymous_args = 0
 3091              	.LVL293:
3809:..\FreeRTOS/tasks.c **** 		{
 3092              		.loc 1 3809 0
 3093 0000 0028     		cmp	r0, #0
 3094 0002 5CD0     		beq	.L289
3802:..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3095              		.loc 1 3802 0
 3096 0004 38B5     		push	{r3, r4, r5, lr}
 3097              		.cfi_def_cfa_offset 16
 3098              		.cfi_offset 3, -16
 3099              		.cfi_offset 4, -12
 3100              		.cfi_offset 5, -8
 3101              		.cfi_offset 14, -4
 3102 0006 0346     		mov	r3, r0
3814:..\FreeRTOS/tasks.c **** 			{
 3103              		.loc 1 3814 0
 3104 0008 C26A     		ldr	r2, [r0, #44]
 3105 000a 2F49     		ldr	r1, .L293
 3106 000c D1F8D810 		ldr	r1, [r1, #216]
 3107 0010 C96A     		ldr	r1, [r1, #44]
 3108 0012 8A42     		cmp	r2, r1
 3109 0014 4AD2     		bcs	.L284
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 154


3819:..\FreeRTOS/tasks.c **** 				{
 3110              		.loc 1 3819 0
 3111 0016 8169     		ldr	r1, [r0, #24]
 3112 0018 0029     		cmp	r1, #0
 3113 001a 06DB     		blt	.L285
3821:..\FreeRTOS/tasks.c **** 				}
 3114              		.loc 1 3821 0
 3115 001c 2A49     		ldr	r1, .L293
 3116 001e D1F8D810 		ldr	r1, [r1, #216]
 3117 0022 C96A     		ldr	r1, [r1, #44]
 3118 0024 C1F10501 		rsb	r1, r1, #5
 3119 0028 8161     		str	r1, [r0, #24]
 3120              	.L285:
3830:..\FreeRTOS/tasks.c **** 				{
 3121              		.loc 1 3830 0
 3122 002a 5869     		ldr	r0, [r3, #20]
 3123              	.LVL294:
 3124 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3125 0030 9100     		lsls	r1, r2, #2
 3126 0032 264A     		ldr	r2, .L293+4
 3127 0034 1144     		add	r1, r1, r2
 3128 0036 8842     		cmp	r0, r1
 3129 0038 01D1     		bne	.L290
 3130 003a 0122     		movs	r2, #1
 3131 003c 00E0     		b	.L286
 3132              	.L290:
 3133 003e 0022     		movs	r2, #0
 3134              	.L286:
3830:..\FreeRTOS/tasks.c **** 				{
 3135              		.loc 1 3830 0 is_stmt 0 discriminator 4
 3136 0040 6AB3     		cbz	r2, .L287
 3137 0042 1C46     		mov	r4, r3
3832:..\FreeRTOS/tasks.c **** 					{
 3138              		.loc 1 3832 0 is_stmt 1
 3139 0044 1D1D     		adds	r5, r3, #4
 3140 0046 2846     		mov	r0, r5
 3141 0048 FFF7FEFF 		bl	uxListRemove
 3142              	.LVL295:
 3143 004c 80B9     		cbnz	r0, .L288
3834:..\FreeRTOS/tasks.c **** 					}
 3144              		.loc 1 3834 0
 3145 004e E26A     		ldr	r2, [r4, #44]
 3146 0050 02EB8201 		add	r1, r2, r2, lsl #2
 3147 0054 8B00     		lsls	r3, r1, #2
 3148 0056 1C49     		ldr	r1, .L293
 3149 0058 0B44     		add	r3, r3, r1
 3150 005a 1B6B     		ldr	r3, [r3, #48]
 3151 005c 43B9     		cbnz	r3, .L288
3834:..\FreeRTOS/tasks.c **** 					}
 3152              		.loc 1 3834 0 is_stmt 0 discriminator 1
 3153 005e 0123     		movs	r3, #1
 3154 0060 03FA02F2 		lsl	r2, r3, r2
 3155 0064 D1F8E430 		ldr	r3, [r1, #228]
 3156 0068 23EA0202 		bic	r2, r3, r2
 3157 006c C1F8E420 		str	r2, [r1, #228]
 3158              	.L288:
3842:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 155


 3159              		.loc 1 3842 0 is_stmt 1
 3160 0070 1548     		ldr	r0, .L293
 3161 0072 D0F8D830 		ldr	r3, [r0, #216]
 3162 0076 DB6A     		ldr	r3, [r3, #44]
 3163 0078 E362     		str	r3, [r4, #44]
3843:..\FreeRTOS/tasks.c **** 				}
 3164              		.loc 1 3843 0
 3165 007a 0124     		movs	r4, #1
 3166              	.LVL296:
 3167 007c 04FA03F1 		lsl	r1, r4, r3
 3168 0080 D0F8E420 		ldr	r2, [r0, #228]
 3169 0084 0A43     		orrs	r2, r2, r1
 3170 0086 C0F8E420 		str	r2, [r0, #228]
 3171 008a 3030     		adds	r0, r0, #48
 3172 008c 03EB8303 		add	r3, r3, r3, lsl #2
 3173 0090 9A00     		lsls	r2, r3, #2
 3174 0092 2946     		mov	r1, r5
 3175 0094 1044     		add	r0, r0, r2
 3176 0096 FFF7FEFF 		bl	vListInsertEnd
 3177              	.LVL297:
3854:..\FreeRTOS/tasks.c **** 			}
 3178              		.loc 1 3854 0
 3179 009a 2046     		mov	r0, r4
 3180 009c 38BD     		pop	{r3, r4, r5, pc}
 3181              	.LVL298:
 3182              	.L287:
3848:..\FreeRTOS/tasks.c **** 				}
 3183              		.loc 1 3848 0
 3184 009e 0A4A     		ldr	r2, .L293
 3185 00a0 D2F8D820 		ldr	r2, [r2, #216]
 3186 00a4 D26A     		ldr	r2, [r2, #44]
 3187 00a6 DA62     		str	r2, [r3, #44]
3854:..\FreeRTOS/tasks.c **** 			}
 3188              		.loc 1 3854 0
 3189 00a8 0120     		movs	r0, #1
 3190 00aa 38BD     		pop	{r3, r4, r5, pc}
 3191              	.LVL299:
 3192              	.L284:
3858:..\FreeRTOS/tasks.c **** 				{
 3193              		.loc 1 3858 0
 3194 00ac 026C     		ldr	r2, [r0, #64]
 3195 00ae 064B     		ldr	r3, .L293
 3196 00b0 D3F8D830 		ldr	r3, [r3, #216]
 3197 00b4 DB6A     		ldr	r3, [r3, #44]
 3198 00b6 9A42     		cmp	r2, r3
 3199 00b8 03D3     		bcc	.L291
3804:..\FreeRTOS/tasks.c **** 
 3200              		.loc 1 3804 0
 3201 00ba 0020     		movs	r0, #0
 3202              	.LVL300:
 3203 00bc 38BD     		pop	{r3, r4, r5, pc}
 3204              	.LVL301:
 3205              	.L289:
 3206              		.cfi_def_cfa_offset 0
 3207              		.cfi_restore 3
 3208              		.cfi_restore 4
 3209              		.cfi_restore 5
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 156


 3210              		.cfi_restore 14
 3211 00be 0020     		movs	r0, #0
 3212              	.LVL302:
3881:..\FreeRTOS/tasks.c **** 
 3213              		.loc 1 3881 0
 3214 00c0 7047     		bx	lr
 3215              	.LVL303:
 3216              	.L291:
 3217              		.cfi_def_cfa_offset 16
 3218              		.cfi_offset 3, -16
 3219              		.cfi_offset 4, -12
 3220              		.cfi_offset 5, -8
 3221              		.cfi_offset 14, -4
3867:..\FreeRTOS/tasks.c **** 				}
 3222              		.loc 1 3867 0
 3223 00c2 0120     		movs	r0, #1
 3224              	.LVL304:
3881:..\FreeRTOS/tasks.c **** 
 3225              		.loc 1 3881 0
 3226 00c4 38BD     		pop	{r3, r4, r5, pc}
 3227              	.L294:
 3228 00c6 00BF     		.align	2
 3229              	.L293:
 3230 00c8 00000000 		.word	.LANCHOR0
 3231 00cc 30000000 		.word	.LANCHOR0+48
 3232              		.cfi_endproc
 3233              	.LFE109:
 3234              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3235              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3236              		.align	2
 3237              		.global	xTaskPriorityDisinherit
 3238              		.thumb
 3239              		.thumb_func
 3240              		.type	xTaskPriorityDisinherit, %function
 3241              	xTaskPriorityDisinherit:
 3242              	.LFB110:
3889:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3243              		.loc 1 3889 0
 3244              		.cfi_startproc
 3245              		@ args = 0, pretend = 0, frame = 0
 3246              		@ frame_needed = 0, uses_anonymous_args = 0
 3247              	.LVL305:
3893:..\FreeRTOS/tasks.c **** 		{
 3248              		.loc 1 3893 0
 3249 0000 0028     		cmp	r0, #0
 3250 0002 38D0     		beq	.L298
3889:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3251              		.loc 1 3889 0
 3252 0004 38B5     		push	{r3, r4, r5, lr}
 3253              		.cfi_def_cfa_offset 16
 3254              		.cfi_offset 3, -16
 3255              		.cfi_offset 4, -12
 3256              		.cfi_offset 5, -8
 3257              		.cfi_offset 14, -4
 3258 0006 0346     		mov	r3, r0
3901:..\FreeRTOS/tasks.c **** 
 3259              		.loc 1 3901 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 157


 3260 0008 426C     		ldr	r2, [r0, #68]
 3261 000a 013A     		subs	r2, r2, #1
 3262 000c 4264     		str	r2, [r0, #68]
3905:..\FreeRTOS/tasks.c **** 			{
 3263              		.loc 1 3905 0
 3264 000e C06A     		ldr	r0, [r0, #44]
 3265              	.LVL306:
 3266 0010 196C     		ldr	r1, [r3, #64]
 3267 0012 8842     		cmp	r0, r1
 3268 0014 31D0     		beq	.L299
3908:..\FreeRTOS/tasks.c **** 				{
 3269              		.loc 1 3908 0
 3270 0016 92BB     		cbnz	r2, .L300
 3271 0018 1C46     		mov	r4, r3
3915:..\FreeRTOS/tasks.c **** 					{
 3272              		.loc 1 3915 0
 3273 001a 1D1D     		adds	r5, r3, #4
 3274 001c 2846     		mov	r0, r5
 3275 001e FFF7FEFF 		bl	uxListRemove
 3276              	.LVL307:
 3277 0022 80B9     		cbnz	r0, .L297
3917:..\FreeRTOS/tasks.c **** 					}
 3278              		.loc 1 3917 0
 3279 0024 E26A     		ldr	r2, [r4, #44]
 3280 0026 02EB8201 		add	r1, r2, r2, lsl #2
 3281 002a 8B00     		lsls	r3, r1, #2
 3282 002c 1549     		ldr	r1, .L302
 3283 002e 0B44     		add	r3, r3, r1
 3284 0030 1B6B     		ldr	r3, [r3, #48]
 3285 0032 43B9     		cbnz	r3, .L297
3917:..\FreeRTOS/tasks.c **** 					}
 3286              		.loc 1 3917 0 is_stmt 0 discriminator 1
 3287 0034 0123     		movs	r3, #1
 3288 0036 03FA02F2 		lsl	r2, r3, r2
 3289 003a D1F8E430 		ldr	r3, [r1, #228]
 3290 003e 23EA0202 		bic	r2, r3, r2
 3291 0042 C1F8E420 		str	r2, [r1, #228]
 3292              	.L297:
3927:..\FreeRTOS/tasks.c **** 
 3293              		.loc 1 3927 0 is_stmt 1
 3294 0046 236C     		ldr	r3, [r4, #64]
 3295 0048 E362     		str	r3, [r4, #44]
3932:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3296              		.loc 1 3932 0
 3297 004a C3F10502 		rsb	r2, r3, #5
 3298 004e A261     		str	r2, [r4, #24]
3933:..\FreeRTOS/tasks.c **** 
 3299              		.loc 1 3933 0
 3300 0050 0124     		movs	r4, #1
 3301              	.LVL308:
 3302 0052 04FA03F1 		lsl	r1, r4, r3
 3303 0056 0B48     		ldr	r0, .L302
 3304 0058 D0F8E420 		ldr	r2, [r0, #228]
 3305 005c 0A43     		orrs	r2, r2, r1
 3306 005e C0F8E420 		str	r2, [r0, #228]
 3307 0062 3030     		adds	r0, r0, #48
 3308 0064 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 158


 3309 0068 9A00     		lsls	r2, r3, #2
 3310 006a 2946     		mov	r1, r5
 3311 006c 1044     		add	r0, r0, r2
 3312 006e FFF7FEFF 		bl	vListInsertEnd
 3313              	.LVL309:
3943:..\FreeRTOS/tasks.c **** 				}
 3314              		.loc 1 3943 0
 3315 0072 2046     		mov	r0, r4
 3316 0074 38BD     		pop	{r3, r4, r5, pc}
 3317              	.LVL310:
 3318              	.L298:
 3319              		.cfi_def_cfa_offset 0
 3320              		.cfi_restore 3
 3321              		.cfi_restore 4
 3322              		.cfi_restore 5
 3323              		.cfi_restore 14
3891:..\FreeRTOS/tasks.c **** 
 3324              		.loc 1 3891 0
 3325 0076 0020     		movs	r0, #0
 3326              	.LVL311:
3961:..\FreeRTOS/tasks.c **** 
 3327              		.loc 1 3961 0
 3328 0078 7047     		bx	lr
 3329              	.LVL312:
 3330              	.L299:
 3331              		.cfi_def_cfa_offset 16
 3332              		.cfi_offset 3, -16
 3333              		.cfi_offset 4, -12
 3334              		.cfi_offset 5, -8
 3335              		.cfi_offset 14, -4
3891:..\FreeRTOS/tasks.c **** 
 3336              		.loc 1 3891 0
 3337 007a 0020     		movs	r0, #0
 3338 007c 38BD     		pop	{r3, r4, r5, pc}
 3339              	.LVL313:
 3340              	.L300:
 3341 007e 0020     		movs	r0, #0
 3342              	.LVL314:
3961:..\FreeRTOS/tasks.c **** 
 3343              		.loc 1 3961 0
 3344 0080 38BD     		pop	{r3, r4, r5, pc}
 3345              	.LVL315:
 3346              	.L303:
 3347 0082 00BF     		.align	2
 3348              	.L302:
 3349 0084 00000000 		.word	.LANCHOR0
 3350              		.cfi_endproc
 3351              	.LFE110:
 3352              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3353              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3354              		.align	2
 3355              		.global	vTaskPriorityDisinheritAfterTimeout
 3356              		.thumb
 3357              		.thumb_func
 3358              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3359              	vTaskPriorityDisinheritAfterTimeout:
 3360              	.LFB111:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 159


3969:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3361              		.loc 1 3969 0
 3362              		.cfi_startproc
 3363              		@ args = 0, pretend = 0, frame = 0
 3364              		@ frame_needed = 0, uses_anonymous_args = 0
 3365              	.LVL316:
3974:..\FreeRTOS/tasks.c **** 		{
 3366              		.loc 1 3974 0
 3367 0000 0028     		cmp	r0, #0
 3368 0002 48D0     		beq	.L312
3969:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3369              		.loc 1 3969 0
 3370 0004 38B5     		push	{r3, r4, r5, lr}
 3371              		.cfi_def_cfa_offset 16
 3372              		.cfi_offset 3, -16
 3373              		.cfi_offset 4, -12
 3374              		.cfi_offset 5, -8
 3375              		.cfi_offset 14, -4
 3376 0006 0346     		mov	r3, r0
3984:..\FreeRTOS/tasks.c **** 			{
 3377              		.loc 1 3984 0
 3378 0008 026C     		ldr	r2, [r0, #64]
 3379 000a 8A42     		cmp	r2, r1
 3380 000c 00D2     		bcs	.L306
3986:..\FreeRTOS/tasks.c **** 			}
 3381              		.loc 1 3986 0
 3382 000e 0A46     		mov	r2, r1
 3383              	.L306:
 3384              	.LVL317:
3994:..\FreeRTOS/tasks.c **** 			{
 3385              		.loc 1 3994 0
 3386 0010 D96A     		ldr	r1, [r3, #44]
 3387              	.LVL318:
 3388 0012 8A42     		cmp	r2, r1
 3389 0014 3ED0     		beq	.L304
4000:..\FreeRTOS/tasks.c **** 				{
 3390              		.loc 1 4000 0
 3391 0016 586C     		ldr	r0, [r3, #68]
 3392              	.LVL319:
 3393 0018 0128     		cmp	r0, #1
 3394 001a 3BD1     		bne	.L304
 3395              	.LVL320:
4012:..\FreeRTOS/tasks.c **** 
 3396              		.loc 1 4012 0
 3397 001c DA62     		str	r2, [r3, #44]
4016:..\FreeRTOS/tasks.c **** 					{
 3398              		.loc 1 4016 0
 3399 001e 9869     		ldr	r0, [r3, #24]
 3400 0020 0028     		cmp	r0, #0
 3401 0022 02DB     		blt	.L307
4018:..\FreeRTOS/tasks.c **** 					}
 3402              		.loc 1 4018 0
 3403 0024 C2F10502 		rsb	r2, r2, #5
 3404              	.LVL321:
 3405 0028 9A61     		str	r2, [r3, #24]
 3406              	.L307:
4031:..\FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 160


 3407              		.loc 1 4031 0
 3408 002a 5869     		ldr	r0, [r3, #20]
 3409 002c 01EB8101 		add	r1, r1, r1, lsl #2
 3410              	.LVL322:
 3411 0030 8A00     		lsls	r2, r1, #2
 3412 0032 1949     		ldr	r1, .L313
 3413 0034 0A44     		add	r2, r2, r1
 3414 0036 9042     		cmp	r0, r2
 3415 0038 01D1     		bne	.L310
 3416 003a 0122     		movs	r2, #1
 3417 003c 00E0     		b	.L308
 3418              	.L310:
 3419 003e 0022     		movs	r2, #0
 3420              	.L308:
4031:..\FreeRTOS/tasks.c **** 					{
 3421              		.loc 1 4031 0 is_stmt 0 discriminator 4
 3422 0040 42B3     		cbz	r2, .L304
 3423 0042 1C46     		mov	r4, r3
4033:..\FreeRTOS/tasks.c **** 						{
 3424              		.loc 1 4033 0 is_stmt 1
 3425 0044 1D1D     		adds	r5, r3, #4
 3426 0046 2846     		mov	r0, r5
 3427 0048 FFF7FEFF 		bl	uxListRemove
 3428              	.LVL323:
 3429 004c 80B9     		cbnz	r0, .L309
4035:..\FreeRTOS/tasks.c **** 						}
 3430              		.loc 1 4035 0
 3431 004e E26A     		ldr	r2, [r4, #44]
 3432 0050 02EB8201 		add	r1, r2, r2, lsl #2
 3433 0054 8B00     		lsls	r3, r1, #2
 3434 0056 1149     		ldr	r1, .L313+4
 3435 0058 0B44     		add	r3, r3, r1
 3436 005a 1B6B     		ldr	r3, [r3, #48]
 3437 005c 43B9     		cbnz	r3, .L309
4035:..\FreeRTOS/tasks.c **** 						}
 3438              		.loc 1 4035 0 is_stmt 0 discriminator 1
 3439 005e 0123     		movs	r3, #1
 3440 0060 03FA02F2 		lsl	r2, r3, r2
 3441 0064 D1F8E430 		ldr	r3, [r1, #228]
 3442 0068 23EA0202 		bic	r2, r3, r2
 3443 006c C1F8E420 		str	r2, [r1, #228]
 3444              	.L309:
4042:..\FreeRTOS/tasks.c **** 					}
 3445              		.loc 1 4042 0 is_stmt 1
 3446 0070 E36A     		ldr	r3, [r4, #44]
 3447 0072 0122     		movs	r2, #1
 3448 0074 02FA03F1 		lsl	r1, r2, r3
 3449 0078 0848     		ldr	r0, .L313+4
 3450 007a D0F8E420 		ldr	r2, [r0, #228]
 3451 007e 0A43     		orrs	r2, r2, r1
 3452 0080 C0F8E420 		str	r2, [r0, #228]
 3453 0084 3030     		adds	r0, r0, #48
 3454 0086 03EB8303 		add	r3, r3, r3, lsl #2
 3455 008a 9A00     		lsls	r2, r3, #2
 3456 008c 2946     		mov	r1, r5
 3457 008e 1044     		add	r0, r0, r2
 3458 0090 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 161


 3459              	.LVL324:
 3460              	.L304:
 3461 0094 38BD     		pop	{r3, r4, r5, pc}
 3462              	.LVL325:
 3463              	.L312:
 3464              		.cfi_def_cfa_offset 0
 3465              		.cfi_restore 3
 3466              		.cfi_restore 4
 3467              		.cfi_restore 5
 3468              		.cfi_restore 14
 3469 0096 7047     		bx	lr
 3470              	.L314:
 3471              		.align	2
 3472              	.L313:
 3473 0098 30000000 		.word	.LANCHOR0+48
 3474 009c 00000000 		.word	.LANCHOR0
 3475              		.cfi_endproc
 3476              	.LFE111:
 3477              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3478              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3479              		.align	2
 3480              		.global	uxTaskResetEventItemValue
 3481              		.thumb
 3482              		.thumb_func
 3483              		.type	uxTaskResetEventItemValue, %function
 3484              	uxTaskResetEventItemValue:
 3485              	.LFB112:
4380:..\FreeRTOS/tasks.c **** TickType_t uxReturn;
 3486              		.loc 1 4380 0
 3487              		.cfi_startproc
 3488              		@ args = 0, pretend = 0, frame = 0
 3489              		@ frame_needed = 0, uses_anonymous_args = 0
 3490              		@ link register save eliminated.
4383:..\FreeRTOS/tasks.c **** 
 3491              		.loc 1 4383 0
 3492 0000 064B     		ldr	r3, .L316
 3493 0002 D3F8D820 		ldr	r2, [r3, #216]
 3494 0006 9069     		ldr	r0, [r2, #24]
 3495              	.LVL326:
4387:..\FreeRTOS/tasks.c **** 
 3496              		.loc 1 4387 0
 3497 0008 D3F8D820 		ldr	r2, [r3, #216]
 3498 000c D3F8D830 		ldr	r3, [r3, #216]
 3499 0010 DB6A     		ldr	r3, [r3, #44]
 3500 0012 C3F10503 		rsb	r3, r3, #5
 3501 0016 9361     		str	r3, [r2, #24]
4390:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3502              		.loc 1 4390 0
 3503 0018 7047     		bx	lr
 3504              	.L317:
 3505 001a 00BF     		.align	2
 3506              	.L316:
 3507 001c 00000000 		.word	.LANCHOR0
 3508              		.cfi_endproc
 3509              	.LFE112:
 3510              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3511              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 162


 3512              		.align	2
 3513              		.global	pvTaskIncrementMutexHeldCount
 3514              		.thumb
 3515              		.thumb_func
 3516              		.type	pvTaskIncrementMutexHeldCount, %function
 3517              	pvTaskIncrementMutexHeldCount:
 3518              	.LFB113:
4396:..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3519              		.loc 1 4396 0
 3520              		.cfi_startproc
 3521              		@ args = 0, pretend = 0, frame = 0
 3522              		@ frame_needed = 0, uses_anonymous_args = 0
 3523              		@ link register save eliminated.
4399:..\FreeRTOS/tasks.c **** 		{
 3524              		.loc 1 4399 0
 3525 0000 064B     		ldr	r3, .L320
 3526 0002 D3F8D830 		ldr	r3, [r3, #216]
 3527 0006 2BB1     		cbz	r3, .L319
4401:..\FreeRTOS/tasks.c **** 		}
 3528              		.loc 1 4401 0
 3529 0008 044B     		ldr	r3, .L320
 3530 000a D3F8D820 		ldr	r2, [r3, #216]
 3531 000e 536C     		ldr	r3, [r2, #68]
 3532 0010 0133     		adds	r3, r3, #1
 3533 0012 5364     		str	r3, [r2, #68]
 3534              	.L319:
4404:..\FreeRTOS/tasks.c **** 	}
 3535              		.loc 1 4404 0
 3536 0014 014B     		ldr	r3, .L320
 3537 0016 D3F8D800 		ldr	r0, [r3, #216]
4405:..\FreeRTOS/tasks.c **** 
 3538              		.loc 1 4405 0
 3539 001a 7047     		bx	lr
 3540              	.L321:
 3541              		.align	2
 3542              	.L320:
 3543 001c 00000000 		.word	.LANCHOR0
 3544              		.cfi_endproc
 3545              	.LFE113:
 3546              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3547              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3548              		.align	2
 3549              		.global	ulTaskNotifyTake
 3550              		.thumb
 3551              		.thumb_func
 3552              		.type	ulTaskNotifyTake, %function
 3553              	ulTaskNotifyTake:
 3554              	.LFB114:
4413:..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
 3555              		.loc 1 4413 0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 0
 3558              		@ frame_needed = 0, uses_anonymous_args = 0
 3559              	.LVL327:
 3560 0000 38B5     		push	{r3, r4, r5, lr}
 3561              		.cfi_def_cfa_offset 16
 3562              		.cfi_offset 3, -16
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 163


 3563              		.cfi_offset 4, -12
 3564              		.cfi_offset 5, -8
 3565              		.cfi_offset 14, -4
 3566 0002 0546     		mov	r5, r0
 3567 0004 0C46     		mov	r4, r1
4416:..\FreeRTOS/tasks.c **** 		{
 3568              		.loc 1 4416 0
 3569 0006 FFF7FEFF 		bl	vPortEnterCritical
 3570              	.LVL328:
4419:..\FreeRTOS/tasks.c **** 			{
 3571              		.loc 1 4419 0
 3572 000a 1B4B     		ldr	r3, .L327
 3573 000c D3F8D830 		ldr	r3, [r3, #216]
 3574 0010 9B6C     		ldr	r3, [r3, #72]
 3575 0012 93B9     		cbnz	r3, .L323
4422:..\FreeRTOS/tasks.c **** 
 3576              		.loc 1 4422 0
 3577 0014 184B     		ldr	r3, .L327
 3578 0016 D3F8D830 		ldr	r3, [r3, #216]
 3579 001a 0122     		movs	r2, #1
 3580 001c 83F84C20 		strb	r2, [r3, #76]
4424:..\FreeRTOS/tasks.c **** 				{
 3581              		.loc 1 4424 0
 3582 0020 5CB1     		cbz	r4, .L323
4426:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3583              		.loc 1 4426 0
 3584 0022 1146     		mov	r1, r2
 3585 0024 2046     		mov	r0, r4
 3586 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3587              	.LVL329:
4433:..\FreeRTOS/tasks.c **** 				}
 3588              		.loc 1 4433 0
 3589 002a 4FF08052 		mov	r2, #268435456
 3590 002e 134B     		ldr	r3, .L327+4
 3591 0030 1A60     		str	r2, [r3]
 3592              		.syntax unified
 3593              	@ 4433 "..\FreeRTOS\tasks.c" 1
 3594 0032 BFF34F8F 		dsb
 3595              	@ 0 "" 2
 3596              	@ 4433 "..\FreeRTOS\tasks.c" 1
 3597 0036 BFF36F8F 		isb
 3598              	@ 0 "" 2
 3599              		.thumb
 3600              		.syntax unified
 3601              	.L323:
4445:..\FreeRTOS/tasks.c **** 
 3602              		.loc 1 4445 0
 3603 003a FFF7FEFF 		bl	vPortExitCritical
 3604              	.LVL330:
4447:..\FreeRTOS/tasks.c **** 		{
 3605              		.loc 1 4447 0
 3606 003e FFF7FEFF 		bl	vPortEnterCritical
 3607              	.LVL331:
4450:..\FreeRTOS/tasks.c **** 
 3608              		.loc 1 4450 0
 3609 0042 0D4B     		ldr	r3, .L327
 3610 0044 D3F8D830 		ldr	r3, [r3, #216]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 164


 3611 0048 9C6C     		ldr	r4, [r3, #72]
 3612              	.LVL332:
4452:..\FreeRTOS/tasks.c **** 			{
 3613              		.loc 1 4452 0
 3614 004a 5CB1     		cbz	r4, .L324
4454:..\FreeRTOS/tasks.c **** 				{
 3615              		.loc 1 4454 0
 3616 004c 2DB1     		cbz	r5, .L325
4456:..\FreeRTOS/tasks.c **** 				}
 3617              		.loc 1 4456 0
 3618 004e 0A4B     		ldr	r3, .L327
 3619 0050 D3F8D830 		ldr	r3, [r3, #216]
 3620 0054 0022     		movs	r2, #0
 3621 0056 9A64     		str	r2, [r3, #72]
 3622 0058 04E0     		b	.L324
 3623              	.L325:
4460:..\FreeRTOS/tasks.c **** 				}
 3624              		.loc 1 4460 0
 3625 005a 074B     		ldr	r3, .L327
 3626 005c D3F8D830 		ldr	r3, [r3, #216]
 3627 0060 621E     		subs	r2, r4, #1
 3628 0062 9A64     		str	r2, [r3, #72]
 3629              	.L324:
4468:..\FreeRTOS/tasks.c **** 		}
 3630              		.loc 1 4468 0
 3631 0064 044B     		ldr	r3, .L327
 3632 0066 D3F8D830 		ldr	r3, [r3, #216]
 3633 006a 0022     		movs	r2, #0
 3634 006c 83F84C20 		strb	r2, [r3, #76]
4470:..\FreeRTOS/tasks.c **** 
 3635              		.loc 1 4470 0
 3636 0070 FFF7FEFF 		bl	vPortExitCritical
 3637              	.LVL333:
4473:..\FreeRTOS/tasks.c **** 
 3638              		.loc 1 4473 0
 3639 0074 2046     		mov	r0, r4
 3640 0076 38BD     		pop	{r3, r4, r5, pc}
 3641              	.LVL334:
 3642              	.L328:
 3643              		.align	2
 3644              	.L327:
 3645 0078 00000000 		.word	.LANCHOR0
 3646 007c 04ED00E0 		.word	-536810236
 3647              		.cfi_endproc
 3648              	.LFE114:
 3649              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3650              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3651              		.align	2
 3652              		.global	xTaskNotifyWait
 3653              		.thumb
 3654              		.thumb_func
 3655              		.type	xTaskNotifyWait, %function
 3656              	xTaskNotifyWait:
 3657              	.LFB115:
4481:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 3658              		.loc 1 4481 0
 3659              		.cfi_startproc
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 165


 3660              		@ args = 0, pretend = 0, frame = 0
 3661              		@ frame_needed = 0, uses_anonymous_args = 0
 3662              	.LVL335:
 3663 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3664              		.cfi_def_cfa_offset 24
 3665              		.cfi_offset 3, -24
 3666              		.cfi_offset 4, -20
 3667              		.cfi_offset 5, -16
 3668              		.cfi_offset 6, -12
 3669              		.cfi_offset 7, -8
 3670              		.cfi_offset 14, -4
 3671 0002 0746     		mov	r7, r0
 3672 0004 0D46     		mov	r5, r1
 3673 0006 1446     		mov	r4, r2
 3674 0008 1E46     		mov	r6, r3
4484:..\FreeRTOS/tasks.c **** 		{
 3675              		.loc 1 4484 0
 3676 000a FFF7FEFF 		bl	vPortEnterCritical
 3677              	.LVL336:
4487:..\FreeRTOS/tasks.c **** 			{
 3678              		.loc 1 4487 0
 3679 000e 234B     		ldr	r3, .L335
 3680 0010 D3F8D830 		ldr	r3, [r3, #216]
 3681 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3682 0018 DBB2     		uxtb	r3, r3
 3683 001a 022B     		cmp	r3, #2
 3684 001c 18D0     		beq	.L330
4492:..\FreeRTOS/tasks.c **** 
 3685              		.loc 1 4492 0
 3686 001e 1F4B     		ldr	r3, .L335
 3687 0020 D3F8D820 		ldr	r2, [r3, #216]
 3688 0024 906C     		ldr	r0, [r2, #72]
 3689 0026 20EA0700 		bic	r0, r0, r7
 3690 002a 9064     		str	r0, [r2, #72]
4495:..\FreeRTOS/tasks.c **** 
 3691              		.loc 1 4495 0
 3692 002c D3F8D830 		ldr	r3, [r3, #216]
 3693 0030 0122     		movs	r2, #1
 3694 0032 83F84C20 		strb	r2, [r3, #76]
4497:..\FreeRTOS/tasks.c **** 				{
 3695              		.loc 1 4497 0
 3696 0036 5EB1     		cbz	r6, .L330
4499:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3697              		.loc 1 4499 0
 3698 0038 1146     		mov	r1, r2
 3699 003a 3046     		mov	r0, r6
 3700 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3701              	.LVL337:
4506:..\FreeRTOS/tasks.c **** 				}
 3702              		.loc 1 4506 0
 3703 0040 4FF08052 		mov	r2, #268435456
 3704 0044 164B     		ldr	r3, .L335+4
 3705 0046 1A60     		str	r2, [r3]
 3706              		.syntax unified
 3707              	@ 4506 "..\FreeRTOS\tasks.c" 1
 3708 0048 BFF34F8F 		dsb
 3709              	@ 0 "" 2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 166


 3710              	@ 4506 "..\FreeRTOS\tasks.c" 1
 3711 004c BFF36F8F 		isb
 3712              	@ 0 "" 2
 3713              		.thumb
 3714              		.syntax unified
 3715              	.L330:
4518:..\FreeRTOS/tasks.c **** 
 3716              		.loc 1 4518 0
 3717 0050 FFF7FEFF 		bl	vPortExitCritical
 3718              	.LVL338:
4520:..\FreeRTOS/tasks.c **** 		{
 3719              		.loc 1 4520 0
 3720 0054 FFF7FEFF 		bl	vPortEnterCritical
 3721              	.LVL339:
4524:..\FreeRTOS/tasks.c **** 			{
 3722              		.loc 1 4524 0
 3723 0058 24B1     		cbz	r4, .L331
4528:..\FreeRTOS/tasks.c **** 			}
 3724              		.loc 1 4528 0
 3725 005a 104B     		ldr	r3, .L335
 3726 005c D3F8D830 		ldr	r3, [r3, #216]
 3727 0060 9B6C     		ldr	r3, [r3, #72]
 3728 0062 2360     		str	r3, [r4]
 3729              	.L331:
4535:..\FreeRTOS/tasks.c **** 			{
 3730              		.loc 1 4535 0
 3731 0064 0D4B     		ldr	r3, .L335
 3732 0066 D3F8D830 		ldr	r3, [r3, #216]
 3733 006a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3734 006e DBB2     		uxtb	r3, r3
 3735 0070 022B     		cmp	r3, #2
 3736 0072 08D1     		bne	.L333
4544:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 3737              		.loc 1 4544 0
 3738 0074 094B     		ldr	r3, .L335
 3739 0076 D3F8D820 		ldr	r2, [r3, #216]
 3740 007a 936C     		ldr	r3, [r2, #72]
 3741 007c 23EA0505 		bic	r5, r3, r5
 3742              	.LVL340:
 3743 0080 9564     		str	r5, [r2, #72]
 3744              	.LVL341:
4545:..\FreeRTOS/tasks.c **** 			}
 3745              		.loc 1 4545 0
 3746 0082 0124     		movs	r4, #1
 3747              	.LVL342:
 3748 0084 00E0     		b	.L332
 3749              	.LVL343:
 3750              	.L333:
4538:..\FreeRTOS/tasks.c **** 			}
 3751              		.loc 1 4538 0
 3752 0086 0024     		movs	r4, #0
 3753              	.LVL344:
 3754              	.L332:
4548:..\FreeRTOS/tasks.c **** 		}
 3755              		.loc 1 4548 0
 3756 0088 044B     		ldr	r3, .L335
 3757 008a D3F8D830 		ldr	r3, [r3, #216]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 167


 3758 008e 0022     		movs	r2, #0
 3759 0090 83F84C20 		strb	r2, [r3, #76]
4550:..\FreeRTOS/tasks.c **** 
 3760              		.loc 1 4550 0
 3761 0094 FFF7FEFF 		bl	vPortExitCritical
 3762              	.LVL345:
4553:..\FreeRTOS/tasks.c **** 
 3763              		.loc 1 4553 0
 3764 0098 2046     		mov	r0, r4
 3765 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3766              	.LVL346:
 3767              	.L336:
 3768              		.align	2
 3769              	.L335:
 3770 009c 00000000 		.word	.LANCHOR0
 3771 00a0 04ED00E0 		.word	-536810236
 3772              		.cfi_endproc
 3773              	.LFE115:
 3774              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3775              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3776              		.align	2
 3777              		.global	xTaskGenericNotify
 3778              		.thumb
 3779              		.thumb_func
 3780              		.type	xTaskGenericNotify, %function
 3781              	xTaskGenericNotify:
 3782              	.LFB116:
4561:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 3783              		.loc 1 4561 0
 3784              		.cfi_startproc
 3785              		@ args = 0, pretend = 0, frame = 0
 3786              		@ frame_needed = 0, uses_anonymous_args = 0
 3787              	.LVL347:
 3788 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3789              		.cfi_def_cfa_offset 24
 3790              		.cfi_offset 3, -24
 3791              		.cfi_offset 4, -20
 3792              		.cfi_offset 5, -16
 3793              		.cfi_offset 6, -12
 3794              		.cfi_offset 7, -8
 3795              		.cfi_offset 14, -4
 3796 0002 0446     		mov	r4, r0
 3797 0004 0F46     		mov	r7, r1
 3798 0006 1546     		mov	r5, r2
 3799 0008 1E46     		mov	r6, r3
 3800              	.LVL348:
4569:..\FreeRTOS/tasks.c **** 		{
 3801              		.loc 1 4569 0
 3802 000a FFF7FEFF 		bl	vPortEnterCritical
 3803              	.LVL349:
4571:..\FreeRTOS/tasks.c **** 			{
 3804              		.loc 1 4571 0
 3805 000e 0EB1     		cbz	r6, .L338
4573:..\FreeRTOS/tasks.c **** 			}
 3806              		.loc 1 4573 0
 3807 0010 A36C     		ldr	r3, [r4, #72]
 3808 0012 3360     		str	r3, [r6]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 168


 3809              	.L338:
4576:..\FreeRTOS/tasks.c **** 
 3810              		.loc 1 4576 0
 3811 0014 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3812 0018 DBB2     		uxtb	r3, r3
 3813              	.LVL350:
4578:..\FreeRTOS/tasks.c **** 
 3814              		.loc 1 4578 0
 3815 001a 0222     		movs	r2, #2
 3816 001c 84F84C20 		strb	r2, [r4, #76]
4580:..\FreeRTOS/tasks.c **** 			{
 3817              		.loc 1 4580 0
 3818 0020 6A1E     		subs	r2, r5, #1
 3819 0022 032A     		cmp	r2, #3
 3820 0024 15D8     		bhi	.L346
 3821 0026 DFE802F0 		tbb	[pc, r2]
 3822              	.L341:
 3823 002a 02       		.byte	(.L340-.L341)/2
 3824 002b 07       		.byte	(.L342-.L341)/2
 3825 002c 0C       		.byte	(.L343-.L341)/2
 3826 002d 0F       		.byte	(.L344-.L341)/2
 3827              		.p2align 1
 3828              	.L340:
4583:..\FreeRTOS/tasks.c **** 					break;
 3829              		.loc 1 4583 0
 3830 002e A26C     		ldr	r2, [r4, #72]
 3831 0030 1743     		orrs	r7, r7, r2
 3832              	.LVL351:
 3833 0032 A764     		str	r7, [r4, #72]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3834              		.loc 1 4563 0
 3835 0034 0125     		movs	r5, #1
4584:..\FreeRTOS/tasks.c **** 
 3836              		.loc 1 4584 0
 3837 0036 0FE0     		b	.L339
 3838              	.LVL352:
 3839              	.L342:
4587:..\FreeRTOS/tasks.c **** 					break;
 3840              		.loc 1 4587 0
 3841 0038 A26C     		ldr	r2, [r4, #72]
 3842 003a 0132     		adds	r2, r2, #1
 3843 003c A264     		str	r2, [r4, #72]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3844              		.loc 1 4563 0
 3845 003e 0125     		movs	r5, #1
4588:..\FreeRTOS/tasks.c **** 
 3846              		.loc 1 4588 0
 3847 0040 0AE0     		b	.L339
 3848              	.L343:
4591:..\FreeRTOS/tasks.c **** 					break;
 3849              		.loc 1 4591 0
 3850 0042 A764     		str	r7, [r4, #72]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3851              		.loc 1 4563 0
 3852 0044 0125     		movs	r5, #1
4592:..\FreeRTOS/tasks.c **** 
 3853              		.loc 1 4592 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 169


 3854 0046 07E0     		b	.L339
 3855              	.L344:
4595:..\FreeRTOS/tasks.c **** 					{
 3856              		.loc 1 4595 0
 3857 0048 022B     		cmp	r3, #2
 3858 004a 04D0     		beq	.L347
4597:..\FreeRTOS/tasks.c **** 					}
 3859              		.loc 1 4597 0
 3860 004c A764     		str	r7, [r4, #72]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3861              		.loc 1 4563 0
 3862 004e 0125     		movs	r5, #1
 3863 0050 02E0     		b	.L339
 3864              	.L346:
 3865 0052 0125     		movs	r5, #1
 3866 0054 00E0     		b	.L339
 3867              	.L347:
4602:..\FreeRTOS/tasks.c **** 					}
 3868              		.loc 1 4602 0
 3869 0056 0025     		movs	r5, #0
 3870              	.LVL353:
 3871              	.L339:
4616:..\FreeRTOS/tasks.c **** 			{
 3872              		.loc 1 4616 0
 3873 0058 012B     		cmp	r3, #1
 3874 005a 24D1     		bne	.L345
4618:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3875              		.loc 1 4618 0
 3876 005c 271D     		adds	r7, r4, #4
 3877 005e 3846     		mov	r0, r7
 3878 0060 FFF7FEFF 		bl	uxListRemove
 3879              	.LVL354:
4619:..\FreeRTOS/tasks.c **** 
 3880              		.loc 1 4619 0
 3881 0064 E36A     		ldr	r3, [r4, #44]
 3882 0066 0122     		movs	r2, #1
 3883 0068 02FA03F1 		lsl	r1, r2, r3
 3884 006c 104E     		ldr	r6, .L349
 3885              	.LVL355:
 3886 006e D6F8E420 		ldr	r2, [r6, #228]
 3887 0072 0A43     		orrs	r2, r2, r1
 3888 0074 C6F8E420 		str	r2, [r6, #228]
 3889 0078 06F13000 		add	r0, r6, #48
 3890 007c 03EB8303 		add	r3, r3, r3, lsl #2
 3891 0080 9A00     		lsls	r2, r3, #2
 3892 0082 3946     		mov	r1, r7
 3893 0084 1044     		add	r0, r0, r2
 3894 0086 FFF7FEFF 		bl	vListInsertEnd
 3895              	.LVL356:
4640:..\FreeRTOS/tasks.c **** 				{
 3896              		.loc 1 4640 0
 3897 008a E26A     		ldr	r2, [r4, #44]
 3898 008c D6F8D830 		ldr	r3, [r6, #216]
 3899 0090 DB6A     		ldr	r3, [r3, #44]
 3900 0092 9A42     		cmp	r2, r3
 3901 0094 07D9     		bls	.L345
4644:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 170


 3902              		.loc 1 4644 0
 3903 0096 4FF08052 		mov	r2, #268435456
 3904 009a 064B     		ldr	r3, .L349+4
 3905 009c 1A60     		str	r2, [r3]
 3906              		.syntax unified
 3907              	@ 4644 "..\FreeRTOS\tasks.c" 1
 3908 009e BFF34F8F 		dsb
 3909              	@ 0 "" 2
 3910              	@ 4644 "..\FreeRTOS\tasks.c" 1
 3911 00a2 BFF36F8F 		isb
 3912              	@ 0 "" 2
 3913              		.thumb
 3914              		.syntax unified
 3915              	.L345:
4656:..\FreeRTOS/tasks.c **** 
 3916              		.loc 1 4656 0
 3917 00a6 FFF7FEFF 		bl	vPortExitCritical
 3918              	.LVL357:
4659:..\FreeRTOS/tasks.c **** 
 3919              		.loc 1 4659 0
 3920 00aa 2846     		mov	r0, r5
 3921 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3922              	.LVL358:
 3923              	.L350:
 3924 00ae 00BF     		.align	2
 3925              	.L349:
 3926 00b0 00000000 		.word	.LANCHOR0
 3927 00b4 04ED00E0 		.word	-536810236
 3928              		.cfi_endproc
 3929              	.LFE116:
 3930              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3931              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3932              		.align	2
 3933              		.global	xTaskGenericNotifyFromISR
 3934              		.thumb
 3935              		.thumb_func
 3936              		.type	xTaskGenericNotifyFromISR, %function
 3937              	xTaskGenericNotifyFromISR:
 3938              	.LFB117:
4667:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 3939              		.loc 1 4667 0
 3940              		.cfi_startproc
 3941              		@ args = 4, pretend = 0, frame = 0
 3942              		@ frame_needed = 0, uses_anonymous_args = 0
 3943              	.LVL359:
 3944 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3945              		.cfi_def_cfa_offset 24
 3946              		.cfi_offset 3, -24
 3947              		.cfi_offset 4, -20
 3948              		.cfi_offset 5, -16
 3949              		.cfi_offset 6, -12
 3950              		.cfi_offset 7, -8
 3951              		.cfi_offset 14, -4
 3952              	.LVL360:
 3953              	.LBB53:
 3954              	.LBB54:
 222:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 171


 3955              		.loc 2 222 0
 3956              		.syntax unified
 3957              	@ 222 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 3958 0002 EFF31184 			mrs r4, basepri											
 3959 0006 4FF0A005 		mov r5, #160												
 3960 000a 85F31188 		msr basepri, r5											
 3961 000e BFF36F8F 		isb														
 3962 0012 BFF34F8F 		dsb														
 3963              	
 3964              	@ 0 "" 2
 3965              		.thumb
 3966              		.syntax unified
 3967              	.LBE54:
 3968              	.LBE53:
4697:..\FreeRTOS/tasks.c **** 			{
 3969              		.loc 1 4697 0
 3970 0016 0BB1     		cbz	r3, .L352
4699:..\FreeRTOS/tasks.c **** 			}
 3971              		.loc 1 4699 0
 3972 0018 856C     		ldr	r5, [r0, #72]
 3973 001a 1D60     		str	r5, [r3]
 3974              	.L352:
4702:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3975              		.loc 1 4702 0
 3976 001c 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3977              	.LVL361:
 3978 0020 DBB2     		uxtb	r3, r3
 3979              	.LVL362:
4703:..\FreeRTOS/tasks.c **** 
 3980              		.loc 1 4703 0
 3981 0022 0225     		movs	r5, #2
 3982 0024 80F84C50 		strb	r5, [r0, #76]
4705:..\FreeRTOS/tasks.c **** 			{
 3983              		.loc 1 4705 0
 3984 0028 013A     		subs	r2, r2, #1
 3985              	.LVL363:
 3986 002a 032A     		cmp	r2, #3
 3987 002c 15D8     		bhi	.L363
 3988 002e DFE802F0 		tbb	[pc, r2]
 3989              	.L355:
 3990 0032 02       		.byte	(.L354-.L355)/2
 3991 0033 07       		.byte	(.L356-.L355)/2
 3992 0034 0C       		.byte	(.L357-.L355)/2
 3993 0035 0F       		.byte	(.L358-.L355)/2
 3994              		.p2align 1
 3995              	.L354:
4708:..\FreeRTOS/tasks.c **** 					break;
 3996              		.loc 1 4708 0
 3997 0036 826C     		ldr	r2, [r0, #72]
 3998 0038 1143     		orrs	r1, r1, r2
 3999              	.LVL364:
 4000 003a 8164     		str	r1, [r0, #72]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4001              		.loc 1 4670 0
 4002 003c 0125     		movs	r5, #1
4709:..\FreeRTOS/tasks.c **** 
 4003              		.loc 1 4709 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 172


 4004 003e 0FE0     		b	.L353
 4005              	.LVL365:
 4006              	.L356:
4712:..\FreeRTOS/tasks.c **** 					break;
 4007              		.loc 1 4712 0
 4008 0040 826C     		ldr	r2, [r0, #72]
 4009 0042 0132     		adds	r2, r2, #1
 4010 0044 8264     		str	r2, [r0, #72]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4011              		.loc 1 4670 0
 4012 0046 0125     		movs	r5, #1
4713:..\FreeRTOS/tasks.c **** 
 4013              		.loc 1 4713 0
 4014 0048 0AE0     		b	.L353
 4015              	.L357:
4716:..\FreeRTOS/tasks.c **** 					break;
 4016              		.loc 1 4716 0
 4017 004a 8164     		str	r1, [r0, #72]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4018              		.loc 1 4670 0
 4019 004c 0125     		movs	r5, #1
4717:..\FreeRTOS/tasks.c **** 
 4020              		.loc 1 4717 0
 4021 004e 07E0     		b	.L353
 4022              	.L358:
4720:..\FreeRTOS/tasks.c **** 					{
 4023              		.loc 1 4720 0
 4024 0050 022B     		cmp	r3, #2
 4025 0052 04D0     		beq	.L364
4722:..\FreeRTOS/tasks.c **** 					}
 4026              		.loc 1 4722 0
 4027 0054 8164     		str	r1, [r0, #72]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4028              		.loc 1 4670 0
 4029 0056 0125     		movs	r5, #1
 4030 0058 02E0     		b	.L353
 4031              	.L363:
 4032 005a 0125     		movs	r5, #1
 4033 005c 00E0     		b	.L353
 4034              	.L364:
4727:..\FreeRTOS/tasks.c **** 					}
 4035              		.loc 1 4727 0
 4036 005e 0025     		movs	r5, #0
 4037              	.LVL366:
 4038              	.L353:
4741:..\FreeRTOS/tasks.c **** 			{
 4039              		.loc 1 4741 0
 4040 0060 012B     		cmp	r3, #1
 4041 0062 31D1     		bne	.L359
 4042 0064 0646     		mov	r6, r0
4746:..\FreeRTOS/tasks.c **** 				{
 4043              		.loc 1 4746 0
 4044 0066 1A4B     		ldr	r3, .L366
 4045              	.LVL367:
 4046 0068 D3F8F030 		ldr	r3, [r3, #240]
 4047 006c B3B9     		cbnz	r3, .L360
4748:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 173


 4048              		.loc 1 4748 0
 4049 006e 071D     		adds	r7, r0, #4
 4050 0070 3846     		mov	r0, r7
 4051              	.LVL368:
 4052 0072 FFF7FEFF 		bl	uxListRemove
 4053              	.LVL369:
4749:..\FreeRTOS/tasks.c **** 				}
 4054              		.loc 1 4749 0
 4055 0076 F36A     		ldr	r3, [r6, #44]
 4056 0078 0122     		movs	r2, #1
 4057 007a 02FA03F1 		lsl	r1, r2, r3
 4058 007e 1448     		ldr	r0, .L366
 4059 0080 D0F8E420 		ldr	r2, [r0, #228]
 4060 0084 0A43     		orrs	r2, r2, r1
 4061 0086 C0F8E420 		str	r2, [r0, #228]
 4062 008a 3030     		adds	r0, r0, #48
 4063 008c 03EB8303 		add	r3, r3, r3, lsl #2
 4064 0090 9A00     		lsls	r2, r3, #2
 4065 0092 3946     		mov	r1, r7
 4066 0094 1044     		add	r0, r0, r2
 4067 0096 FFF7FEFF 		bl	vListInsertEnd
 4068              	.LVL370:
 4069 009a 04E0     		b	.L361
 4070              	.LVL371:
 4071              	.L360:
4755:..\FreeRTOS/tasks.c **** 				}
 4072              		.loc 1 4755 0
 4073 009c 00F11801 		add	r1, r0, #24
 4074 00a0 0C48     		ldr	r0, .L366+4
 4075              	.LVL372:
 4076 00a2 FFF7FEFF 		bl	vListInsertEnd
 4077              	.LVL373:
 4078              	.L361:
4758:..\FreeRTOS/tasks.c **** 				{
 4079              		.loc 1 4758 0
 4080 00a6 F26A     		ldr	r2, [r6, #44]
 4081 00a8 094B     		ldr	r3, .L366
 4082 00aa D3F8D830 		ldr	r3, [r3, #216]
 4083 00ae DB6A     		ldr	r3, [r3, #44]
 4084 00b0 9A42     		cmp	r2, r3
 4085 00b2 09D9     		bls	.L359
4762:..\FreeRTOS/tasks.c **** 					{
 4086              		.loc 1 4762 0
 4087 00b4 069B     		ldr	r3, [sp, #24]
 4088 00b6 1BB1     		cbz	r3, .L362
4764:..\FreeRTOS/tasks.c **** 					}
 4089              		.loc 1 4764 0
 4090 00b8 0123     		movs	r3, #1
 4091 00ba 069A     		ldr	r2, [sp, #24]
 4092 00bc 1360     		str	r3, [r2]
 4093 00be 03E0     		b	.L359
 4094              	.L362:
4771:..\FreeRTOS/tasks.c **** 					}
 4095              		.loc 1 4771 0
 4096 00c0 0122     		movs	r2, #1
 4097 00c2 034B     		ldr	r3, .L366
 4098 00c4 C3F80021 		str	r2, [r3, #256]
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 174


 4099              	.LVL374:
 4100              	.L359:
 4101              	.LBB55:
 4102              	.LBB56:
 4103              		.loc 2 240 0
 4104              		.syntax unified
 4105              	@ 240 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 4106 00c8 84F31188 			msr basepri, r4	
 4107              	@ 0 "" 2
 4108              	.LVL375:
 4109              		.thumb
 4110              		.syntax unified
 4111              	.LBE56:
 4112              	.LBE55:
4783:..\FreeRTOS/tasks.c **** 
 4113              		.loc 1 4783 0
 4114 00cc 2846     		mov	r0, r5
 4115 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4116              	.LVL376:
 4117              	.L367:
 4118              		.align	2
 4119              	.L366:
 4120 00d0 00000000 		.word	.LANCHOR0
 4121 00d4 14000000 		.word	.LANCHOR0+20
 4122              		.cfi_endproc
 4123              	.LFE117:
 4124              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4125              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4126              		.align	2
 4127              		.global	vTaskNotifyGiveFromISR
 4128              		.thumb
 4129              		.thumb_func
 4130              		.type	vTaskNotifyGiveFromISR, %function
 4131              	vTaskNotifyGiveFromISR:
 4132              	.LFB118:
4791:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4133              		.loc 1 4791 0
 4134              		.cfi_startproc
 4135              		@ args = 0, pretend = 0, frame = 0
 4136              		@ frame_needed = 0, uses_anonymous_args = 0
 4137              	.LVL377:
 4138 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4139              		.cfi_def_cfa_offset 24
 4140              		.cfi_offset 3, -24
 4141              		.cfi_offset 4, -20
 4142              		.cfi_offset 5, -16
 4143              		.cfi_offset 6, -12
 4144              		.cfi_offset 7, -8
 4145              		.cfi_offset 14, -4
 4146              	.LVL378:
 4147              	.LBB57:
 4148              	.LBB58:
 222:..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4149              		.loc 2 222 0
 4150              		.syntax unified
 4151              	@ 222 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 4152 0002 EFF31185 			mrs r5, basepri											
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 175


 4153 0006 4FF0A003 		mov r3, #160												
 4154 000a 83F31188 		msr basepri, r3											
 4155 000e BFF36F8F 		isb														
 4156 0012 BFF34F8F 		dsb														
 4157              	
 4158              	@ 0 "" 2
 4159              		.thumb
 4160              		.syntax unified
 4161              	.LBE58:
 4162              	.LBE57:
4820:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4163              		.loc 1 4820 0
 4164 0016 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 4165 001a DBB2     		uxtb	r3, r3
 4166              	.LVL379:
4821:..\FreeRTOS/tasks.c **** 
 4167              		.loc 1 4821 0
 4168 001c 0222     		movs	r2, #2
 4169 001e 80F84C20 		strb	r2, [r0, #76]
4825:..\FreeRTOS/tasks.c **** 
 4170              		.loc 1 4825 0
 4171 0022 826C     		ldr	r2, [r0, #72]
 4172 0024 0132     		adds	r2, r2, #1
 4173 0026 8264     		str	r2, [r0, #72]
4831:..\FreeRTOS/tasks.c **** 			{
 4174              		.loc 1 4831 0
 4175 0028 012B     		cmp	r3, #1
 4176 002a 30D1     		bne	.L369
 4177 002c 0E46     		mov	r6, r1
 4178 002e 0446     		mov	r4, r0
4836:..\FreeRTOS/tasks.c **** 				{
 4179              		.loc 1 4836 0
 4180 0030 184B     		ldr	r3, .L374
 4181              	.LVL380:
 4182 0032 D3F8F030 		ldr	r3, [r3, #240]
 4183 0036 B3B9     		cbnz	r3, .L370
4838:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4184              		.loc 1 4838 0
 4185 0038 071D     		adds	r7, r0, #4
 4186 003a 3846     		mov	r0, r7
 4187              	.LVL381:
 4188 003c FFF7FEFF 		bl	uxListRemove
 4189              	.LVL382:
4839:..\FreeRTOS/tasks.c **** 				}
 4190              		.loc 1 4839 0
 4191 0040 E36A     		ldr	r3, [r4, #44]
 4192 0042 0122     		movs	r2, #1
 4193 0044 02FA03F1 		lsl	r1, r2, r3
 4194 0048 1248     		ldr	r0, .L374
 4195 004a D0F8E420 		ldr	r2, [r0, #228]
 4196 004e 0A43     		orrs	r2, r2, r1
 4197 0050 C0F8E420 		str	r2, [r0, #228]
 4198 0054 3030     		adds	r0, r0, #48
 4199 0056 03EB8303 		add	r3, r3, r3, lsl #2
 4200 005a 9A00     		lsls	r2, r3, #2
 4201 005c 3946     		mov	r1, r7
 4202 005e 1044     		add	r0, r0, r2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 176


 4203 0060 FFF7FEFF 		bl	vListInsertEnd
 4204              	.LVL383:
 4205 0064 04E0     		b	.L371
 4206              	.LVL384:
 4207              	.L370:
4845:..\FreeRTOS/tasks.c **** 				}
 4208              		.loc 1 4845 0
 4209 0066 00F11801 		add	r1, r0, #24
 4210              	.LVL385:
 4211 006a 0B48     		ldr	r0, .L374+4
 4212              	.LVL386:
 4213 006c FFF7FEFF 		bl	vListInsertEnd
 4214              	.LVL387:
 4215              	.L371:
4848:..\FreeRTOS/tasks.c **** 				{
 4216              		.loc 1 4848 0
 4217 0070 E26A     		ldr	r2, [r4, #44]
 4218 0072 084B     		ldr	r3, .L374
 4219 0074 D3F8D830 		ldr	r3, [r3, #216]
 4220 0078 DB6A     		ldr	r3, [r3, #44]
 4221 007a 9A42     		cmp	r2, r3
 4222 007c 07D9     		bls	.L369
4852:..\FreeRTOS/tasks.c **** 					{
 4223              		.loc 1 4852 0
 4224 007e 16B1     		cbz	r6, .L372
4854:..\FreeRTOS/tasks.c **** 					}
 4225              		.loc 1 4854 0
 4226 0080 0123     		movs	r3, #1
 4227 0082 3360     		str	r3, [r6]
 4228 0084 03E0     		b	.L369
 4229              	.L372:
4861:..\FreeRTOS/tasks.c **** 					}
 4230              		.loc 1 4861 0
 4231 0086 0122     		movs	r2, #1
 4232 0088 024B     		ldr	r3, .L374
 4233 008a C3F80021 		str	r2, [r3, #256]
 4234              	.LVL388:
 4235              	.L369:
 4236              	.LBB59:
 4237              	.LBB60:
 4238              		.loc 2 240 0
 4239              		.syntax unified
 4240              	@ 240 "..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 4241 008e 85F31188 			msr basepri, r5	
 4242              	@ 0 "" 2
 4243              	.LVL389:
 4244              		.thumb
 4245              		.syntax unified
 4246 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4247              	.L375:
 4248              		.align	2
 4249              	.L374:
 4250 0094 00000000 		.word	.LANCHOR0
 4251 0098 14000000 		.word	.LANCHOR0+20
 4252              	.LBE60:
 4253              	.LBE59:
 4254              		.cfi_endproc
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 177


 4255              	.LFE118:
 4256              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4257              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4258              		.align	2
 4259              		.global	xTaskNotifyStateClear
 4260              		.thumb
 4261              		.thumb_func
 4262              		.type	xTaskNotifyStateClear, %function
 4263              	xTaskNotifyStateClear:
 4264              	.LFB119:
4880:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 4265              		.loc 1 4880 0
 4266              		.cfi_startproc
 4267              		@ args = 0, pretend = 0, frame = 0
 4268              		@ frame_needed = 0, uses_anonymous_args = 0
 4269              	.LVL390:
 4270 0000 10B5     		push	{r4, lr}
 4271              		.cfi_def_cfa_offset 8
 4272              		.cfi_offset 4, -8
 4273              		.cfi_offset 14, -4
4886:..\FreeRTOS/tasks.c **** 
 4274              		.loc 1 4886 0
 4275 0002 0446     		mov	r4, r0
 4276 0004 10B9     		cbnz	r0, .L377
4886:..\FreeRTOS/tasks.c **** 
 4277              		.loc 1 4886 0 is_stmt 0 discriminator 1
 4278 0006 0A4B     		ldr	r3, .L381
 4279 0008 D3F8D840 		ldr	r4, [r3, #216]
 4280              	.LVL391:
 4281              	.L377:
4888:..\FreeRTOS/tasks.c **** 		{
 4282              		.loc 1 4888 0 is_stmt 1 discriminator 4
 4283 000c FFF7FEFF 		bl	vPortEnterCritical
 4284              	.LVL392:
4890:..\FreeRTOS/tasks.c **** 			{
 4285              		.loc 1 4890 0 discriminator 4
 4286 0010 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4287 0014 DBB2     		uxtb	r3, r3
 4288 0016 022B     		cmp	r3, #2
 4289 0018 04D1     		bne	.L379
4892:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 4290              		.loc 1 4892 0
 4291 001a 0023     		movs	r3, #0
 4292 001c 84F84C30 		strb	r3, [r4, #76]
 4293              	.LVL393:
4893:..\FreeRTOS/tasks.c **** 			}
 4294              		.loc 1 4893 0
 4295 0020 0124     		movs	r4, #1
 4296              	.LVL394:
 4297 0022 00E0     		b	.L378
 4298              	.LVL395:
 4299              	.L379:
4897:..\FreeRTOS/tasks.c **** 			}
 4300              		.loc 1 4897 0
 4301 0024 0024     		movs	r4, #0
 4302              	.LVL396:
 4303              	.L378:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 178


4900:..\FreeRTOS/tasks.c **** 
 4304              		.loc 1 4900 0
 4305 0026 FFF7FEFF 		bl	vPortExitCritical
 4306              	.LVL397:
4903:..\FreeRTOS/tasks.c **** 
 4307              		.loc 1 4903 0
 4308 002a 2046     		mov	r0, r4
 4309 002c 10BD     		pop	{r4, pc}
 4310              	.LVL398:
 4311              	.L382:
 4312 002e 00BF     		.align	2
 4313              	.L381:
 4314 0030 00000000 		.word	.LANCHOR0
 4315              		.cfi_endproc
 4316              	.LFE119:
 4317              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4318              		.global	pxCurrentTCB
 4319              		.section	.rodata.str1.4,"aMS",%progbits,1
 4320              		.align	2
 4321              	.LC0:
 4322 0000 49444C45 		.ascii	"IDLE\000"
 4322      00
 4323              		.bss
 4324              		.align	2
 4325              		.set	.LANCHOR0,. + 0
 4326              		.type	xSuspendedTaskList, %object
 4327              		.size	xSuspendedTaskList, 20
 4328              	xSuspendedTaskList:
 4329 0000 00000000 		.space	20
 4329      00000000 
 4329      00000000 
 4329      00000000 
 4329      00000000 
 4330              		.type	xPendingReadyList, %object
 4331              		.size	xPendingReadyList, 20
 4332              	xPendingReadyList:
 4333 0014 00000000 		.space	20
 4333      00000000 
 4333      00000000 
 4333      00000000 
 4333      00000000 
 4334              		.type	pxDelayedTaskList, %object
 4335              		.size	pxDelayedTaskList, 4
 4336              	pxDelayedTaskList:
 4337 0028 00000000 		.space	4
 4338              		.type	xNextTaskUnblockTime, %object
 4339              		.size	xNextTaskUnblockTime, 4
 4340              	xNextTaskUnblockTime:
 4341 002c 00000000 		.space	4
 4342              		.type	pxReadyTasksLists, %object
 4343              		.size	pxReadyTasksLists, 100
 4344              	pxReadyTasksLists:
 4345 0030 00000000 		.space	100
 4345      00000000 
 4345      00000000 
 4345      00000000 
 4345      00000000 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 179


 4346              		.type	xDelayedTaskList1, %object
 4347              		.size	xDelayedTaskList1, 20
 4348              	xDelayedTaskList1:
 4349 0094 00000000 		.space	20
 4349      00000000 
 4349      00000000 
 4349      00000000 
 4349      00000000 
 4350              		.type	xDelayedTaskList2, %object
 4351              		.size	xDelayedTaskList2, 20
 4352              	xDelayedTaskList2:
 4353 00a8 00000000 		.space	20
 4353      00000000 
 4353      00000000 
 4353      00000000 
 4353      00000000 
 4354              		.type	xTasksWaitingTermination, %object
 4355              		.size	xTasksWaitingTermination, 20
 4356              	xTasksWaitingTermination:
 4357 00bc 00000000 		.space	20
 4357      00000000 
 4357      00000000 
 4357      00000000 
 4357      00000000 
 4358              		.type	pxOverflowDelayedTaskList, %object
 4359              		.size	pxOverflowDelayedTaskList, 4
 4360              	pxOverflowDelayedTaskList:
 4361 00d0 00000000 		.space	4
 4362              		.type	uxCurrentNumberOfTasks, %object
 4363              		.size	uxCurrentNumberOfTasks, 4
 4364              	uxCurrentNumberOfTasks:
 4365 00d4 00000000 		.space	4
 4366              		.type	pxCurrentTCB, %object
 4367              		.size	pxCurrentTCB, 4
 4368              	pxCurrentTCB:
 4369 00d8 00000000 		.space	4
 4370              		.type	xSchedulerRunning, %object
 4371              		.size	xSchedulerRunning, 4
 4372              	xSchedulerRunning:
 4373 00dc 00000000 		.space	4
 4374              		.type	uxTaskNumber, %object
 4375              		.size	uxTaskNumber, 4
 4376              	uxTaskNumber:
 4377 00e0 00000000 		.space	4
 4378              		.type	uxTopReadyPriority, %object
 4379              		.size	uxTopReadyPriority, 4
 4380              	uxTopReadyPriority:
 4381 00e4 00000000 		.space	4
 4382              		.type	uxDeletedTasksWaitingCleanUp, %object
 4383              		.size	uxDeletedTasksWaitingCleanUp, 4
 4384              	uxDeletedTasksWaitingCleanUp:
 4385 00e8 00000000 		.space	4
 4386              		.type	xTickCount, %object
 4387              		.size	xTickCount, 4
 4388              	xTickCount:
 4389 00ec 00000000 		.space	4
 4390              		.type	uxSchedulerSuspended, %object
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 180


 4391              		.size	uxSchedulerSuspended, 4
 4392              	uxSchedulerSuspended:
 4393 00f0 00000000 		.space	4
 4394              		.type	xIdleTaskHandle, %object
 4395              		.size	xIdleTaskHandle, 4
 4396              	xIdleTaskHandle:
 4397 00f4 00000000 		.space	4
 4398              		.type	xNumOfOverflows, %object
 4399              		.size	xNumOfOverflows, 4
 4400              	xNumOfOverflows:
 4401 00f8 00000000 		.space	4
 4402              		.type	uxPendedTicks, %object
 4403              		.size	uxPendedTicks, 4
 4404              	uxPendedTicks:
 4405 00fc 00000000 		.space	4
 4406              		.type	xYieldPending, %object
 4407              		.size	xYieldPending, 4
 4408              	xYieldPending:
 4409 0100 00000000 		.space	4
 4410              		.text
 4411              	.Letext0:
 4412              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4413              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4414              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4415              		.file 6 "..\\FreeRTOS\\include/projdefs.h"
 4416              		.file 7 "..\\FreeRTOS\\include/list.h"
 4417              		.file 8 "..\\FreeRTOS\\include/task.h"
 4418              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 4419              		.file 10 "..\\FreeRTOS\\include/portable.h"
 4420              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 4421              		.section	.debug_info,"",%progbits
 4422              	.Ldebug_info0:
 4423 0000 C41F0000 		.4byte	0x1fc4
 4424 0004 0400     		.2byte	0x4
 4425 0006 00000000 		.4byte	.Ldebug_abbrev0
 4426 000a 04       		.byte	0x4
 4427 000b 01       		.uleb128 0x1
 4428 000c BC090000 		.4byte	.LASF238
 4429 0010 0C       		.byte	0xc
 4430 0011 81060000 		.4byte	.LASF239
 4431 0015 9F0B0000 		.4byte	.LASF240
 4432 0019 40000000 		.4byte	.Ldebug_ranges0+0x40
 4433 001d 00000000 		.4byte	0
 4434 0021 00000000 		.4byte	.Ldebug_line0
 4435 0025 02       		.uleb128 0x2
 4436 0026 50000000 		.4byte	.LASF4
 4437 002a 03       		.byte	0x3
 4438 002b D8       		.byte	0xd8
 4439 002c 30000000 		.4byte	0x30
 4440 0030 03       		.uleb128 0x3
 4441 0031 04       		.byte	0x4
 4442 0032 07       		.byte	0x7
 4443 0033 42040000 		.4byte	.LASF0
 4444 0037 04       		.uleb128 0x4
 4445 0038 04       		.byte	0x4
 4446 0039 05       		.byte	0x5
 4447 003a 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 181


 4448 003e 03       		.uleb128 0x3
 4449 003f 08       		.byte	0x8
 4450 0040 05       		.byte	0x5
 4451 0041 8C010000 		.4byte	.LASF1
 4452 0045 03       		.uleb128 0x3
 4453 0046 08       		.byte	0x8
 4454 0047 04       		.byte	0x4
 4455 0048 D5060000 		.4byte	.LASF2
 4456 004c 03       		.uleb128 0x3
 4457 004d 01       		.byte	0x1
 4458 004e 06       		.byte	0x6
 4459 004f 9A010000 		.4byte	.LASF3
 4460 0053 02       		.uleb128 0x2
 4461 0054 B7000000 		.4byte	.LASF5
 4462 0058 04       		.byte	0x4
 4463 0059 1D       		.byte	0x1d
 4464 005a 5E000000 		.4byte	0x5e
 4465 005e 03       		.uleb128 0x3
 4466 005f 01       		.byte	0x1
 4467 0060 08       		.byte	0x8
 4468 0061 EC080000 		.4byte	.LASF6
 4469 0065 03       		.uleb128 0x3
 4470 0066 02       		.byte	0x2
 4471 0067 05       		.byte	0x5
 4472 0068 CE020000 		.4byte	.LASF7
 4473 006c 02       		.uleb128 0x2
 4474 006d 78030000 		.4byte	.LASF8
 4475 0071 04       		.byte	0x4
 4476 0072 2B       		.byte	0x2b
 4477 0073 77000000 		.4byte	0x77
 4478 0077 03       		.uleb128 0x3
 4479 0078 02       		.byte	0x2
 4480 0079 07       		.byte	0x7
 4481 007a 22050000 		.4byte	.LASF9
 4482 007e 02       		.uleb128 0x2
 4483 007f 1C0C0000 		.4byte	.LASF10
 4484 0083 04       		.byte	0x4
 4485 0084 3F       		.byte	0x3f
 4486 0085 89000000 		.4byte	0x89
 4487 0089 03       		.uleb128 0x3
 4488 008a 04       		.byte	0x4
 4489 008b 05       		.byte	0x5
 4490 008c 3F020000 		.4byte	.LASF11
 4491 0090 02       		.uleb128 0x2
 4492 0091 0F040000 		.4byte	.LASF12
 4493 0095 04       		.byte	0x4
 4494 0096 41       		.byte	0x41
 4495 0097 9B000000 		.4byte	0x9b
 4496 009b 03       		.uleb128 0x3
 4497 009c 04       		.byte	0x4
 4498 009d 07       		.byte	0x7
 4499 009e B4040000 		.4byte	.LASF13
 4500 00a2 03       		.uleb128 0x3
 4501 00a3 08       		.byte	0x8
 4502 00a4 07       		.byte	0x7
 4503 00a5 01020000 		.4byte	.LASF14
 4504 00a9 03       		.uleb128 0x3
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 182


 4505 00aa 04       		.byte	0x4
 4506 00ab 07       		.byte	0x7
 4507 00ac AF060000 		.4byte	.LASF15
 4508 00b0 05       		.uleb128 0x5
 4509 00b1 04       		.byte	0x4
 4510 00b2 06       		.uleb128 0x6
 4511 00b3 04       		.byte	0x4
 4512 00b4 B8000000 		.4byte	0xb8
 4513 00b8 03       		.uleb128 0x3
 4514 00b9 01       		.byte	0x1
 4515 00ba 08       		.byte	0x8
 4516 00bb 430B0000 		.4byte	.LASF16
 4517 00bf 06       		.uleb128 0x6
 4518 00c0 04       		.byte	0x4
 4519 00c1 C5000000 		.4byte	0xc5
 4520 00c5 07       		.uleb128 0x7
 4521 00c6 B8000000 		.4byte	0xb8
 4522 00ca 02       		.uleb128 0x2
 4523 00cb DA0D0000 		.4byte	.LASF17
 4524 00cf 05       		.byte	0x5
 4525 00d0 18       		.byte	0x18
 4526 00d1 53000000 		.4byte	0x53
 4527 00d5 02       		.uleb128 0x2
 4528 00d6 FA020000 		.4byte	.LASF18
 4529 00da 05       		.byte	0x5
 4530 00db 24       		.byte	0x24
 4531 00dc 6C000000 		.4byte	0x6c
 4532 00e0 02       		.uleb128 0x2
 4533 00e1 E4080000 		.4byte	.LASF19
 4534 00e5 05       		.byte	0x5
 4535 00e6 2C       		.byte	0x2c
 4536 00e7 7E000000 		.4byte	0x7e
 4537 00eb 02       		.uleb128 0x2
 4538 00ec 0F0F0000 		.4byte	.LASF20
 4539 00f0 05       		.byte	0x5
 4540 00f1 30       		.byte	0x30
 4541 00f2 90000000 		.4byte	0x90
 4542 00f6 03       		.uleb128 0x3
 4543 00f7 04       		.byte	0x4
 4544 00f8 04       		.byte	0x4
 4545 00f9 79080000 		.4byte	.LASF21
 4546 00fd 03       		.uleb128 0x3
 4547 00fe 08       		.byte	0x8
 4548 00ff 04       		.byte	0x4
 4549 0100 080F0000 		.4byte	.LASF22
 4550 0104 08       		.uleb128 0x8
 4551 0105 EB000000 		.4byte	0xeb
 4552 0109 08       		.uleb128 0x8
 4553 010a CA000000 		.4byte	0xca
 4554 010e 02       		.uleb128 0x2
 4555 010f 8E090000 		.4byte	.LASF23
 4556 0113 06       		.byte	0x6
 4557 0114 24       		.byte	0x24
 4558 0115 19010000 		.4byte	0x119
 4559 0119 06       		.uleb128 0x6
 4560 011a 04       		.byte	0x4
 4561 011b 1F010000 		.4byte	0x11f
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 183


 4562 011f 09       		.uleb128 0x9
 4563 0120 2A010000 		.4byte	0x12a
 4564 0124 0A       		.uleb128 0xa
 4565 0125 B0000000 		.4byte	0xb0
 4566 0129 00       		.byte	0
 4567 012a 02       		.uleb128 0x2
 4568 012b 35050000 		.4byte	.LASF24
 4569 012f 02       		.byte	0x2
 4570 0130 42       		.byte	0x42
 4571 0131 EB000000 		.4byte	0xeb
 4572 0135 02       		.uleb128 0x2
 4573 0136 11030000 		.4byte	.LASF25
 4574 013a 02       		.byte	0x2
 4575 013b 43       		.byte	0x43
 4576 013c 89000000 		.4byte	0x89
 4577 0140 02       		.uleb128 0x2
 4578 0141 FC0E0000 		.4byte	.LASF26
 4579 0145 02       		.byte	0x2
 4580 0146 44       		.byte	0x44
 4581 0147 9B000000 		.4byte	0x9b
 4582 014b 02       		.uleb128 0x2
 4583 014c C3020000 		.4byte	.LASF27
 4584 0150 02       		.byte	0x2
 4585 0151 4A       		.byte	0x4a
 4586 0152 EB000000 		.4byte	0xeb
 4587 0156 06       		.uleb128 0x6
 4588 0157 04       		.byte	0x4
 4589 0158 CA000000 		.4byte	0xca
 4590 015c 0B       		.uleb128 0xb
 4591 015d 910C0000 		.4byte	.LASF34
 4592 0161 14       		.byte	0x14
 4593 0162 07       		.byte	0x7
 4594 0163 8C       		.byte	0x8c
 4595 0164 A5010000 		.4byte	0x1a5
 4596 0168 0C       		.uleb128 0xc
 4597 0169 4F0D0000 		.4byte	.LASF28
 4598 016d 07       		.byte	0x7
 4599 016e 8F       		.byte	0x8f
 4600 016f 4B010000 		.4byte	0x14b
 4601 0173 00       		.byte	0
 4602 0174 0C       		.uleb128 0xc
 4603 0175 110E0000 		.4byte	.LASF29
 4604 0179 07       		.byte	0x7
 4605 017a 90       		.byte	0x90
 4606 017b A5010000 		.4byte	0x1a5
 4607 017f 04       		.byte	0x4
 4608 0180 0C       		.uleb128 0xc
 4609 0181 52080000 		.4byte	.LASF30
 4610 0185 07       		.byte	0x7
 4611 0186 91       		.byte	0x91
 4612 0187 A5010000 		.4byte	0x1a5
 4613 018b 08       		.byte	0x8
 4614 018c 0C       		.uleb128 0xc
 4615 018d 470D0000 		.4byte	.LASF31
 4616 0191 07       		.byte	0x7
 4617 0192 92       		.byte	0x92
 4618 0193 B0000000 		.4byte	0xb0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 184


 4619 0197 0C       		.byte	0xc
 4620 0198 0C       		.uleb128 0xc
 4621 0199 87080000 		.4byte	.LASF32
 4622 019d 07       		.byte	0x7
 4623 019e 93       		.byte	0x93
 4624 019f B0000000 		.4byte	0xb0
 4625 01a3 10       		.byte	0x10
 4626 01a4 00       		.byte	0
 4627 01a5 06       		.uleb128 0x6
 4628 01a6 04       		.byte	0x4
 4629 01a7 5C010000 		.4byte	0x15c
 4630 01ab 02       		.uleb128 0x2
 4631 01ac 00080000 		.4byte	.LASF33
 4632 01b0 07       		.byte	0x7
 4633 01b1 96       		.byte	0x96
 4634 01b2 5C010000 		.4byte	0x15c
 4635 01b6 0B       		.uleb128 0xb
 4636 01b7 6B010000 		.4byte	.LASF35
 4637 01bb 0C       		.byte	0xc
 4638 01bc 07       		.byte	0x7
 4639 01bd 98       		.byte	0x98
 4640 01be E7010000 		.4byte	0x1e7
 4641 01c2 0C       		.uleb128 0xc
 4642 01c3 4F0D0000 		.4byte	.LASF28
 4643 01c7 07       		.byte	0x7
 4644 01c8 9B       		.byte	0x9b
 4645 01c9 4B010000 		.4byte	0x14b
 4646 01cd 00       		.byte	0
 4647 01ce 0C       		.uleb128 0xc
 4648 01cf 110E0000 		.4byte	.LASF29
 4649 01d3 07       		.byte	0x7
 4650 01d4 9C       		.byte	0x9c
 4651 01d5 A5010000 		.4byte	0x1a5
 4652 01d9 04       		.byte	0x4
 4653 01da 0C       		.uleb128 0xc
 4654 01db 52080000 		.4byte	.LASF30
 4655 01df 07       		.byte	0x7
 4656 01e0 9D       		.byte	0x9d
 4657 01e1 A5010000 		.4byte	0x1a5
 4658 01e5 08       		.byte	0x8
 4659 01e6 00       		.byte	0
 4660 01e7 02       		.uleb128 0x2
 4661 01e8 57000000 		.4byte	.LASF36
 4662 01ec 07       		.byte	0x7
 4663 01ed 9F       		.byte	0x9f
 4664 01ee B6010000 		.4byte	0x1b6
 4665 01f2 0B       		.uleb128 0xb
 4666 01f3 9D090000 		.4byte	.LASF37
 4667 01f7 14       		.byte	0x14
 4668 01f8 07       		.byte	0x7
 4669 01f9 A4       		.byte	0xa4
 4670 01fa 23020000 		.4byte	0x223
 4671 01fe 0C       		.uleb128 0xc
 4672 01ff A4040000 		.4byte	.LASF38
 4673 0203 07       		.byte	0x7
 4674 0204 A7       		.byte	0xa7
 4675 0205 23020000 		.4byte	0x223
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 185


 4676 0209 00       		.byte	0
 4677 020a 0C       		.uleb128 0xc
 4678 020b 7F080000 		.4byte	.LASF39
 4679 020f 07       		.byte	0x7
 4680 0210 A8       		.byte	0xa8
 4681 0211 28020000 		.4byte	0x228
 4682 0215 04       		.byte	0x4
 4683 0216 0C       		.uleb128 0xc
 4684 0217 4B010000 		.4byte	.LASF40
 4685 021b 07       		.byte	0x7
 4686 021c A9       		.byte	0xa9
 4687 021d E7010000 		.4byte	0x1e7
 4688 0221 08       		.byte	0x8
 4689 0222 00       		.byte	0
 4690 0223 08       		.uleb128 0x8
 4691 0224 40010000 		.4byte	0x140
 4692 0228 06       		.uleb128 0x6
 4693 0229 04       		.byte	0x4
 4694 022a AB010000 		.4byte	0x1ab
 4695 022e 02       		.uleb128 0x2
 4696 022f FF050000 		.4byte	.LASF41
 4697 0233 07       		.byte	0x7
 4698 0234 AB       		.byte	0xab
 4699 0235 F2010000 		.4byte	0x1f2
 4700 0239 02       		.uleb128 0x2
 4701 023a B6020000 		.4byte	.LASF42
 4702 023e 08       		.byte	0x8
 4703 023f 43       		.byte	0x43
 4704 0240 B0000000 		.4byte	0xb0
 4705 0244 0D       		.uleb128 0xd
 4706 0245 01       		.byte	0x1
 4707 0246 5E000000 		.4byte	0x5e
 4708 024a 08       		.byte	0x8
 4709 024b 4D       		.byte	0x4d
 4710 024c 75020000 		.4byte	0x275
 4711 0250 0E       		.uleb128 0xe
 4712 0251 AF0A0000 		.4byte	.LASF43
 4713 0255 00       		.byte	0
 4714 0256 0E       		.uleb128 0xe
 4715 0257 C6040000 		.4byte	.LASF44
 4716 025b 01       		.byte	0x1
 4717 025c 0E       		.uleb128 0xe
 4718 025d 1C010000 		.4byte	.LASF45
 4719 0261 02       		.byte	0x2
 4720 0262 0E       		.uleb128 0xe
 4721 0263 00000000 		.4byte	.LASF46
 4722 0267 03       		.byte	0x3
 4723 0268 0E       		.uleb128 0xe
 4724 0269 93080000 		.4byte	.LASF47
 4725 026d 04       		.byte	0x4
 4726 026e 0E       		.uleb128 0xe
 4727 026f C60D0000 		.4byte	.LASF48
 4728 0273 05       		.byte	0x5
 4729 0274 00       		.byte	0
 4730 0275 02       		.uleb128 0x2
 4731 0276 180E0000 		.4byte	.LASF49
 4732 027a 08       		.byte	0x8
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 186


 4733 027b 54       		.byte	0x54
 4734 027c 44020000 		.4byte	0x244
 4735 0280 0D       		.uleb128 0xd
 4736 0281 01       		.byte	0x1
 4737 0282 5E000000 		.4byte	0x5e
 4738 0286 08       		.byte	0x8
 4739 0287 58       		.byte	0x58
 4740 0288 AB020000 		.4byte	0x2ab
 4741 028c 0E       		.uleb128 0xe
 4742 028d 070E0000 		.4byte	.LASF50
 4743 0291 00       		.byte	0
 4744 0292 0E       		.uleb128 0xe
 4745 0293 7E020000 		.4byte	.LASF51
 4746 0297 01       		.byte	0x1
 4747 0298 0E       		.uleb128 0xe
 4748 0299 4C060000 		.4byte	.LASF52
 4749 029d 02       		.byte	0x2
 4750 029e 0E       		.uleb128 0xe
 4751 029f 91070000 		.4byte	.LASF53
 4752 02a3 03       		.byte	0x3
 4753 02a4 0E       		.uleb128 0xe
 4754 02a5 AC0D0000 		.4byte	.LASF54
 4755 02a9 04       		.byte	0x4
 4756 02aa 00       		.byte	0
 4757 02ab 02       		.uleb128 0x2
 4758 02ac 330E0000 		.4byte	.LASF55
 4759 02b0 08       		.byte	0x8
 4760 02b1 5E       		.byte	0x5e
 4761 02b2 80020000 		.4byte	0x280
 4762 02b6 0B       		.uleb128 0xb
 4763 02b7 61010000 		.4byte	.LASF56
 4764 02bb 08       		.byte	0x8
 4765 02bc 08       		.byte	0x8
 4766 02bd 63       		.byte	0x63
 4767 02be DB020000 		.4byte	0x2db
 4768 02c2 0C       		.uleb128 0xc
 4769 02c3 AE030000 		.4byte	.LASF57
 4770 02c7 08       		.byte	0x8
 4771 02c8 65       		.byte	0x65
 4772 02c9 35010000 		.4byte	0x135
 4773 02cd 00       		.byte	0
 4774 02ce 0C       		.uleb128 0xc
 4775 02cf 67040000 		.4byte	.LASF58
 4776 02d3 08       		.byte	0x8
 4777 02d4 66       		.byte	0x66
 4778 02d5 4B010000 		.4byte	0x14b
 4779 02d9 04       		.byte	0x4
 4780 02da 00       		.byte	0
 4781 02db 02       		.uleb128 0x2
 4782 02dc 66000000 		.4byte	.LASF59
 4783 02e0 08       		.byte	0x8
 4784 02e1 67       		.byte	0x67
 4785 02e2 B6020000 		.4byte	0x2b6
 4786 02e6 0B       		.uleb128 0xb
 4787 02e7 AA080000 		.4byte	.LASF60
 4788 02eb 0C       		.byte	0xc
 4789 02ec 08       		.byte	0x8
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 187


 4790 02ed 6C       		.byte	0x6c
 4791 02ee 17030000 		.4byte	0x317
 4792 02f2 0C       		.uleb128 0xc
 4793 02f3 3A0F0000 		.4byte	.LASF61
 4794 02f7 08       		.byte	0x8
 4795 02f8 6E       		.byte	0x6e
 4796 02f9 B0000000 		.4byte	0xb0
 4797 02fd 00       		.byte	0
 4798 02fe 0C       		.uleb128 0xc
 4799 02ff E0070000 		.4byte	.LASF62
 4800 0303 08       		.byte	0x8
 4801 0304 6F       		.byte	0x6f
 4802 0305 EB000000 		.4byte	0xeb
 4803 0309 04       		.byte	0x4
 4804 030a 0C       		.uleb128 0xc
 4805 030b DE0A0000 		.4byte	.LASF63
 4806 030f 08       		.byte	0x8
 4807 0310 70       		.byte	0x70
 4808 0311 EB000000 		.4byte	0xeb
 4809 0315 08       		.byte	0x8
 4810 0316 00       		.byte	0
 4811 0317 02       		.uleb128 0x2
 4812 0318 D8020000 		.4byte	.LASF64
 4813 031c 08       		.byte	0x8
 4814 031d 71       		.byte	0x71
 4815 031e E6020000 		.4byte	0x2e6
 4816 0322 07       		.uleb128 0x7
 4817 0323 BF000000 		.4byte	0xbf
 4818 0327 06       		.uleb128 0x6
 4819 0328 04       		.byte	0x4
 4820 0329 2A010000 		.4byte	0x12a
 4821 032d 0F       		.uleb128 0xf
 4822 032e 48020000 		.4byte	.LASF65
 4823 0332 50       		.byte	0x50
 4824 0333 01       		.byte	0x1
 4825 0334 0D01     		.2byte	0x10d
 4826 0336 BD030000 		.4byte	0x3bd
 4827 033a 10       		.uleb128 0x10
 4828 033b DB040000 		.4byte	.LASF66
 4829 033f 01       		.byte	0x1
 4830 0340 0F01     		.2byte	0x10f
 4831 0342 BD030000 		.4byte	0x3bd
 4832 0346 00       		.byte	0
 4833 0347 10       		.uleb128 0x10
 4834 0348 18020000 		.4byte	.LASF67
 4835 034c 01       		.byte	0x1
 4836 034d 1501     		.2byte	0x115
 4837 034f AB010000 		.4byte	0x1ab
 4838 0353 04       		.byte	0x4
 4839 0354 10       		.uleb128 0x10
 4840 0355 7A070000 		.4byte	.LASF68
 4841 0359 01       		.byte	0x1
 4842 035a 1601     		.2byte	0x116
 4843 035c AB010000 		.4byte	0x1ab
 4844 0360 18       		.byte	0x18
 4845 0361 10       		.uleb128 0x10
 4846 0362 830E0000 		.4byte	.LASF69
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 188


 4847 0366 01       		.byte	0x1
 4848 0367 1701     		.2byte	0x117
 4849 0369 40010000 		.4byte	0x140
 4850 036d 2C       		.byte	0x2c
 4851 036e 10       		.uleb128 0x10
 4852 036f 65060000 		.4byte	.LASF70
 4853 0373 01       		.byte	0x1
 4854 0374 1801     		.2byte	0x118
 4855 0376 27030000 		.4byte	0x327
 4856 037a 30       		.byte	0x30
 4857 037b 10       		.uleb128 0x10
 4858 037c CF0D0000 		.4byte	.LASF71
 4859 0380 01       		.byte	0x1
 4860 0381 1901     		.2byte	0x119
 4861 0383 C8030000 		.4byte	0x3c8
 4862 0387 34       		.byte	0x34
 4863 0388 10       		.uleb128 0x10
 4864 0389 4A0A0000 		.4byte	.LASF72
 4865 038d 01       		.byte	0x1
 4866 038e 2901     		.2byte	0x129
 4867 0390 40010000 		.4byte	0x140
 4868 0394 40       		.byte	0x40
 4869 0395 10       		.uleb128 0x10
 4870 0396 070B0000 		.4byte	.LASF73
 4871 039a 01       		.byte	0x1
 4872 039b 2A01     		.2byte	0x12a
 4873 039d 40010000 		.4byte	0x140
 4874 03a1 44       		.byte	0x44
 4875 03a2 10       		.uleb128 0x10
 4876 03a3 FA080000 		.4byte	.LASF74
 4877 03a7 01       		.byte	0x1
 4878 03a8 4501     		.2byte	0x145
 4879 03aa 04010000 		.4byte	0x104
 4880 03ae 48       		.byte	0x48
 4881 03af 10       		.uleb128 0x10
 4882 03b0 F4030000 		.4byte	.LASF75
 4883 03b4 01       		.byte	0x1
 4884 03b5 4601     		.2byte	0x146
 4885 03b7 09010000 		.4byte	0x109
 4886 03bb 4C       		.byte	0x4c
 4887 03bc 00       		.byte	0
 4888 03bd 06       		.uleb128 0x6
 4889 03be 04       		.byte	0x4
 4890 03bf C3030000 		.4byte	0x3c3
 4891 03c3 08       		.uleb128 0x8
 4892 03c4 2A010000 		.4byte	0x12a
 4893 03c8 11       		.uleb128 0x11
 4894 03c9 B8000000 		.4byte	0xb8
 4895 03cd D8030000 		.4byte	0x3d8
 4896 03d1 12       		.uleb128 0x12
 4897 03d2 A9000000 		.4byte	0xa9
 4898 03d6 0B       		.byte	0xb
 4899 03d7 00       		.byte	0
 4900 03d8 13       		.uleb128 0x13
 4901 03d9 0F050000 		.4byte	.LASF76
 4902 03dd 01       		.byte	0x1
 4903 03de 5301     		.2byte	0x153
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 189


 4904 03e0 2D030000 		.4byte	0x32d
 4905 03e4 13       		.uleb128 0x13
 4906 03e5 20090000 		.4byte	.LASF77
 4907 03e9 01       		.byte	0x1
 4908 03ea 5701     		.2byte	0x157
 4909 03ec D8030000 		.4byte	0x3d8
 4910 03f0 14       		.uleb128 0x14
 4911 03f1 67070000 		.4byte	.LASF82
 4912 03f5 02       		.byte	0x2
 4913 03f6 DA       		.byte	0xda
 4914 03f7 EB000000 		.4byte	0xeb
 4915 03fb 03       		.byte	0x3
 4916 03fc 17040000 		.4byte	0x417
 4917 0400 15       		.uleb128 0x15
 4918 0401 2A000000 		.4byte	.LASF78
 4919 0405 02       		.byte	0x2
 4920 0406 DC       		.byte	0xdc
 4921 0407 EB000000 		.4byte	0xeb
 4922 040b 15       		.uleb128 0x15
 4923 040c 0F010000 		.4byte	.LASF79
 4924 0410 02       		.byte	0x2
 4925 0411 DC       		.byte	0xdc
 4926 0412 EB000000 		.4byte	0xeb
 4927 0416 00       		.byte	0
 4928 0417 16       		.uleb128 0x16
 4929 0418 F0070000 		.4byte	.LASF80
 4930 041c 02       		.byte	0x2
 4931 041d EE       		.byte	0xee
 4932 041e 03       		.byte	0x3
 4933 041f 2F040000 		.4byte	0x42f
 4934 0423 17       		.uleb128 0x17
 4935 0424 150B0000 		.4byte	.LASF84
 4936 0428 02       		.byte	0x2
 4937 0429 EE       		.byte	0xee
 4938 042a EB000000 		.4byte	0xeb
 4939 042e 00       		.byte	0
 4940 042f 16       		.uleb128 0x16
 4941 0430 ED050000 		.4byte	.LASF81
 4942 0434 02       		.byte	0x2
 4943 0435 CA       		.byte	0xca
 4944 0436 03       		.byte	0x3
 4945 0437 47040000 		.4byte	0x447
 4946 043b 15       		.uleb128 0x15
 4947 043c 0F010000 		.4byte	.LASF79
 4948 0440 02       		.byte	0x2
 4949 0441 CC       		.byte	0xcc
 4950 0442 EB000000 		.4byte	0xeb
 4951 0446 00       		.byte	0
 4952 0447 14       		.uleb128 0x14
 4953 0448 610D0000 		.4byte	.LASF83
 4954 044c 02       		.byte	0x2
 4955 044d 8D       		.byte	0x8d
 4956 044e CA000000 		.4byte	0xca
 4957 0452 03       		.byte	0x3
 4958 0453 6E040000 		.4byte	0x46e
 4959 0457 17       		.uleb128 0x17
 4960 0458 35090000 		.4byte	.LASF85
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 190


 4961 045c 02       		.byte	0x2
 4962 045d 8D       		.byte	0x8d
 4963 045e EB000000 		.4byte	0xeb
 4964 0462 15       		.uleb128 0x15
 4965 0463 21000000 		.4byte	.LASF86
 4966 0467 02       		.byte	0x2
 4967 0468 8F       		.byte	0x8f
 4968 0469 CA000000 		.4byte	0xca
 4969 046d 00       		.byte	0
 4970 046e 18       		.uleb128 0x18
 4971 046f F00D0000 		.4byte	.LASF89
 4972 0473 01       		.byte	0x1
 4973 0474 C306     		.2byte	0x6c3
 4974 0476 35010000 		.4byte	0x135
 4975 047a 00000000 		.4byte	.LFB80
 4976 047e 38000000 		.4byte	.LFE80-.LFB80
 4977 0482 01       		.uleb128 0x1
 4978 0483 9C       		.byte	0x9c
 4979 0484 B9040000 		.4byte	0x4b9
 4980 0488 19       		.uleb128 0x19
 4981 0489 D80A0000 		.4byte	.LASF91
 4982 048d 01       		.byte	0x1
 4983 048e C306     		.2byte	0x6c3
 4984 0490 B9040000 		.4byte	0x4b9
 4985 0494 00000000 		.4byte	.LLST0
 4986 0498 1A       		.uleb128 0x1a
 4987 0499 4F040000 		.4byte	.LASF87
 4988 049d 01       		.byte	0x1
 4989 049e C506     		.2byte	0x6c5
 4990 04a0 35010000 		.4byte	0x135
 4991 04a4 6C000000 		.4byte	.LLST1
 4992 04a8 1A       		.uleb128 0x1a
 4993 04a9 41050000 		.4byte	.LASF88
 4994 04ad 01       		.byte	0x1
 4995 04ae C606     		.2byte	0x6c6
 4996 04b0 C9040000 		.4byte	0x4c9
 4997 04b4 8B000000 		.4byte	.LLST2
 4998 04b8 00       		.byte	0
 4999 04b9 07       		.uleb128 0x7
 5000 04ba 39020000 		.4byte	0x239
 5001 04be 06       		.uleb128 0x6
 5002 04bf 04       		.byte	0x4
 5003 04c0 C4040000 		.4byte	0x4c4
 5004 04c4 07       		.uleb128 0x7
 5005 04c5 E4030000 		.4byte	0x3e4
 5006 04c9 07       		.uleb128 0x7
 5007 04ca BE040000 		.4byte	0x4be
 5008 04ce 18       		.uleb128 0x18
 5009 04cf C9080000 		.4byte	.LASF90
 5010 04d3 01       		.byte	0x1
 5011 04d4 2C0E     		.2byte	0xe2c
 5012 04d6 D5000000 		.4byte	0xd5
 5013 04da 00000000 		.4byte	.LFB104
 5014 04de 14000000 		.4byte	.LFE104-.LFB104
 5015 04e2 01       		.uleb128 0x1
 5016 04e3 9C       		.byte	0x9c
 5017 04e4 09050000 		.4byte	0x509
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 191


 5018 04e8 19       		.uleb128 0x19
 5019 04e9 06060000 		.4byte	.LASF92
 5020 04ed 01       		.byte	0x1
 5021 04ee 2C0E     		.2byte	0xe2c
 5022 04f0 09050000 		.4byte	0x509
 5023 04f4 F7000000 		.4byte	.LLST3
 5024 04f8 1A       		.uleb128 0x1a
 5025 04f9 89070000 		.4byte	.LASF93
 5026 04fd 01       		.byte	0x1
 5027 04fe 2E0E     		.2byte	0xe2e
 5028 0500 EB000000 		.4byte	0xeb
 5029 0504 15010000 		.4byte	.LLST4
 5030 0508 00       		.byte	0
 5031 0509 06       		.uleb128 0x6
 5032 050a 04       		.byte	0x4
 5033 050b 0F050000 		.4byte	0x50f
 5034 050f 07       		.uleb128 0x7
 5035 0510 CA000000 		.4byte	0xca
 5036 0514 1B       		.uleb128 0x1b
 5037 0515 5C030000 		.4byte	.LASF94
 5038 0519 01       		.byte	0x1
 5039 051a 920E     		.2byte	0xe92
 5040 051c 00000000 		.4byte	.LFB107
 5041 0520 2C000000 		.4byte	.LFE107-.LFB107
 5042 0524 01       		.uleb128 0x1
 5043 0525 9C       		.byte	0x9c
 5044 0526 3B050000 		.4byte	0x53b
 5045 052a 1A       		.uleb128 0x1a
 5046 052b 41050000 		.4byte	.LASF88
 5047 052f 01       		.byte	0x1
 5048 0530 940E     		.2byte	0xe94
 5049 0532 3B050000 		.4byte	0x53b
 5050 0536 43010000 		.4byte	.LLST5
 5051 053a 00       		.byte	0
 5052 053b 06       		.uleb128 0x6
 5053 053c 04       		.byte	0x4
 5054 053d E4030000 		.4byte	0x3e4
 5055 0541 1B       		.uleb128 0x1b
 5056 0542 13060000 		.4byte	.LASF95
 5057 0546 01       		.byte	0x1
 5058 0547 5C0E     		.2byte	0xe5c
 5059 0549 00000000 		.4byte	.LFB106
 5060 054d 12000000 		.4byte	.LFE106-.LFB106
 5061 0551 01       		.uleb128 0x1
 5062 0552 9C       		.byte	0x9c
 5063 0553 81050000 		.4byte	0x581
 5064 0557 19       		.uleb128 0x19
 5065 0558 41050000 		.4byte	.LASF88
 5066 055c 01       		.byte	0x1
 5067 055d 5C0E     		.2byte	0xe5c
 5068 055f 3B050000 		.4byte	0x53b
 5069 0563 56010000 		.4byte	.LLST6
 5070 0567 1C       		.uleb128 0x1c
 5071 0568 0A000000 		.4byte	.LVL18
 5072 056c 331F0000 		.4byte	0x1f33
 5073 0570 1D       		.uleb128 0x1d
 5074 0571 10000000 		.4byte	.LVL19
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 192


 5075 0575 331F0000 		.4byte	0x1f33
 5076 0579 1E       		.uleb128 0x1e
 5077 057a 01       		.uleb128 0x1
 5078 057b 50       		.byte	0x50
 5079 057c 02       		.uleb128 0x2
 5080 057d 74       		.byte	0x74
 5081 057e 00       		.sleb128 0
 5082 057f 00       		.byte	0
 5083 0580 00       		.byte	0
 5084 0581 1B       		.uleb128 0x1b
 5085 0582 6C0A0000 		.4byte	.LASF96
 5086 0586 01       		.byte	0x1
 5087 0587 3703     		.2byte	0x337
 5088 0589 00000000 		.4byte	.LFB70
 5089 058d 90000000 		.4byte	.LFE70-.LFB70
 5090 0591 01       		.uleb128 0x1
 5091 0592 9C       		.byte	0x9c
 5092 0593 91060000 		.4byte	0x691
 5093 0597 19       		.uleb128 0x19
 5094 0598 48070000 		.4byte	.LASF97
 5095 059c 01       		.byte	0x1
 5096 059d 3703     		.2byte	0x337
 5097 059f 0E010000 		.4byte	0x10e
 5098 05a3 74010000 		.4byte	.LLST7
 5099 05a7 19       		.uleb128 0x19
 5100 05a8 BA0E0000 		.4byte	.LASF98
 5101 05ac 01       		.byte	0x1
 5102 05ad 3803     		.2byte	0x338
 5103 05af 22030000 		.4byte	0x322
 5104 05b3 92010000 		.4byte	.LLST8
 5105 05b7 19       		.uleb128 0x19
 5106 05b8 02040000 		.4byte	.LASF99
 5107 05bc 01       		.byte	0x1
 5108 05bd 3903     		.2byte	0x339
 5109 05bf 91060000 		.4byte	0x691
 5110 05c3 BE010000 		.4byte	.LLST9
 5111 05c7 19       		.uleb128 0x19
 5112 05c8 E8040000 		.4byte	.LASF100
 5113 05cc 01       		.byte	0x1
 5114 05cd 3A03     		.2byte	0x33a
 5115 05cf 96060000 		.4byte	0x696
 5116 05d3 FB010000 		.4byte	.LLST10
 5117 05d7 19       		.uleb128 0x19
 5118 05d8 830E0000 		.4byte	.LASF69
 5119 05dc 01       		.byte	0x1
 5120 05dd 3B03     		.2byte	0x33b
 5121 05df 40010000 		.4byte	0x140
 5122 05e3 19020000 		.4byte	.LLST11
 5123 05e7 1F       		.uleb128 0x1f
 5124 05e8 96040000 		.4byte	.LASF101
 5125 05ec 01       		.byte	0x1
 5126 05ed 3C03     		.2byte	0x33c
 5127 05ef A1060000 		.4byte	0x6a1
 5128 05f3 02       		.uleb128 0x2
 5129 05f4 91       		.byte	0x91
 5130 05f5 04       		.sleb128 4
 5131 05f6 1F       		.uleb128 0x1f
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 193


 5132 05f7 75020000 		.4byte	.LASF102
 5133 05fb 01       		.byte	0x1
 5134 05fc 3D03     		.2byte	0x33d
 5135 05fe 3B050000 		.4byte	0x53b
 5136 0602 02       		.uleb128 0x2
 5137 0603 91       		.byte	0x91
 5138 0604 08       		.sleb128 8
 5139 0605 1F       		.uleb128 0x1f
 5140 0606 E1060000 		.4byte	.LASF103
 5141 060a 01       		.byte	0x1
 5142 060b 3E03     		.2byte	0x33e
 5143 060d B1060000 		.4byte	0x6b1
 5144 0611 02       		.uleb128 0x2
 5145 0612 91       		.byte	0x91
 5146 0613 0C       		.sleb128 12
 5147 0614 20       		.uleb128 0x20
 5148 0615 DB040000 		.4byte	.LASF66
 5149 0619 01       		.byte	0x1
 5150 061a 4003     		.2byte	0x340
 5151 061c 27030000 		.4byte	0x327
 5152 0620 01       		.uleb128 0x1
 5153 0621 57       		.byte	0x57
 5154 0622 21       		.uleb128 0x21
 5155 0623 7800     		.ascii	"x\000"
 5156 0625 01       		.byte	0x1
 5157 0626 4103     		.2byte	0x341
 5158 0628 40010000 		.4byte	0x140
 5159 062c 38020000 		.4byte	.LLST12
 5160 0630 22       		.uleb128 0x22
 5161 0631 1E000000 		.4byte	.LVL24
 5162 0635 3E1F0000 		.4byte	0x1f3e
 5163 0639 4C060000 		.4byte	0x64c
 5164 063d 1E       		.uleb128 0x1e
 5165 063e 01       		.uleb128 0x1
 5166 063f 51       		.byte	0x51
 5167 0640 02       		.uleb128 0x2
 5168 0641 08       		.byte	0x8
 5169 0642 A5       		.byte	0xa5
 5170 0643 1E       		.uleb128 0x1e
 5171 0644 01       		.uleb128 0x1
 5172 0645 52       		.byte	0x52
 5173 0646 04       		.uleb128 0x4
 5174 0647 77       		.byte	0x77
 5175 0648 00       		.sleb128 0
 5176 0649 32       		.byte	0x32
 5177 064a 24       		.byte	0x24
 5178 064b 00       		.byte	0
 5179 064c 22       		.uleb128 0x22
 5180 064d 5E000000 		.4byte	.LVL32
 5181 0651 491F0000 		.4byte	0x1f49
 5182 0655 60060000 		.4byte	0x660
 5183 0659 1E       		.uleb128 0x1e
 5184 065a 01       		.uleb128 0x1
 5185 065b 50       		.byte	0x50
 5186 065c 02       		.uleb128 0x2
 5187 065d 74       		.byte	0x74
 5188 065e 04       		.sleb128 4
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 194


 5189 065f 00       		.byte	0
 5190 0660 22       		.uleb128 0x22
 5191 0661 66000000 		.4byte	.LVL33
 5192 0665 491F0000 		.4byte	0x1f49
 5193 0669 74060000 		.4byte	0x674
 5194 066d 1E       		.uleb128 0x1e
 5195 066e 01       		.uleb128 0x1
 5196 066f 50       		.byte	0x50
 5197 0670 02       		.uleb128 0x2
 5198 0671 74       		.byte	0x74
 5199 0672 18       		.sleb128 24
 5200 0673 00       		.byte	0
 5201 0674 1D       		.uleb128 0x1d
 5202 0675 80000000 		.4byte	.LVL35
 5203 0679 551F0000 		.4byte	0x1f55
 5204 067d 1E       		.uleb128 0x1e
 5205 067e 01       		.uleb128 0x1
 5206 067f 50       		.byte	0x50
 5207 0680 02       		.uleb128 0x2
 5208 0681 77       		.byte	0x77
 5209 0682 00       		.sleb128 0
 5210 0683 1E       		.uleb128 0x1e
 5211 0684 01       		.uleb128 0x1
 5212 0685 51       		.byte	0x51
 5213 0686 02       		.uleb128 0x2
 5214 0687 79       		.byte	0x79
 5215 0688 00       		.sleb128 0
 5216 0689 1E       		.uleb128 0x1e
 5217 068a 01       		.uleb128 0x1
 5218 068b 52       		.byte	0x52
 5219 068c 02       		.uleb128 0x2
 5220 068d 7A       		.byte	0x7a
 5221 068e 00       		.sleb128 0
 5222 068f 00       		.byte	0
 5223 0690 00       		.byte	0
 5224 0691 07       		.uleb128 0x7
 5225 0692 EB000000 		.4byte	0xeb
 5226 0696 07       		.uleb128 0x7
 5227 0697 B0000000 		.4byte	0xb0
 5228 069b 06       		.uleb128 0x6
 5229 069c 04       		.byte	0x4
 5230 069d 39020000 		.4byte	0x239
 5231 06a1 07       		.uleb128 0x7
 5232 06a2 9B060000 		.4byte	0x69b
 5233 06a6 06       		.uleb128 0x6
 5234 06a7 04       		.byte	0x4
 5235 06a8 AC060000 		.4byte	0x6ac
 5236 06ac 07       		.uleb128 0x7
 5237 06ad 17030000 		.4byte	0x317
 5238 06b1 07       		.uleb128 0x7
 5239 06b2 A6060000 		.4byte	0x6a6
 5240 06b6 1B       		.uleb128 0x1b
 5241 06b7 A6050000 		.4byte	.LASF104
 5242 06bb 01       		.byte	0x1
 5243 06bc 6C0D     		.2byte	0xd6c
 5244 06be 00000000 		.4byte	.LFB102
 5245 06c2 58000000 		.4byte	.LFE102-.LFB102
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 195


 5246 06c6 01       		.uleb128 0x1
 5247 06c7 9C       		.byte	0x9c
 5248 06c8 5F070000 		.4byte	0x75f
 5249 06cc 1A       		.uleb128 0x1a
 5250 06cd 830E0000 		.4byte	.LASF69
 5251 06d1 01       		.byte	0x1
 5252 06d2 6E0D     		.2byte	0xd6e
 5253 06d4 40010000 		.4byte	0x140
 5254 06d8 57020000 		.4byte	.LLST13
 5255 06dc 22       		.uleb128 0x22
 5256 06dd 14000000 		.4byte	.LVL38
 5257 06e1 601F0000 		.4byte	0x1f60
 5258 06e5 FD060000 		.4byte	0x6fd
 5259 06e9 1E       		.uleb128 0x1e
 5260 06ea 01       		.uleb128 0x1
 5261 06eb 50       		.byte	0x50
 5262 06ec 0F       		.uleb128 0xf
 5263 06ed 74       		.byte	0x74
 5264 06ee 00       		.sleb128 0
 5265 06ef 32       		.byte	0x32
 5266 06f0 24       		.byte	0x24
 5267 06f1 74       		.byte	0x74
 5268 06f2 00       		.sleb128 0
 5269 06f3 22       		.byte	0x22
 5270 06f4 32       		.byte	0x32
 5271 06f5 24       		.byte	0x24
 5272 06f6 03       		.byte	0x3
 5273 06f7 30000000 		.4byte	.LANCHOR0+48
 5274 06fb 22       		.byte	0x22
 5275 06fc 00       		.byte	0
 5276 06fd 22       		.uleb128 0x22
 5277 06fe 26000000 		.4byte	.LVL41
 5278 0702 601F0000 		.4byte	0x1f60
 5279 0706 11070000 		.4byte	0x711
 5280 070a 1E       		.uleb128 0x1e
 5281 070b 01       		.uleb128 0x1
 5282 070c 50       		.byte	0x50
 5283 070d 02       		.uleb128 0x2
 5284 070e 76       		.byte	0x76
 5285 070f 00       		.sleb128 0
 5286 0710 00       		.byte	0
 5287 0711 22       		.uleb128 0x22
 5288 0712 30000000 		.4byte	.LVL42
 5289 0716 601F0000 		.4byte	0x1f60
 5290 071a 25070000 		.4byte	0x725
 5291 071e 1E       		.uleb128 0x1e
 5292 071f 01       		.uleb128 0x1
 5293 0720 50       		.byte	0x50
 5294 0721 02       		.uleb128 0x2
 5295 0722 75       		.byte	0x75
 5296 0723 00       		.sleb128 0
 5297 0724 00       		.byte	0
 5298 0725 22       		.uleb128 0x22
 5299 0726 38000000 		.4byte	.LVL43
 5300 072a 601F0000 		.4byte	0x1f60
 5301 072e 39070000 		.4byte	0x739
 5302 0732 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 196


 5303 0733 01       		.uleb128 0x1
 5304 0734 50       		.byte	0x50
 5305 0735 02       		.uleb128 0x2
 5306 0736 74       		.byte	0x74
 5307 0737 14       		.sleb128 20
 5308 0738 00       		.byte	0
 5309 0739 22       		.uleb128 0x22
 5310 073a 40000000 		.4byte	.LVL44
 5311 073e 601F0000 		.4byte	0x1f60
 5312 0742 4E070000 		.4byte	0x74e
 5313 0746 1E       		.uleb128 0x1e
 5314 0747 01       		.uleb128 0x1
 5315 0748 50       		.byte	0x50
 5316 0749 03       		.uleb128 0x3
 5317 074a 74       		.byte	0x74
 5318 074b BC01     		.sleb128 188
 5319 074d 00       		.byte	0
 5320 074e 1D       		.uleb128 0x1d
 5321 074f 46000000 		.4byte	.LVL45
 5322 0753 601F0000 		.4byte	0x1f60
 5323 0757 1E       		.uleb128 0x1e
 5324 0758 01       		.uleb128 0x1
 5325 0759 50       		.byte	0x50
 5326 075a 02       		.uleb128 0x2
 5327 075b 74       		.byte	0x74
 5328 075c 00       		.sleb128 0
 5329 075d 00       		.byte	0
 5330 075e 00       		.byte	0
 5331 075f 1B       		.uleb128 0x1b
 5332 0760 6B050000 		.4byte	.LASF105
 5333 0764 01       		.byte	0x1
 5334 0765 0304     		.2byte	0x403
 5335 0767 00000000 		.4byte	.LFB71
 5336 076b AC000000 		.4byte	.LFE71-.LFB71
 5337 076f 01       		.uleb128 0x1
 5338 0770 9C       		.byte	0x9c
 5339 0771 B5070000 		.4byte	0x7b5
 5340 0775 19       		.uleb128 0x19
 5341 0776 75020000 		.4byte	.LASF102
 5342 077a 01       		.byte	0x1
 5343 077b 0304     		.2byte	0x403
 5344 077d 3B050000 		.4byte	0x53b
 5345 0781 76020000 		.4byte	.LLST14
 5346 0785 1C       		.uleb128 0x1c
 5347 0786 08000000 		.4byte	.LVL47
 5348 078a 6C1F0000 		.4byte	0x1f6c
 5349 078e 1C       		.uleb128 0x1c
 5350 078f 2C000000 		.4byte	.LVL48
 5351 0793 B6060000 		.4byte	0x6b6
 5352 0797 22       		.uleb128 0x22
 5353 0798 7A000000 		.4byte	.LVL49
 5354 079c 771F0000 		.4byte	0x1f77
 5355 07a0 AB070000 		.4byte	0x7ab
 5356 07a4 1E       		.uleb128 0x1e
 5357 07a5 01       		.uleb128 0x1
 5358 07a6 51       		.byte	0x51
 5359 07a7 02       		.uleb128 0x2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 197


 5360 07a8 75       		.byte	0x75
 5361 07a9 04       		.sleb128 4
 5362 07aa 00       		.byte	0
 5363 07ab 1C       		.uleb128 0x1c
 5364 07ac 7E000000 		.4byte	.LVL50
 5365 07b0 831F0000 		.4byte	0x1f83
 5366 07b4 00       		.byte	0
 5367 07b5 1B       		.uleb128 0x1b
 5368 07b6 B80A0000 		.4byte	.LASF106
 5369 07ba 01       		.byte	0x1
 5370 07bb 8C0D     		.2byte	0xd8c
 5371 07bd 00000000 		.4byte	.LFB103
 5372 07c1 44000000 		.4byte	.LFE103-.LFB103
 5373 07c5 01       		.uleb128 0x1
 5374 07c6 9C       		.byte	0x9c
 5375 07c7 1C080000 		.4byte	0x81c
 5376 07cb 23       		.uleb128 0x23
 5377 07cc 02000000 		.4byte	.LBB26
 5378 07d0 3C000000 		.4byte	.LBE26-.LBB26
 5379 07d4 1A       		.uleb128 0x1a
 5380 07d5 41050000 		.4byte	.LASF88
 5381 07d9 01       		.byte	0x1
 5382 07da 930D     		.2byte	0xd93
 5383 07dc 3B050000 		.4byte	0x53b
 5384 07e0 A2020000 		.4byte	.LLST15
 5385 07e4 1C       		.uleb128 0x1c
 5386 07e5 08000000 		.4byte	.LVL52
 5387 07e9 6C1F0000 		.4byte	0x1f6c
 5388 07ed 22       		.uleb128 0x22
 5389 07ee 16000000 		.4byte	.LVL54
 5390 07f2 8E1F0000 		.4byte	0x1f8e
 5391 07f6 01080000 		.4byte	0x801
 5392 07fa 1E       		.uleb128 0x1e
 5393 07fb 01       		.uleb128 0x1
 5394 07fc 50       		.byte	0x50
 5395 07fd 02       		.uleb128 0x2
 5396 07fe 75       		.byte	0x75
 5397 07ff 04       		.sleb128 4
 5398 0800 00       		.byte	0
 5399 0801 1C       		.uleb128 0x1c
 5400 0802 2E000000 		.4byte	.LVL55
 5401 0806 831F0000 		.4byte	0x1f83
 5402 080a 1D       		.uleb128 0x1d
 5403 080b 34000000 		.4byte	.LVL56
 5404 080f 41050000 		.4byte	0x541
 5405 0813 1E       		.uleb128 0x1e
 5406 0814 01       		.uleb128 0x1
 5407 0815 50       		.byte	0x50
 5408 0816 02       		.uleb128 0x2
 5409 0817 75       		.byte	0x75
 5410 0818 00       		.sleb128 0
 5411 0819 00       		.byte	0
 5412 081a 00       		.byte	0
 5413 081b 00       		.byte	0
 5414 081c 24       		.uleb128 0x24
 5415 081d 20060000 		.4byte	.LASF107
 5416 0821 01       		.byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 198


 5417 0822 980C     		.2byte	0xc98
 5418 0824 00000000 		.4byte	.LFB101
 5419 0828 08000000 		.4byte	.LFE101-.LFB101
 5420 082c 01       		.uleb128 0x1
 5421 082d 9C       		.byte	0x9c
 5422 082e 4C080000 		.4byte	0x84c
 5423 0832 19       		.uleb128 0x19
 5424 0833 E8040000 		.4byte	.LASF100
 5425 0837 01       		.byte	0x1
 5426 0838 980C     		.2byte	0xc98
 5427 083a B0000000 		.4byte	0xb0
 5428 083e B5020000 		.4byte	.LLST16
 5429 0842 1C       		.uleb128 0x1c
 5430 0843 06000000 		.4byte	.LVL59
 5431 0847 B5070000 		.4byte	0x7b5
 5432 084b 00       		.byte	0
 5433 084c 1B       		.uleb128 0x1b
 5434 084d 240B0000 		.4byte	.LASF108
 5435 0851 01       		.byte	0x1
 5436 0852 2D13     		.2byte	0x132d
 5437 0854 00000000 		.4byte	.LFB120
 5438 0858 84000000 		.4byte	.LFE120-.LFB120
 5439 085c 01       		.uleb128 0x1
 5440 085d 9C       		.byte	0x9c
 5441 085e D5080000 		.4byte	0x8d5
 5442 0862 19       		.uleb128 0x19
 5443 0863 CD010000 		.4byte	.LASF109
 5444 0867 01       		.byte	0x1
 5445 0868 2D13     		.2byte	0x132d
 5446 086a 4B010000 		.4byte	0x14b
 5447 086e D6020000 		.4byte	.LLST17
 5448 0872 19       		.uleb128 0x19
 5449 0873 0B000000 		.4byte	.LASF110
 5450 0877 01       		.byte	0x1
 5451 0878 2D13     		.2byte	0x132d
 5452 087a D5080000 		.4byte	0x8d5
 5453 087e 02030000 		.4byte	.LLST18
 5454 0882 1A       		.uleb128 0x1a
 5455 0883 25010000 		.4byte	.LASF111
 5456 0887 01       		.byte	0x1
 5457 0888 2F13     		.2byte	0x132f
 5458 088a 4B010000 		.4byte	0x14b
 5459 088e 2E030000 		.4byte	.LLST19
 5460 0892 1A       		.uleb128 0x1a
 5461 0893 57040000 		.4byte	.LASF112
 5462 0897 01       		.byte	0x1
 5463 0898 3013     		.2byte	0x1330
 5464 089a DA080000 		.4byte	0x8da
 5465 089e 41030000 		.4byte	.LLST20
 5466 08a2 1C       		.uleb128 0x1c
 5467 08a3 16000000 		.4byte	.LVL63
 5468 08a7 8E1F0000 		.4byte	0x1f8e
 5469 08ab 22       		.uleb128 0x22
 5470 08ac 46000000 		.4byte	.LVL64
 5471 08b0 771F0000 		.4byte	0x1f77
 5472 08b4 C2080000 		.4byte	0x8c2
 5473 08b8 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 199


 5474 08b9 01       		.uleb128 0x1
 5475 08ba 50       		.byte	0x50
 5476 08bb 05       		.uleb128 0x5
 5477 08bc 03       		.byte	0x3
 5478 08bd 00000000 		.4byte	.LANCHOR0
 5479 08c1 00       		.byte	0
 5480 08c2 1C       		.uleb128 0x1c
 5481 08c3 66000000 		.4byte	.LVL67
 5482 08c7 9A1F0000 		.4byte	0x1f9a
 5483 08cb 1C       		.uleb128 0x1c
 5484 08cc 76000000 		.4byte	.LVL70
 5485 08d0 9A1F0000 		.4byte	0x1f9a
 5486 08d4 00       		.byte	0
 5487 08d5 07       		.uleb128 0x7
 5488 08d6 35010000 		.4byte	0x135
 5489 08da 07       		.uleb128 0x7
 5490 08db 4B010000 		.4byte	0x14b
 5491 08df 25       		.uleb128 0x25
 5492 08e0 13070000 		.4byte	.LASF115
 5493 08e4 01       		.byte	0x1
 5494 08e5 DC02     		.2byte	0x2dc
 5495 08e7 35010000 		.4byte	0x135
 5496 08eb 00000000 		.4byte	.LFB69
 5497 08ef 62000000 		.4byte	.LFE69-.LFB69
 5498 08f3 01       		.uleb128 0x1
 5499 08f4 9C       		.byte	0x9c
 5500 08f5 230A0000 		.4byte	0xa23
 5501 08f9 19       		.uleb128 0x19
 5502 08fa 48070000 		.4byte	.LASF97
 5503 08fe 01       		.byte	0x1
 5504 08ff DC02     		.2byte	0x2dc
 5505 0901 0E010000 		.4byte	0x10e
 5506 0905 54030000 		.4byte	.LLST21
 5507 0909 19       		.uleb128 0x19
 5508 090a BA0E0000 		.4byte	.LASF98
 5509 090e 01       		.byte	0x1
 5510 090f DD02     		.2byte	0x2dd
 5511 0911 22030000 		.4byte	0x322
 5512 0915 72030000 		.4byte	.LLST22
 5513 0919 19       		.uleb128 0x19
 5514 091a 83030000 		.4byte	.LASF113
 5515 091e 01       		.byte	0x1
 5516 091f DE02     		.2byte	0x2de
 5517 0921 230A0000 		.4byte	0xa23
 5518 0925 90030000 		.4byte	.LLST23
 5519 0929 19       		.uleb128 0x19
 5520 092a E8040000 		.4byte	.LASF100
 5521 092e 01       		.byte	0x1
 5522 092f DF02     		.2byte	0x2df
 5523 0931 96060000 		.4byte	0x696
 5524 0935 B1030000 		.4byte	.LLST24
 5525 0939 1F       		.uleb128 0x1f
 5526 093a 830E0000 		.4byte	.LASF69
 5527 093e 01       		.byte	0x1
 5528 093f E002     		.2byte	0x2e0
 5529 0941 40010000 		.4byte	0x140
 5530 0945 02       		.uleb128 0x2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 200


 5531 0946 91       		.byte	0x91
 5532 0947 00       		.sleb128 0
 5533 0948 1F       		.uleb128 0x1f
 5534 0949 96040000 		.4byte	.LASF101
 5535 094d 01       		.byte	0x1
 5536 094e E102     		.2byte	0x2e1
 5537 0950 A1060000 		.4byte	0x6a1
 5538 0954 02       		.uleb128 0x2
 5539 0955 91       		.byte	0x91
 5540 0956 04       		.sleb128 4
 5541 0957 1A       		.uleb128 0x1a
 5542 0958 75020000 		.4byte	.LASF102
 5543 095c 01       		.byte	0x1
 5544 095d E302     		.2byte	0x2e3
 5545 095f 3B050000 		.4byte	0x53b
 5546 0963 CF030000 		.4byte	.LLST25
 5547 0967 1A       		.uleb128 0x1a
 5548 0968 4F040000 		.4byte	.LASF87
 5549 096c 01       		.byte	0x1
 5550 096d E402     		.2byte	0x2e4
 5551 096f 35010000 		.4byte	0x135
 5552 0973 F8030000 		.4byte	.LLST26
 5553 0977 26       		.uleb128 0x26
 5554 0978 0E000000 		.4byte	.LBB27
 5555 097c 24000000 		.4byte	.LBE27-.LBB27
 5556 0980 CF090000 		.4byte	0x9cf
 5557 0984 1A       		.uleb128 0x1a
 5558 0985 65060000 		.4byte	.LASF70
 5559 0989 01       		.byte	0x1
 5560 098a 0103     		.2byte	0x301
 5561 098c 27030000 		.4byte	0x327
 5562 0990 17040000 		.4byte	.LLST27
 5563 0994 22       		.uleb128 0x22
 5564 0995 14000000 		.4byte	.LVL74
 5565 0999 A61F0000 		.4byte	0x1fa6
 5566 099d AA090000 		.4byte	0x9aa
 5567 09a1 1E       		.uleb128 0x1e
 5568 09a2 01       		.uleb128 0x1
 5569 09a3 50       		.byte	0x50
 5570 09a4 04       		.uleb128 0x4
 5571 09a5 75       		.byte	0x75
 5572 09a6 00       		.sleb128 0
 5573 09a7 32       		.byte	0x32
 5574 09a8 24       		.byte	0x24
 5575 09a9 00       		.byte	0
 5576 09aa 22       		.uleb128 0x22
 5577 09ab 1E000000 		.4byte	.LVL76
 5578 09af A61F0000 		.4byte	0x1fa6
 5579 09b3 BE090000 		.4byte	0x9be
 5580 09b7 1E       		.uleb128 0x1e
 5581 09b8 01       		.uleb128 0x1
 5582 09b9 50       		.byte	0x50
 5583 09ba 02       		.uleb128 0x2
 5584 09bb 08       		.byte	0x8
 5585 09bc 50       		.byte	0x50
 5586 09bd 00       		.byte	0
 5587 09be 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 201


 5588 09bf 2E000000 		.4byte	.LVL78
 5589 09c3 331F0000 		.4byte	0x1f33
 5590 09c7 1E       		.uleb128 0x1e
 5591 09c8 01       		.uleb128 0x1
 5592 09c9 50       		.byte	0x50
 5593 09ca 02       		.uleb128 0x2
 5594 09cb 79       		.byte	0x79
 5595 09cc 00       		.sleb128 0
 5596 09cd 00       		.byte	0
 5597 09ce 00       		.byte	0
 5598 09cf 22       		.uleb128 0x22
 5599 09d0 4E000000 		.4byte	.LVL81
 5600 09d4 81050000 		.4byte	0x581
 5601 09d8 120A0000 		.4byte	0xa12
 5602 09dc 1E       		.uleb128 0x1e
 5603 09dd 01       		.uleb128 0x1
 5604 09de 50       		.byte	0x50
 5605 09df 02       		.uleb128 0x2
 5606 09e0 76       		.byte	0x76
 5607 09e1 00       		.sleb128 0
 5608 09e2 1E       		.uleb128 0x1e
 5609 09e3 01       		.uleb128 0x1
 5610 09e4 51       		.byte	0x51
 5611 09e5 02       		.uleb128 0x2
 5612 09e6 77       		.byte	0x77
 5613 09e7 00       		.sleb128 0
 5614 09e8 1E       		.uleb128 0x1e
 5615 09e9 01       		.uleb128 0x1
 5616 09ea 52       		.byte	0x52
 5617 09eb 02       		.uleb128 0x2
 5618 09ec 75       		.byte	0x75
 5619 09ed 00       		.sleb128 0
 5620 09ee 1E       		.uleb128 0x1e
 5621 09ef 01       		.uleb128 0x1
 5622 09f0 53       		.byte	0x53
 5623 09f1 02       		.uleb128 0x2
 5624 09f2 78       		.byte	0x78
 5625 09f3 00       		.sleb128 0
 5626 09f4 1E       		.uleb128 0x1e
 5627 09f5 02       		.uleb128 0x2
 5628 09f6 7D       		.byte	0x7d
 5629 09f7 00       		.sleb128 0
 5630 09f8 03       		.uleb128 0x3
 5631 09f9 91       		.byte	0x91
 5632 09fa 00       		.sleb128 0
 5633 09fb 06       		.byte	0x6
 5634 09fc 1E       		.uleb128 0x1e
 5635 09fd 02       		.uleb128 0x2
 5636 09fe 7D       		.byte	0x7d
 5637 09ff 04       		.sleb128 4
 5638 0a00 03       		.uleb128 0x3
 5639 0a01 91       		.byte	0x91
 5640 0a02 04       		.sleb128 4
 5641 0a03 06       		.byte	0x6
 5642 0a04 1E       		.uleb128 0x1e
 5643 0a05 02       		.uleb128 0x2
 5644 0a06 7D       		.byte	0x7d
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 202


 5645 0a07 08       		.sleb128 8
 5646 0a08 02       		.uleb128 0x2
 5647 0a09 74       		.byte	0x74
 5648 0a0a 00       		.sleb128 0
 5649 0a0b 1E       		.uleb128 0x1e
 5650 0a0c 02       		.uleb128 0x2
 5651 0a0d 7D       		.byte	0x7d
 5652 0a0e 0C       		.sleb128 12
 5653 0a0f 01       		.uleb128 0x1
 5654 0a10 30       		.byte	0x30
 5655 0a11 00       		.byte	0
 5656 0a12 1D       		.uleb128 0x1d
 5657 0a13 54000000 		.4byte	.LVL82
 5658 0a17 5F070000 		.4byte	0x75f
 5659 0a1b 1E       		.uleb128 0x1e
 5660 0a1c 01       		.uleb128 0x1
 5661 0a1d 50       		.byte	0x50
 5662 0a1e 02       		.uleb128 0x2
 5663 0a1f 74       		.byte	0x74
 5664 0a20 00       		.sleb128 0
 5665 0a21 00       		.byte	0
 5666 0a22 00       		.byte	0
 5667 0a23 07       		.uleb128 0x7
 5668 0a24 D5000000 		.4byte	0xd5
 5669 0a28 27       		.uleb128 0x27
 5670 0a29 DD0B0000 		.4byte	.LASF123
 5671 0a2d 01       		.byte	0x1
 5672 0a2e 5804     		.2byte	0x458
 5673 0a30 00000000 		.4byte	.LFB72
 5674 0a34 BC000000 		.4byte	.LFE72-.LFB72
 5675 0a38 01       		.uleb128 0x1
 5676 0a39 9C       		.byte	0x9c
 5677 0a3a D10A0000 		.4byte	0xad1
 5678 0a3e 19       		.uleb128 0x19
 5679 0a3f 5D080000 		.4byte	.LASF114
 5680 0a43 01       		.byte	0x1
 5681 0a44 5804     		.2byte	0x458
 5682 0a46 39020000 		.4byte	0x239
 5683 0a4a 40040000 		.4byte	.LLST28
 5684 0a4e 1A       		.uleb128 0x1a
 5685 0a4f 41050000 		.4byte	.LASF88
 5686 0a53 01       		.byte	0x1
 5687 0a54 5A04     		.2byte	0x45a
 5688 0a56 3B050000 		.4byte	0x53b
 5689 0a5a 5E040000 		.4byte	.LLST29
 5690 0a5e 1C       		.uleb128 0x1c
 5691 0a5f 08000000 		.4byte	.LVL86
 5692 0a63 6C1F0000 		.4byte	0x1f6c
 5693 0a67 22       		.uleb128 0x22
 5694 0a68 18000000 		.4byte	.LVL88
 5695 0a6c 8E1F0000 		.4byte	0x1f8e
 5696 0a70 7B0A0000 		.4byte	0xa7b
 5697 0a74 1E       		.uleb128 0x1e
 5698 0a75 01       		.uleb128 0x1
 5699 0a76 50       		.byte	0x50
 5700 0a77 02       		.uleb128 0x2
 5701 0a78 75       		.byte	0x75
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 203


 5702 0a79 00       		.sleb128 0
 5703 0a7a 00       		.byte	0
 5704 0a7b 22       		.uleb128 0x22
 5705 0a7c 48000000 		.4byte	.LVL89
 5706 0a80 8E1F0000 		.4byte	0x1f8e
 5707 0a84 8F0A0000 		.4byte	0xa8f
 5708 0a88 1E       		.uleb128 0x1e
 5709 0a89 01       		.uleb128 0x1
 5710 0a8a 50       		.byte	0x50
 5711 0a8b 02       		.uleb128 0x2
 5712 0a8c 74       		.byte	0x74
 5713 0a8d 18       		.sleb128 24
 5714 0a8e 00       		.byte	0
 5715 0a8f 22       		.uleb128 0x22
 5716 0a90 68000000 		.4byte	.LVL90
 5717 0a94 771F0000 		.4byte	0x1f77
 5718 0a98 AA0A0000 		.4byte	0xaaa
 5719 0a9c 1E       		.uleb128 0x1e
 5720 0a9d 01       		.uleb128 0x1
 5721 0a9e 50       		.byte	0x50
 5722 0a9f 03       		.uleb128 0x3
 5723 0aa0 76       		.byte	0x76
 5724 0aa1 BC01     		.sleb128 188
 5725 0aa3 1E       		.uleb128 0x1e
 5726 0aa4 01       		.uleb128 0x1
 5727 0aa5 51       		.byte	0x51
 5728 0aa6 02       		.uleb128 0x2
 5729 0aa7 75       		.byte	0x75
 5730 0aa8 00       		.sleb128 0
 5731 0aa9 00       		.byte	0
 5732 0aaa 22       		.uleb128 0x22
 5733 0aab 86000000 		.4byte	.LVL91
 5734 0aaf 41050000 		.4byte	0x541
 5735 0ab3 BE0A0000 		.4byte	0xabe
 5736 0ab7 1E       		.uleb128 0x1e
 5737 0ab8 01       		.uleb128 0x1
 5738 0ab9 50       		.byte	0x50
 5739 0aba 02       		.uleb128 0x2
 5740 0abb 74       		.byte	0x74
 5741 0abc 00       		.sleb128 0
 5742 0abd 00       		.byte	0
 5743 0abe 1C       		.uleb128 0x1c
 5744 0abf 8A000000 		.4byte	.LVL92
 5745 0ac3 14050000 		.4byte	0x514
 5746 0ac7 1C       		.uleb128 0x1c
 5747 0ac8 8E000000 		.4byte	.LVL93
 5748 0acc 831F0000 		.4byte	0x1f83
 5749 0ad0 00       		.byte	0
 5750 0ad1 25       		.uleb128 0x25
 5751 0ad2 9C080000 		.4byte	.LASF116
 5752 0ad6 01       		.byte	0x1
 5753 0ad7 3505     		.2byte	0x535
 5754 0ad9 75020000 		.4byte	0x275
 5755 0add 00000000 		.4byte	.LFB75
 5756 0ae1 64000000 		.4byte	.LFE75-.LFB75
 5757 0ae5 01       		.uleb128 0x1
 5758 0ae6 9C       		.byte	0x9c
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 204


 5759 0ae7 3C0B0000 		.4byte	0xb3c
 5760 0aeb 19       		.uleb128 0x19
 5761 0aec D80A0000 		.4byte	.LASF91
 5762 0af0 01       		.byte	0x1
 5763 0af1 3505     		.2byte	0x535
 5764 0af3 39020000 		.4byte	0x239
 5765 0af7 71040000 		.4byte	.LLST30
 5766 0afb 20       		.uleb128 0x20
 5767 0afc 1C030000 		.4byte	.LASF117
 5768 0b00 01       		.byte	0x1
 5769 0b01 3705     		.2byte	0x537
 5770 0b03 75020000 		.4byte	0x275
 5771 0b07 01       		.uleb128 0x1
 5772 0b08 50       		.byte	0x50
 5773 0b09 1A       		.uleb128 0x1a
 5774 0b0a 50030000 		.4byte	.LASF118
 5775 0b0e 01       		.byte	0x1
 5776 0b0f 3805     		.2byte	0x538
 5777 0b11 3C0B0000 		.4byte	0xb3c
 5778 0b15 C1040000 		.4byte	.LLST31
 5779 0b19 1A       		.uleb128 0x1a
 5780 0b1a 41050000 		.4byte	.LASF88
 5781 0b1e 01       		.byte	0x1
 5782 0b1f 3905     		.2byte	0x539
 5783 0b21 C9040000 		.4byte	0x4c9
 5784 0b25 DF040000 		.4byte	.LLST32
 5785 0b29 1C       		.uleb128 0x1c
 5786 0b2a 12000000 		.4byte	.LVL97
 5787 0b2e 6C1F0000 		.4byte	0x1f6c
 5788 0b32 1C       		.uleb128 0x1c
 5789 0b33 18000000 		.4byte	.LVL99
 5790 0b37 831F0000 		.4byte	0x1f83
 5791 0b3b 00       		.byte	0
 5792 0b3c 06       		.uleb128 0x6
 5793 0b3d 04       		.byte	0x4
 5794 0b3e 2E020000 		.4byte	0x22e
 5795 0b42 25       		.uleb128 0x25
 5796 0b43 C10E0000 		.4byte	.LASF119
 5797 0b47 01       		.byte	0x1
 5798 0b48 7C05     		.2byte	0x57c
 5799 0b4a 40010000 		.4byte	0x140
 5800 0b4e 00000000 		.4byte	.LFB76
 5801 0b52 20000000 		.4byte	.LFE76-.LFB76
 5802 0b56 01       		.uleb128 0x1
 5803 0b57 9C       		.byte	0x9c
 5804 0b58 9F0B0000 		.4byte	0xb9f
 5805 0b5c 19       		.uleb128 0x19
 5806 0b5d D80A0000 		.4byte	.LASF91
 5807 0b61 01       		.byte	0x1
 5808 0b62 7C05     		.2byte	0x57c
 5809 0b64 39020000 		.4byte	0x239
 5810 0b68 2F050000 		.4byte	.LLST33
 5811 0b6c 1A       		.uleb128 0x1a
 5812 0b6d 41050000 		.4byte	.LASF88
 5813 0b71 01       		.byte	0x1
 5814 0b72 7E05     		.2byte	0x57e
 5815 0b74 3B050000 		.4byte	0x53b
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 205


 5816 0b78 4D050000 		.4byte	.LLST34
 5817 0b7c 1A       		.uleb128 0x1a
 5818 0b7d 9D050000 		.4byte	.LASF120
 5819 0b81 01       		.byte	0x1
 5820 0b82 7F05     		.2byte	0x57f
 5821 0b84 40010000 		.4byte	0x140
 5822 0b88 60050000 		.4byte	.LLST35
 5823 0b8c 1C       		.uleb128 0x1c
 5824 0b8d 08000000 		.4byte	.LVL111
 5825 0b91 6C1F0000 		.4byte	0x1f6c
 5826 0b95 1C       		.uleb128 0x1c
 5827 0b96 16000000 		.4byte	.LVL114
 5828 0b9a 831F0000 		.4byte	0x1f83
 5829 0b9e 00       		.byte	0
 5830 0b9f 25       		.uleb128 0x25
 5831 0ba0 A3090000 		.4byte	.LASF121
 5832 0ba4 01       		.byte	0x1
 5833 0ba5 9205     		.2byte	0x592
 5834 0ba7 40010000 		.4byte	0x140
 5835 0bab 00000000 		.4byte	.LFB77
 5836 0baf 28000000 		.4byte	.LFE77-.LFB77
 5837 0bb3 01       		.uleb128 0x1
 5838 0bb4 9C       		.byte	0x9c
 5839 0bb5 370C0000 		.4byte	0xc37
 5840 0bb9 19       		.uleb128 0x19
 5841 0bba D80A0000 		.4byte	.LASF91
 5842 0bbe 01       		.byte	0x1
 5843 0bbf 9205     		.2byte	0x592
 5844 0bc1 39020000 		.4byte	0x239
 5845 0bc5 7E050000 		.4byte	.LLST36
 5846 0bc9 1A       		.uleb128 0x1a
 5847 0bca 41050000 		.4byte	.LASF88
 5848 0bce 01       		.byte	0x1
 5849 0bcf 9405     		.2byte	0x594
 5850 0bd1 3B050000 		.4byte	0x53b
 5851 0bd5 91050000 		.4byte	.LLST37
 5852 0bd9 20       		.uleb128 0x20
 5853 0bda 9D050000 		.4byte	.LASF120
 5854 0bde 01       		.byte	0x1
 5855 0bdf 9505     		.2byte	0x595
 5856 0be1 40010000 		.4byte	0x140
 5857 0be5 01       		.uleb128 0x1
 5858 0be6 50       		.byte	0x50
 5859 0be7 28       		.uleb128 0x28
 5860 0be8 060C0000 		.4byte	.LASF122
 5861 0bec 01       		.byte	0x1
 5862 0bed 9505     		.2byte	0x595
 5863 0bef 40010000 		.4byte	0x140
 5864 0bf3 29       		.uleb128 0x29
 5865 0bf4 F0030000 		.4byte	0x3f0
 5866 0bf8 00000000 		.4byte	.LBB28
 5867 0bfc 14000000 		.4byte	.LBE28-.LBB28
 5868 0c00 01       		.byte	0x1
 5869 0c01 A905     		.2byte	0x5a9
 5870 0c03 1C0C0000 		.4byte	0xc1c
 5871 0c07 23       		.uleb128 0x23
 5872 0c08 00000000 		.4byte	.LBB29
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 206


 5873 0c0c 14000000 		.4byte	.LBE29-.LBB29
 5874 0c10 2A       		.uleb128 0x2a
 5875 0c11 00040000 		.4byte	0x400
 5876 0c15 2A       		.uleb128 0x2a
 5877 0c16 0B040000 		.4byte	0x40b
 5878 0c1a 00       		.byte	0
 5879 0c1b 00       		.byte	0
 5880 0c1c 2B       		.uleb128 0x2b
 5881 0c1d 17040000 		.4byte	0x417
 5882 0c21 1E000000 		.4byte	.LBB30
 5883 0c25 04000000 		.4byte	.LBE30-.LBB30
 5884 0c29 01       		.byte	0x1
 5885 0c2a B005     		.2byte	0x5b0
 5886 0c2c 2C       		.uleb128 0x2c
 5887 0c2d 23040000 		.4byte	0x423
 5888 0c31 A4050000 		.4byte	.LLST38
 5889 0c35 00       		.byte	0
 5890 0c36 00       		.byte	0
 5891 0c37 27       		.uleb128 0x27
 5892 0c38 9D030000 		.4byte	.LASF124
 5893 0c3c 01       		.byte	0x1
 5894 0c3d BA05     		.2byte	0x5ba
 5895 0c3f 00000000 		.4byte	.LFB78
 5896 0c43 E8000000 		.4byte	.LFE78-.LFB78
 5897 0c47 01       		.uleb128 0x1
 5898 0c48 9C       		.byte	0x9c
 5899 0c49 E80C0000 		.4byte	0xce8
 5900 0c4d 19       		.uleb128 0x19
 5901 0c4e D80A0000 		.4byte	.LASF91
 5902 0c52 01       		.byte	0x1
 5903 0c53 BA05     		.2byte	0x5ba
 5904 0c55 39020000 		.4byte	0x239
 5905 0c59 B7050000 		.4byte	.LLST39
 5906 0c5d 19       		.uleb128 0x19
 5907 0c5e 6B080000 		.4byte	.LASF125
 5908 0c62 01       		.byte	0x1
 5909 0c63 BA05     		.2byte	0x5ba
 5910 0c65 40010000 		.4byte	0x140
 5911 0c69 D5050000 		.4byte	.LLST40
 5912 0c6d 1A       		.uleb128 0x1a
 5913 0c6e 41050000 		.4byte	.LASF88
 5914 0c72 01       		.byte	0x1
 5915 0c73 BC05     		.2byte	0x5bc
 5916 0c75 3B050000 		.4byte	0x53b
 5917 0c79 00060000 		.4byte	.LLST41
 5918 0c7d 1A       		.uleb128 0x1a
 5919 0c7e 0A090000 		.4byte	.LASF126
 5920 0c82 01       		.byte	0x1
 5921 0c83 BD05     		.2byte	0x5bd
 5922 0c85 40010000 		.4byte	0x140
 5923 0c89 13060000 		.4byte	.LLST42
 5924 0c8d 1A       		.uleb128 0x1a
 5925 0c8e B7010000 		.4byte	.LASF127
 5926 0c92 01       		.byte	0x1
 5927 0c93 BD05     		.2byte	0x5bd
 5928 0c95 40010000 		.4byte	0x140
 5929 0c99 26060000 		.4byte	.LLST43
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 207


 5930 0c9d 1A       		.uleb128 0x1a
 5931 0c9e 47050000 		.4byte	.LASF128
 5932 0ca2 01       		.byte	0x1
 5933 0ca3 BE05     		.2byte	0x5be
 5934 0ca5 35010000 		.4byte	0x135
 5935 0ca9 39060000 		.4byte	.LLST44
 5936 0cad 1C       		.uleb128 0x1c
 5937 0cae 10000000 		.4byte	.LVL123
 5938 0cb2 6C1F0000 		.4byte	0x1f6c
 5939 0cb6 22       		.uleb128 0x22
 5940 0cb7 88000000 		.4byte	.LVL130
 5941 0cbb 8E1F0000 		.4byte	0x1f8e
 5942 0cbf CA0C0000 		.4byte	0xcca
 5943 0cc3 1E       		.uleb128 0x1e
 5944 0cc4 01       		.uleb128 0x1
 5945 0cc5 50       		.byte	0x50
 5946 0cc6 02       		.uleb128 0x2
 5947 0cc7 75       		.byte	0x75
 5948 0cc8 00       		.sleb128 0
 5949 0cc9 00       		.byte	0
 5950 0cca 22       		.uleb128 0x22
 5951 0ccb C2000000 		.4byte	.LVL132
 5952 0ccf 771F0000 		.4byte	0x1f77
 5953 0cd3 DE0C0000 		.4byte	0xcde
 5954 0cd7 1E       		.uleb128 0x1e
 5955 0cd8 01       		.uleb128 0x1
 5956 0cd9 51       		.byte	0x51
 5957 0cda 02       		.uleb128 0x2
 5958 0cdb 75       		.byte	0x75
 5959 0cdc 00       		.sleb128 0
 5960 0cdd 00       		.byte	0
 5961 0cde 1C       		.uleb128 0x1c
 5962 0cdf D8000000 		.4byte	.LVL134
 5963 0ce3 831F0000 		.4byte	0x1f83
 5964 0ce7 00       		.byte	0
 5965 0ce8 27       		.uleb128 0x27
 5966 0ce9 84050000 		.4byte	.LASF129
 5967 0ced 01       		.byte	0x1
 5968 0cee F106     		.2byte	0x6f1
 5969 0cf0 00000000 		.4byte	.LFB81
 5970 0cf4 78000000 		.4byte	.LFE81-.LFB81
 5971 0cf8 01       		.uleb128 0x1
 5972 0cf9 9C       		.byte	0x9c
 5973 0cfa 6D0D0000 		.4byte	0xd6d
 5974 0cfe 19       		.uleb128 0x19
 5975 0cff 71090000 		.4byte	.LASF130
 5976 0d03 01       		.byte	0x1
 5977 0d04 F106     		.2byte	0x6f1
 5978 0d06 39020000 		.4byte	0x239
 5979 0d0a 58060000 		.4byte	.LLST45
 5980 0d0e 1A       		.uleb128 0x1a
 5981 0d0f 41050000 		.4byte	.LASF88
 5982 0d13 01       		.byte	0x1
 5983 0d14 F306     		.2byte	0x6f3
 5984 0d16 6D0D0000 		.4byte	0xd6d
 5985 0d1a 58060000 		.4byte	.LLST45
 5986 0d1e 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 208


 5987 0d1f 14000000 		.4byte	.LVL137
 5988 0d23 6C1F0000 		.4byte	0x1f6c
 5989 0d27 22       		.uleb128 0x22
 5990 0d28 1A000000 		.4byte	.LVL138
 5991 0d2c 6E040000 		.4byte	0x46e
 5992 0d30 3B0D0000 		.4byte	0xd3b
 5993 0d34 1E       		.uleb128 0x1e
 5994 0d35 01       		.uleb128 0x1
 5995 0d36 50       		.byte	0x50
 5996 0d37 02       		.uleb128 0x2
 5997 0d38 74       		.byte	0x74
 5998 0d39 00       		.sleb128 0
 5999 0d3a 00       		.byte	0
 6000 0d3b 22       		.uleb128 0x22
 6001 0d3c 24000000 		.4byte	.LVL139
 6002 0d40 8E1F0000 		.4byte	0x1f8e
 6003 0d44 4F0D0000 		.4byte	0xd4f
 6004 0d48 1E       		.uleb128 0x1e
 6005 0d49 01       		.uleb128 0x1
 6006 0d4a 50       		.byte	0x50
 6007 0d4b 02       		.uleb128 0x2
 6008 0d4c 76       		.byte	0x76
 6009 0d4d 00       		.sleb128 0
 6010 0d4e 00       		.byte	0
 6011 0d4f 22       		.uleb128 0x22
 6012 0d50 4A000000 		.4byte	.LVL140
 6013 0d54 771F0000 		.4byte	0x1f77
 6014 0d58 630D0000 		.4byte	0xd63
 6015 0d5c 1E       		.uleb128 0x1e
 6016 0d5d 01       		.uleb128 0x1
 6017 0d5e 51       		.byte	0x51
 6018 0d5f 02       		.uleb128 0x2
 6019 0d60 76       		.byte	0x76
 6020 0d61 00       		.sleb128 0
 6021 0d62 00       		.byte	0
 6022 0d63 1C       		.uleb128 0x1c
 6023 0d64 6A000000 		.4byte	.LVL141
 6024 0d68 831F0000 		.4byte	0x1f83
 6025 0d6c 00       		.byte	0
 6026 0d6d 07       		.uleb128 0x7
 6027 0d6e 3B050000 		.4byte	0x53b
 6028 0d72 25       		.uleb128 0x25
 6029 0d73 2F040000 		.4byte	.LASF131
 6030 0d77 01       		.byte	0x1
 6031 0d78 2707     		.2byte	0x727
 6032 0d7a 35010000 		.4byte	0x135
 6033 0d7e 00000000 		.4byte	.LFB82
 6034 0d82 88000000 		.4byte	.LFE82-.LFB82
 6035 0d86 01       		.uleb128 0x1
 6036 0d87 9C       		.byte	0x9c
 6037 0d88 650E0000 		.4byte	0xe65
 6038 0d8c 19       		.uleb128 0x19
 6039 0d8d 71090000 		.4byte	.LASF130
 6040 0d91 01       		.byte	0x1
 6041 0d92 2707     		.2byte	0x727
 6042 0d94 39020000 		.4byte	0x239
 6043 0d98 81060000 		.4byte	.LLST47
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 209


 6044 0d9c 1A       		.uleb128 0x1a
 6045 0d9d 47050000 		.4byte	.LASF128
 6046 0da1 01       		.byte	0x1
 6047 0da2 2907     		.2byte	0x729
 6048 0da4 35010000 		.4byte	0x135
 6049 0da8 AD060000 		.4byte	.LLST48
 6050 0dac 1A       		.uleb128 0x1a
 6051 0dad 41050000 		.4byte	.LASF88
 6052 0db1 01       		.byte	0x1
 6053 0db2 2A07     		.2byte	0x72a
 6054 0db4 6D0D0000 		.4byte	0xd6d
 6055 0db8 EE060000 		.4byte	.LLST49
 6056 0dbc 28       		.uleb128 0x28
 6057 0dbd 8B0A0000 		.4byte	.LASF132
 6058 0dc1 01       		.byte	0x1
 6059 0dc2 2B07     		.2byte	0x72b
 6060 0dc4 40010000 		.4byte	0x140
 6061 0dc8 29       		.uleb128 0x29
 6062 0dc9 F0030000 		.4byte	0x3f0
 6063 0dcd 04000000 		.4byte	.LBB32
 6064 0dd1 14000000 		.4byte	.LBE32-.LBB32
 6065 0dd5 01       		.byte	0x1
 6066 0dd6 4107     		.2byte	0x741
 6067 0dd8 F10D0000 		.4byte	0xdf1
 6068 0ddc 23       		.uleb128 0x23
 6069 0ddd 04000000 		.4byte	.LBB33
 6070 0de1 14000000 		.4byte	.LBE33-.LBB33
 6071 0de5 2A       		.uleb128 0x2a
 6072 0de6 00040000 		.4byte	0x400
 6073 0dea 2A       		.uleb128 0x2a
 6074 0deb 0B040000 		.4byte	0x40b
 6075 0def 00       		.byte	0
 6076 0df0 00       		.byte	0
 6077 0df1 29       		.uleb128 0x29
 6078 0df2 17040000 		.4byte	0x417
 6079 0df6 78000000 		.4byte	.LBB34
 6080 0dfa 04000000 		.4byte	.LBE34-.LBB34
 6081 0dfe 01       		.byte	0x1
 6082 0dff 6507     		.2byte	0x765
 6083 0e01 0F0E0000 		.4byte	0xe0f
 6084 0e05 2C       		.uleb128 0x2c
 6085 0e06 23040000 		.4byte	0x423
 6086 0e0a 1A070000 		.4byte	.LLST50
 6087 0e0e 00       		.byte	0
 6088 0e0f 22       		.uleb128 0x22
 6089 0e10 1C000000 		.4byte	.LVL145
 6090 0e14 6E040000 		.4byte	0x46e
 6091 0e18 230E0000 		.4byte	0xe23
 6092 0e1c 1E       		.uleb128 0x1e
 6093 0e1d 01       		.uleb128 0x1
 6094 0e1e 50       		.byte	0x50
 6095 0e1f 02       		.uleb128 0x2
 6096 0e20 74       		.byte	0x74
 6097 0e21 00       		.sleb128 0
 6098 0e22 00       		.byte	0
 6099 0e23 22       		.uleb128 0x22
 6100 0e24 42000000 		.4byte	.LVL147
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 210


 6101 0e28 8E1F0000 		.4byte	0x1f8e
 6102 0e2c 370E0000 		.4byte	0xe37
 6103 0e30 1E       		.uleb128 0x1e
 6104 0e31 01       		.uleb128 0x1
 6105 0e32 50       		.byte	0x50
 6106 0e33 02       		.uleb128 0x2
 6107 0e34 77       		.byte	0x77
 6108 0e35 00       		.sleb128 0
 6109 0e36 00       		.byte	0
 6110 0e37 22       		.uleb128 0x22
 6111 0e38 66000000 		.4byte	.LVL148
 6112 0e3c 771F0000 		.4byte	0x1f77
 6113 0e40 4B0E0000 		.4byte	0xe4b
 6114 0e44 1E       		.uleb128 0x1e
 6115 0e45 01       		.uleb128 0x1
 6116 0e46 51       		.byte	0x51
 6117 0e47 02       		.uleb128 0x2
 6118 0e48 77       		.byte	0x77
 6119 0e49 00       		.sleb128 0
 6120 0e4a 00       		.byte	0
 6121 0e4b 1D       		.uleb128 0x1d
 6122 0e4c 72000000 		.4byte	.LVL150
 6123 0e50 771F0000 		.4byte	0x1f77
 6124 0e54 1E       		.uleb128 0x1e
 6125 0e55 01       		.uleb128 0x1
 6126 0e56 50       		.byte	0x50
 6127 0e57 05       		.uleb128 0x5
 6128 0e58 03       		.byte	0x3
 6129 0e59 14000000 		.4byte	.LANCHOR0+20
 6130 0e5d 1E       		.uleb128 0x1e
 6131 0e5e 01       		.uleb128 0x1
 6132 0e5f 51       		.byte	0x51
 6133 0e60 02       		.uleb128 0x2
 6134 0e61 74       		.byte	0x74
 6135 0e62 18       		.sleb128 24
 6136 0e63 00       		.byte	0
 6137 0e64 00       		.byte	0
 6138 0e65 27       		.uleb128 0x27
 6139 0e66 BD030000 		.4byte	.LASF133
 6140 0e6a 01       		.byte	0x1
 6141 0e6b 6D07     		.2byte	0x76d
 6142 0e6d 00000000 		.4byte	.LFB83
 6143 0e71 58000000 		.4byte	.LFE83-.LFB83
 6144 0e75 01       		.uleb128 0x1
 6145 0e76 9C       		.byte	0x9c
 6146 0e77 F40E0000 		.4byte	0xef4
 6147 0e7b 1A       		.uleb128 0x1a
 6148 0e7c 4F040000 		.4byte	.LASF87
 6149 0e80 01       		.byte	0x1
 6150 0e81 6F07     		.2byte	0x76f
 6151 0e83 35010000 		.4byte	0x135
 6152 0e87 2D070000 		.4byte	.LLST51
 6153 0e8b 29       		.uleb128 0x29
 6154 0e8c 2F040000 		.4byte	0x42f
 6155 0e90 1A000000 		.4byte	.LBB36
 6156 0e94 10000000 		.4byte	.LBE36-.LBB36
 6157 0e98 01       		.byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 211


 6158 0e99 B507     		.2byte	0x7b5
 6159 0e9b AF0E0000 		.4byte	0xeaf
 6160 0e9f 23       		.uleb128 0x23
 6161 0ea0 1A000000 		.4byte	.LBB37
 6162 0ea4 10000000 		.4byte	.LBE37-.LBB37
 6163 0ea8 2A       		.uleb128 0x2a
 6164 0ea9 3B040000 		.4byte	0x43b
 6165 0ead 00       		.byte	0
 6166 0eae 00       		.byte	0
 6167 0eaf 22       		.uleb128 0x22
 6168 0eb0 16000000 		.4byte	.LVL154
 6169 0eb4 DF080000 		.4byte	0x8df
 6170 0eb8 EA0E0000 		.4byte	0xeea
 6171 0ebc 1E       		.uleb128 0x1e
 6172 0ebd 01       		.uleb128 0x1
 6173 0ebe 50       		.byte	0x50
 6174 0ebf 05       		.uleb128 0x5
 6175 0ec0 03       		.byte	0x3
 6176 0ec1 00000000 		.4byte	prvIdleTask
 6177 0ec5 1E       		.uleb128 0x1e
 6178 0ec6 01       		.uleb128 0x1
 6179 0ec7 51       		.byte	0x51
 6180 0ec8 05       		.uleb128 0x5
 6181 0ec9 03       		.byte	0x3
 6182 0eca 00000000 		.4byte	.LC0
 6183 0ece 1E       		.uleb128 0x1e
 6184 0ecf 01       		.uleb128 0x1
 6185 0ed0 52       		.byte	0x52
 6186 0ed1 02       		.uleb128 0x2
 6187 0ed2 08       		.byte	0x8
 6188 0ed3 C8       		.byte	0xc8
 6189 0ed4 1E       		.uleb128 0x1e
 6190 0ed5 01       		.uleb128 0x1
 6191 0ed6 53       		.byte	0x53
 6192 0ed7 01       		.uleb128 0x1
 6193 0ed8 30       		.byte	0x30
 6194 0ed9 1E       		.uleb128 0x1e
 6195 0eda 02       		.uleb128 0x2
 6196 0edb 7D       		.byte	0x7d
 6197 0edc 00       		.sleb128 0
 6198 0edd 01       		.uleb128 0x1
 6199 0ede 30       		.byte	0x30
 6200 0edf 1E       		.uleb128 0x1e
 6201 0ee0 02       		.uleb128 0x2
 6202 0ee1 7D       		.byte	0x7d
 6203 0ee2 04       		.sleb128 4
 6204 0ee3 05       		.uleb128 0x5
 6205 0ee4 03       		.byte	0x3
 6206 0ee5 F4000000 		.4byte	.LANCHOR0+244
 6207 0ee9 00       		.byte	0
 6208 0eea 1C       		.uleb128 0x1c
 6209 0eeb 42000000 		.4byte	.LVL155
 6210 0eef B11F0000 		.4byte	0x1fb1
 6211 0ef3 00       		.byte	0
 6212 0ef4 27       		.uleb128 0x27
 6213 0ef5 50090000 		.4byte	.LASF134
 6214 0ef9 01       		.byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 212


 6215 0efa E507     		.2byte	0x7e5
 6216 0efc 00000000 		.4byte	.LFB84
 6217 0f00 24000000 		.4byte	.LFE84-.LFB84
 6218 0f04 01       		.uleb128 0x1
 6219 0f05 9C       		.byte	0x9c
 6220 0f06 380F0000 		.4byte	0xf38
 6221 0f0a 29       		.uleb128 0x29
 6222 0f0b 2F040000 		.4byte	0x42f
 6223 0f0f 02000000 		.4byte	.LBB38
 6224 0f13 10000000 		.4byte	.LBE38-.LBB38
 6225 0f17 01       		.byte	0x1
 6226 0f18 EA07     		.2byte	0x7ea
 6227 0f1a 2E0F0000 		.4byte	0xf2e
 6228 0f1e 23       		.uleb128 0x23
 6229 0f1f 02000000 		.4byte	.LBB39
 6230 0f23 10000000 		.4byte	.LBE39-.LBB39
 6231 0f27 2A       		.uleb128 0x2a
 6232 0f28 3B040000 		.4byte	0x43b
 6233 0f2c 00       		.byte	0
 6234 0f2d 00       		.byte	0
 6235 0f2e 1C       		.uleb128 0x1c
 6236 0f2f 1E000000 		.4byte	.LVL156
 6237 0f33 BC1F0000 		.4byte	0x1fbc
 6238 0f37 00       		.byte	0
 6239 0f38 2D       		.uleb128 0x2d
 6240 0f39 F70A0000 		.4byte	.LASF170
 6241 0f3d 01       		.byte	0x1
 6242 0f3e F007     		.2byte	0x7f0
 6243 0f40 00000000 		.4byte	.LFB85
 6244 0f44 14000000 		.4byte	.LFE85-.LFB85
 6245 0f48 01       		.uleb128 0x1
 6246 0f49 9C       		.byte	0x9c
 6247 0f4a 25       		.uleb128 0x25
 6248 0f4b CF050000 		.4byte	.LASF135
 6249 0f4f 01       		.byte	0x1
 6250 0f50 A708     		.2byte	0x8a7
 6251 0f52 4B010000 		.4byte	0x14b
 6252 0f56 00000000 		.4byte	.LFB87
 6253 0f5a 0C000000 		.4byte	.LFE87-.LFB87
 6254 0f5e 01       		.uleb128 0x1
 6255 0f5f 9C       		.byte	0x9c
 6256 0f60 730F0000 		.4byte	0xf73
 6257 0f64 20       		.uleb128 0x20
 6258 0f65 3C000000 		.4byte	.LASF136
 6259 0f69 01       		.byte	0x1
 6260 0f6a A908     		.2byte	0x8a9
 6261 0f6c 4B010000 		.4byte	0x14b
 6262 0f70 01       		.uleb128 0x1
 6263 0f71 50       		.byte	0x50
 6264 0f72 00       		.byte	0
 6265 0f73 25       		.uleb128 0x25
 6266 0f74 9D020000 		.4byte	.LASF137
 6267 0f78 01       		.byte	0x1
 6268 0f79 B608     		.2byte	0x8b6
 6269 0f7b 4B010000 		.4byte	0x14b
 6270 0f7f 00000000 		.4byte	.LFB88
 6271 0f83 0C000000 		.4byte	.LFE88-.LFB88
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 213


 6272 0f87 01       		.uleb128 0x1
 6273 0f88 9C       		.byte	0x9c
 6274 0f89 A90F0000 		.4byte	0xfa9
 6275 0f8d 20       		.uleb128 0x20
 6276 0f8e 4F040000 		.4byte	.LASF87
 6277 0f92 01       		.byte	0x1
 6278 0f93 B808     		.2byte	0x8b8
 6279 0f95 4B010000 		.4byte	0x14b
 6280 0f99 01       		.uleb128 0x1
 6281 0f9a 50       		.byte	0x50
 6282 0f9b 2E       		.uleb128 0x2e
 6283 0f9c 8B0A0000 		.4byte	.LASF132
 6284 0fa0 01       		.byte	0x1
 6285 0fa1 B908     		.2byte	0x8b9
 6286 0fa3 40010000 		.4byte	0x140
 6287 0fa7 00       		.byte	0
 6288 0fa8 00       		.byte	0
 6289 0fa9 2F       		.uleb128 0x2f
 6290 0faa AE0C0000 		.4byte	.LASF184
 6291 0fae 01       		.byte	0x1
 6292 0faf D508     		.2byte	0x8d5
 6293 0fb1 40010000 		.4byte	0x140
 6294 0fb5 00000000 		.4byte	.LFB89
 6295 0fb9 0C000000 		.4byte	.LFE89-.LFB89
 6296 0fbd 01       		.uleb128 0x1
 6297 0fbe 9C       		.byte	0x9c
 6298 0fbf 25       		.uleb128 0x25
 6299 0fc0 480B0000 		.4byte	.LASF138
 6300 0fc4 01       		.byte	0x1
 6301 0fc5 DD08     		.2byte	0x8dd
 6302 0fc7 B2000000 		.4byte	0xb2
 6303 0fcb 00000000 		.4byte	.LFB90
 6304 0fcf 14000000 		.4byte	.LFE90-.LFB90
 6305 0fd3 01       		.uleb128 0x1
 6306 0fd4 9C       		.byte	0x9c
 6307 0fd5 F80F0000 		.4byte	0xff8
 6308 0fd9 19       		.uleb128 0x19
 6309 0fda 90030000 		.4byte	.LASF139
 6310 0fde 01       		.byte	0x1
 6311 0fdf DD08     		.2byte	0x8dd
 6312 0fe1 39020000 		.4byte	0x239
 6313 0fe5 40070000 		.4byte	.LLST52
 6314 0fe9 20       		.uleb128 0x20
 6315 0fea 41050000 		.4byte	.LASF88
 6316 0fee 01       		.byte	0x1
 6317 0fef DF08     		.2byte	0x8df
 6318 0ff1 3B050000 		.4byte	0x53b
 6319 0ff5 01       		.uleb128 0x1
 6320 0ff6 53       		.byte	0x53
 6321 0ff7 00       		.byte	0
 6322 0ff8 25       		.uleb128 0x25
 6323 0ff9 E7020000 		.4byte	.LASF140
 6324 0ffd 01       		.byte	0x1
 6325 0ffe 1D0A     		.2byte	0xa1d
 6326 1000 35010000 		.4byte	0x135
 6327 1004 00000000 		.4byte	.LFB91
 6328 1008 08010000 		.4byte	.LFE91-.LFB91
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 214


 6329 100c 01       		.uleb128 0x1
 6330 100d 9C       		.byte	0x9c
 6331 100e B8100000 		.4byte	0x10b8
 6332 1012 1A       		.uleb128 0x1a
 6333 1013 41050000 		.4byte	.LASF88
 6334 1017 01       		.byte	0x1
 6335 1018 1F0A     		.2byte	0xa1f
 6336 101a 3B050000 		.4byte	0x53b
 6337 101e 53070000 		.4byte	.LLST53
 6338 1022 1A       		.uleb128 0x1a
 6339 1023 4F0D0000 		.4byte	.LASF28
 6340 1027 01       		.byte	0x1
 6341 1028 200A     		.2byte	0xa20
 6342 102a 4B010000 		.4byte	0x14b
 6343 102e 71070000 		.4byte	.LLST54
 6344 1032 1A       		.uleb128 0x1a
 6345 1033 2F020000 		.4byte	.LASF141
 6346 1037 01       		.byte	0x1
 6347 1038 210A     		.2byte	0xa21
 6348 103a 35010000 		.4byte	0x135
 6349 103e 84070000 		.4byte	.LLST55
 6350 1042 30       		.uleb128 0x30
 6351 1043 00000000 		.4byte	.Ldebug_ranges0+0
 6352 1047 1A       		.uleb128 0x1a
 6353 1048 57040000 		.4byte	.LASF112
 6354 104c 01       		.byte	0x1
 6355 104d 2B0A     		.2byte	0xa2b
 6356 104f DA080000 		.4byte	0x8da
 6357 1053 DC070000 		.4byte	.LLST56
 6358 1057 26       		.uleb128 0x26
 6359 1058 1C000000 		.4byte	.LBB41
 6360 105c 1A000000 		.4byte	.LBE41-.LBB41
 6361 1060 7E100000 		.4byte	0x107e
 6362 1064 1A       		.uleb128 0x1a
 6363 1065 650C0000 		.4byte	.LASF142
 6364 1069 01       		.byte	0x1
 6365 106a 330A     		.2byte	0xa33
 6366 106c 3C0B0000 		.4byte	0xb3c
 6367 1070 FA070000 		.4byte	.LLST57
 6368 1074 1C       		.uleb128 0x1c
 6369 1075 36000000 		.4byte	.LVL167
 6370 1079 14050000 		.4byte	0x514
 6371 107d 00       		.byte	0
 6372 107e 22       		.uleb128 0x22
 6373 107f 84000000 		.4byte	.LVL174
 6374 1083 8E1F0000 		.4byte	0x1f8e
 6375 1087 92100000 		.4byte	0x1092
 6376 108b 1E       		.uleb128 0x1e
 6377 108c 01       		.uleb128 0x1
 6378 108d 50       		.byte	0x50
 6379 108e 02       		.uleb128 0x2
 6380 108f 76       		.byte	0x76
 6381 1090 00       		.sleb128 0
 6382 1091 00       		.byte	0
 6383 1092 22       		.uleb128 0x22
 6384 1093 90000000 		.4byte	.LVL175
 6385 1097 8E1F0000 		.4byte	0x1f8e
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 215


 6386 109b A6100000 		.4byte	0x10a6
 6387 109f 1E       		.uleb128 0x1e
 6388 10a0 01       		.uleb128 0x1
 6389 10a1 50       		.byte	0x50
 6390 10a2 02       		.uleb128 0x2
 6391 10a3 74       		.byte	0x74
 6392 10a4 18       		.sleb128 24
 6393 10a5 00       		.byte	0
 6394 10a6 1D       		.uleb128 0x1d
 6395 10a7 B6000000 		.4byte	.LVL176
 6396 10ab 771F0000 		.4byte	0x1f77
 6397 10af 1E       		.uleb128 0x1e
 6398 10b0 01       		.uleb128 0x1
 6399 10b1 51       		.byte	0x51
 6400 10b2 02       		.uleb128 0x2
 6401 10b3 76       		.byte	0x76
 6402 10b4 00       		.sleb128 0
 6403 10b5 00       		.byte	0
 6404 10b6 00       		.byte	0
 6405 10b7 00       		.byte	0
 6406 10b8 25       		.uleb128 0x25
 6407 10b9 7F090000 		.4byte	.LASF143
 6408 10bd 01       		.byte	0x1
 6409 10be 3908     		.2byte	0x839
 6410 10c0 35010000 		.4byte	0x135
 6411 10c4 00000000 		.4byte	.LFB86
 6412 10c8 D8000000 		.4byte	.LFE86-.LFB86
 6413 10cc 01       		.uleb128 0x1
 6414 10cd 9C       		.byte	0x9c
 6415 10ce 71110000 		.4byte	0x1171
 6416 10d2 1A       		.uleb128 0x1a
 6417 10d3 41050000 		.4byte	.LASF88
 6418 10d7 01       		.byte	0x1
 6419 10d8 3B08     		.2byte	0x83b
 6420 10da 3B050000 		.4byte	0x53b
 6421 10de 1C080000 		.4byte	.LLST58
 6422 10e2 1A       		.uleb128 0x1a
 6423 10e3 31010000 		.4byte	.LASF144
 6424 10e7 01       		.byte	0x1
 6425 10e8 3C08     		.2byte	0x83c
 6426 10ea 35010000 		.4byte	0x135
 6427 10ee 69080000 		.4byte	.LLST59
 6428 10f2 26       		.uleb128 0x26
 6429 10f3 84000000 		.4byte	.LBB44
 6430 10f7 22000000 		.4byte	.LBE44-.LBB44
 6431 10fb 19110000 		.4byte	0x1119
 6432 10ff 1A       		.uleb128 0x1a
 6433 1100 62090000 		.4byte	.LASF145
 6434 1104 01       		.byte	0x1
 6435 1105 7408     		.2byte	0x874
 6436 1107 40010000 		.4byte	0x140
 6437 110b AB080000 		.4byte	.LLST60
 6438 110f 1C       		.uleb128 0x1c
 6439 1110 90000000 		.4byte	.LVL194
 6440 1114 F80F0000 		.4byte	0xff8
 6441 1118 00       		.byte	0
 6442 1119 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 216


 6443 111a 06000000 		.4byte	.LVL184
 6444 111e 6C1F0000 		.4byte	0x1f6c
 6445 1122 22       		.uleb128 0x22
 6446 1123 34000000 		.4byte	.LVL187
 6447 1127 8E1F0000 		.4byte	0x1f8e
 6448 112b 36110000 		.4byte	0x1136
 6449 112f 1E       		.uleb128 0x1e
 6450 1130 01       		.uleb128 0x1
 6451 1131 50       		.byte	0x50
 6452 1132 02       		.uleb128 0x2
 6453 1133 75       		.byte	0x75
 6454 1134 18       		.sleb128 24
 6455 1135 00       		.byte	0
 6456 1136 22       		.uleb128 0x22
 6457 1137 3C000000 		.4byte	.LVL188
 6458 113b 8E1F0000 		.4byte	0x1f8e
 6459 113f 4A110000 		.4byte	0x114a
 6460 1143 1E       		.uleb128 0x1e
 6461 1144 01       		.uleb128 0x1
 6462 1145 50       		.byte	0x50
 6463 1146 02       		.uleb128 0x2
 6464 1147 76       		.byte	0x76
 6465 1148 00       		.sleb128 0
 6466 1149 00       		.byte	0
 6467 114a 22       		.uleb128 0x22
 6468 114b 60000000 		.4byte	.LVL189
 6469 114f 771F0000 		.4byte	0x1f77
 6470 1153 5E110000 		.4byte	0x115e
 6471 1157 1E       		.uleb128 0x1e
 6472 1158 01       		.uleb128 0x1
 6473 1159 51       		.byte	0x51
 6474 115a 02       		.uleb128 0x2
 6475 115b 76       		.byte	0x76
 6476 115c 00       		.sleb128 0
 6477 115d 00       		.byte	0
 6478 115e 1C       		.uleb128 0x1c
 6479 115f 84000000 		.4byte	.LVL192
 6480 1163 14050000 		.4byte	0x514
 6481 1167 1C       		.uleb128 0x1c
 6482 1168 CC000000 		.4byte	.LVL202
 6483 116c 831F0000 		.4byte	0x1f83
 6484 1170 00       		.byte	0
 6485 1171 27       		.uleb128 0x27
 6486 1172 B9080000 		.4byte	.LASF146
 6487 1176 01       		.byte	0x1
 6488 1177 B404     		.2byte	0x4b4
 6489 1179 00000000 		.4byte	.LFB73
 6490 117d 6C000000 		.4byte	.LFE73-.LFB73
 6491 1181 01       		.uleb128 0x1
 6492 1182 9C       		.byte	0x9c
 6493 1183 11120000 		.4byte	0x1211
 6494 1187 19       		.uleb128 0x19
 6495 1188 CD070000 		.4byte	.LASF147
 6496 118c 01       		.byte	0x1
 6497 118d B404     		.2byte	0x4b4
 6498 118f 17120000 		.4byte	0x1217
 6499 1193 E1080000 		.4byte	.LLST61
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 217


 6500 1197 19       		.uleb128 0x19
 6501 1198 9D0D0000 		.4byte	.LASF148
 6502 119c 01       		.byte	0x1
 6503 119d B404     		.2byte	0x4b4
 6504 119f DA080000 		.4byte	0x8da
 6505 11a3 0D090000 		.4byte	.LLST62
 6506 11a7 1A       		.uleb128 0x1a
 6507 11a8 25010000 		.4byte	.LASF111
 6508 11ac 01       		.byte	0x1
 6509 11ad B604     		.2byte	0x4b6
 6510 11af 4B010000 		.4byte	0x14b
 6511 11b3 39090000 		.4byte	.LLST63
 6512 11b7 20       		.uleb128 0x20
 6513 11b8 31010000 		.4byte	.LASF144
 6514 11bc 01       		.byte	0x1
 6515 11bd B704     		.2byte	0x4b7
 6516 11bf 35010000 		.4byte	0x135
 6517 11c3 01       		.uleb128 0x1
 6518 11c4 50       		.byte	0x50
 6519 11c5 1A       		.uleb128 0x1a
 6520 11c6 A20A0000 		.4byte	.LASF149
 6521 11ca 01       		.byte	0x1
 6522 11cb B704     		.2byte	0x4b7
 6523 11cd 35010000 		.4byte	0x135
 6524 11d1 4C090000 		.4byte	.LLST64
 6525 11d5 31       		.uleb128 0x31
 6526 11d6 20000000 		.4byte	.Ldebug_ranges0+0x20
 6527 11da FE110000 		.4byte	0x11fe
 6528 11de 1A       		.uleb128 0x1a
 6529 11df 57040000 		.4byte	.LASF112
 6530 11e3 01       		.byte	0x1
 6531 11e4 C104     		.2byte	0x4c1
 6532 11e6 DA080000 		.4byte	0x8da
 6533 11ea 6B090000 		.4byte	.LLST65
 6534 11ee 1D       		.uleb128 0x1d
 6535 11ef 4A000000 		.4byte	.LVL211
 6536 11f3 4C080000 		.4byte	0x84c
 6537 11f7 1E       		.uleb128 0x1e
 6538 11f8 01       		.uleb128 0x1
 6539 11f9 51       		.byte	0x51
 6540 11fa 01       		.uleb128 0x1
 6541 11fb 30       		.byte	0x30
 6542 11fc 00       		.byte	0
 6543 11fd 00       		.byte	0
 6544 11fe 1C       		.uleb128 0x1c
 6545 11ff 0A000000 		.4byte	.LVL206
 6546 1203 380F0000 		.4byte	0xf38
 6547 1207 1C       		.uleb128 0x1c
 6548 1208 4E000000 		.4byte	.LVL212
 6549 120c B8100000 		.4byte	0x10b8
 6550 1210 00       		.byte	0
 6551 1211 06       		.uleb128 0x6
 6552 1212 04       		.byte	0x4
 6553 1213 4B010000 		.4byte	0x14b
 6554 1217 07       		.uleb128 0x7
 6555 1218 11120000 		.4byte	0x1211
 6556 121c 27       		.uleb128 0x27
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 218


 6557 121d EE000000 		.4byte	.LASF150
 6558 1221 01       		.byte	0x1
 6559 1222 0805     		.2byte	0x508
 6560 1224 00000000 		.4byte	.LFB74
 6561 1228 34000000 		.4byte	.LFE74-.LFB74
 6562 122c 01       		.uleb128 0x1
 6563 122d 9C       		.byte	0x9c
 6564 122e 7E120000 		.4byte	0x127e
 6565 1232 19       		.uleb128 0x19
 6566 1233 790D0000 		.4byte	.LASF151
 6567 1237 01       		.byte	0x1
 6568 1238 0805     		.2byte	0x508
 6569 123a DA080000 		.4byte	0x8da
 6570 123e 7E090000 		.4byte	.LLST66
 6571 1242 1A       		.uleb128 0x1a
 6572 1243 31010000 		.4byte	.LASF144
 6573 1247 01       		.byte	0x1
 6574 1248 0A05     		.2byte	0x50a
 6575 124a 35010000 		.4byte	0x135
 6576 124e B5090000 		.4byte	.LLST67
 6577 1252 1C       		.uleb128 0x1c
 6578 1253 0A000000 		.4byte	.LVL216
 6579 1257 380F0000 		.4byte	0xf38
 6580 125b 22       		.uleb128 0x22
 6581 125c 12000000 		.4byte	.LVL217
 6582 1260 4C080000 		.4byte	0x84c
 6583 1264 74120000 		.4byte	0x1274
 6584 1268 1E       		.uleb128 0x1e
 6585 1269 01       		.uleb128 0x1
 6586 126a 50       		.byte	0x50
 6587 126b 02       		.uleb128 0x2
 6588 126c 74       		.byte	0x74
 6589 126d 00       		.sleb128 0
 6590 126e 1E       		.uleb128 0x1e
 6591 126f 01       		.uleb128 0x1
 6592 1270 51       		.byte	0x51
 6593 1271 01       		.uleb128 0x1
 6594 1272 30       		.byte	0x30
 6595 1273 00       		.byte	0
 6596 1274 1C       		.uleb128 0x1c
 6597 1275 16000000 		.4byte	.LVL218
 6598 1279 B8100000 		.4byte	0x10b8
 6599 127d 00       		.byte	0
 6600 127e 27       		.uleb128 0x27
 6601 127f 39060000 		.4byte	.LASF152
 6602 1283 01       		.byte	0x1
 6603 1284 230B     		.2byte	0xb23
 6604 1286 00000000 		.4byte	.LFB92
 6605 128a 70000000 		.4byte	.LFE92-.LFB92
 6606 128e 01       		.uleb128 0x1
 6607 128f 9C       		.byte	0x9c
 6608 1290 F8120000 		.4byte	0x12f8
 6609 1294 23       		.uleb128 0x23
 6610 1295 1C000000 		.4byte	.LBB48
 6611 1299 4C000000 		.4byte	.LBE48-.LBB48
 6612 129d 1A       		.uleb128 0x1a
 6613 129e 2F080000 		.4byte	.LASF153
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 219


 6614 12a2 01       		.byte	0x1
 6615 12a3 500B     		.2byte	0xb50
 6616 12a5 40010000 		.4byte	0x140
 6617 12a9 EB090000 		.4byte	.LLST68
 6618 12ad 29       		.uleb128 0x29
 6619 12ae 47040000 		.4byte	0x447
 6620 12b2 20000000 		.4byte	.LBB49
 6621 12b6 06000000 		.4byte	.LBE49-.LBB49
 6622 12ba 01       		.byte	0x1
 6623 12bb 500B     		.2byte	0xb50
 6624 12bd DC120000 		.4byte	0x12dc
 6625 12c1 2C       		.uleb128 0x2c
 6626 12c2 57040000 		.4byte	0x457
 6627 12c6 FE090000 		.4byte	.LLST69
 6628 12ca 23       		.uleb128 0x23
 6629 12cb 20000000 		.4byte	.LBB50
 6630 12cf 06000000 		.4byte	.LBE50-.LBB50
 6631 12d3 32       		.uleb128 0x32
 6632 12d4 62040000 		.4byte	0x462
 6633 12d8 01       		.uleb128 0x1
 6634 12d9 53       		.byte	0x53
 6635 12da 00       		.byte	0
 6636 12db 00       		.byte	0
 6637 12dc 23       		.uleb128 0x23
 6638 12dd 2A000000 		.4byte	.LBB51
 6639 12e1 3E000000 		.4byte	.LBE51-.LBB51
 6640 12e5 1A       		.uleb128 0x1a
 6641 12e6 16050000 		.4byte	.LASF154
 6642 12ea 01       		.byte	0x1
 6643 12eb 500B     		.2byte	0xb50
 6644 12ed F8120000 		.4byte	0x12f8
 6645 12f1 110A0000 		.4byte	.LLST70
 6646 12f5 00       		.byte	0
 6647 12f6 00       		.byte	0
 6648 12f7 00       		.byte	0
 6649 12f8 07       		.uleb128 0x7
 6650 12f9 3C0B0000 		.4byte	0xb3c
 6651 12fd 27       		.uleb128 0x27
 6652 12fe 43000000 		.4byte	.LASF155
 6653 1302 01       		.byte	0x1
 6654 1303 5E06     		.2byte	0x65e
 6655 1305 00000000 		.4byte	.LFB79
 6656 1309 C0000000 		.4byte	.LFE79-.LFB79
 6657 130d 01       		.uleb128 0x1
 6658 130e 9C       		.byte	0x9c
 6659 130f AF130000 		.4byte	0x13af
 6660 1313 19       		.uleb128 0x19
 6661 1314 1F070000 		.4byte	.LASF156
 6662 1318 01       		.byte	0x1
 6663 1319 5E06     		.2byte	0x65e
 6664 131b 39020000 		.4byte	0x239
 6665 131f 2E0A0000 		.4byte	.LLST71
 6666 1323 1A       		.uleb128 0x1a
 6667 1324 41050000 		.4byte	.LASF88
 6668 1328 01       		.byte	0x1
 6669 1329 6006     		.2byte	0x660
 6670 132b 3B050000 		.4byte	0x53b
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 220


 6671 132f 4C0A0000 		.4byte	.LLST72
 6672 1333 1C       		.uleb128 0x1c
 6673 1334 08000000 		.4byte	.LVL226
 6674 1338 6C1F0000 		.4byte	0x1f6c
 6675 133c 22       		.uleb128 0x22
 6676 133d 18000000 		.4byte	.LVL228
 6677 1341 8E1F0000 		.4byte	0x1f8e
 6678 1345 50130000 		.4byte	0x1350
 6679 1349 1E       		.uleb128 0x1e
 6680 134a 01       		.uleb128 0x1
 6681 134b 50       		.byte	0x50
 6682 134c 02       		.uleb128 0x2
 6683 134d 75       		.byte	0x75
 6684 134e 00       		.sleb128 0
 6685 134f 00       		.byte	0
 6686 1350 22       		.uleb128 0x22
 6687 1351 48000000 		.4byte	.LVL229
 6688 1355 8E1F0000 		.4byte	0x1f8e
 6689 1359 64130000 		.4byte	0x1364
 6690 135d 1E       		.uleb128 0x1e
 6691 135e 01       		.uleb128 0x1
 6692 135f 50       		.byte	0x50
 6693 1360 02       		.uleb128 0x2
 6694 1361 74       		.byte	0x74
 6695 1362 18       		.sleb128 24
 6696 1363 00       		.byte	0
 6697 1364 22       		.uleb128 0x22
 6698 1365 50000000 		.4byte	.LVL230
 6699 1369 771F0000 		.4byte	0x1f77
 6700 136d 81130000 		.4byte	0x1381
 6701 1371 1E       		.uleb128 0x1e
 6702 1372 01       		.uleb128 0x1
 6703 1373 50       		.byte	0x50
 6704 1374 05       		.uleb128 0x5
 6705 1375 03       		.byte	0x3
 6706 1376 00000000 		.4byte	.LANCHOR0
 6707 137a 1E       		.uleb128 0x1e
 6708 137b 01       		.uleb128 0x1
 6709 137c 51       		.byte	0x51
 6710 137d 02       		.uleb128 0x2
 6711 137e 75       		.byte	0x75
 6712 137f 00       		.sleb128 0
 6713 1380 00       		.byte	0
 6714 1381 1C       		.uleb128 0x1c
 6715 1382 64000000 		.4byte	.LVL231
 6716 1386 831F0000 		.4byte	0x1f83
 6717 138a 1C       		.uleb128 0x1c
 6718 138b 70000000 		.4byte	.LVL232
 6719 138f 6C1F0000 		.4byte	0x1f6c
 6720 1393 1C       		.uleb128 0x1c
 6721 1394 74000000 		.4byte	.LVL233
 6722 1398 14050000 		.4byte	0x514
 6723 139c 1C       		.uleb128 0x1c
 6724 139d 78000000 		.4byte	.LVL234
 6725 13a1 831F0000 		.4byte	0x1f83
 6726 13a5 1C       		.uleb128 0x1c
 6727 13a6 B6000000 		.4byte	.LVL237
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 221


 6728 13aa 7E120000 		.4byte	0x127e
 6729 13ae 00       		.byte	0
 6730 13af 27       		.uleb128 0x27
 6731 13b0 DE030000 		.4byte	.LASF157
 6732 13b4 01       		.byte	0x1
 6733 13b5 5E0B     		.2byte	0xb5e
 6734 13b7 00000000 		.4byte	.LFB93
 6735 13bb 20000000 		.4byte	.LFE93-.LFB93
 6736 13bf 01       		.uleb128 0x1
 6737 13c0 9C       		.byte	0x9c
 6738 13c1 10140000 		.4byte	0x1410
 6739 13c5 19       		.uleb128 0x19
 6740 13c6 E1050000 		.4byte	.LASF158
 6741 13ca 01       		.byte	0x1
 6742 13cb 5E0B     		.2byte	0xb5e
 6743 13cd F8120000 		.4byte	0x12f8
 6744 13d1 5F0A0000 		.4byte	.LLST73
 6745 13d5 19       		.uleb128 0x19
 6746 13d6 CD010000 		.4byte	.LASF109
 6747 13da 01       		.byte	0x1
 6748 13db 5E0B     		.2byte	0xb5e
 6749 13dd DA080000 		.4byte	0x8da
 6750 13e1 800A0000 		.4byte	.LLST74
 6751 13e5 22       		.uleb128 0x22
 6752 13e6 10000000 		.4byte	.LVL241
 6753 13ea 9A1F0000 		.4byte	0x1f9a
 6754 13ee FA130000 		.4byte	0x13fa
 6755 13f2 1E       		.uleb128 0x1e
 6756 13f3 01       		.uleb128 0x1
 6757 13f4 50       		.byte	0x50
 6758 13f5 03       		.uleb128 0x3
 6759 13f6 F3       		.byte	0xf3
 6760 13f7 01       		.uleb128 0x1
 6761 13f8 50       		.byte	0x50
 6762 13f9 00       		.byte	0
 6763 13fa 1D       		.uleb128 0x1d
 6764 13fb 18000000 		.4byte	.LVL242
 6765 13ff 4C080000 		.4byte	0x84c
 6766 1403 1E       		.uleb128 0x1e
 6767 1404 01       		.uleb128 0x1
 6768 1405 50       		.byte	0x50
 6769 1406 02       		.uleb128 0x2
 6770 1407 74       		.byte	0x74
 6771 1408 00       		.sleb128 0
 6772 1409 1E       		.uleb128 0x1e
 6773 140a 01       		.uleb128 0x1
 6774 140b 51       		.byte	0x51
 6775 140c 01       		.uleb128 0x1
 6776 140d 31       		.byte	0x31
 6777 140e 00       		.byte	0
 6778 140f 00       		.byte	0
 6779 1410 27       		.uleb128 0x27
 6780 1411 77040000 		.4byte	.LASF159
 6781 1415 01       		.byte	0x1
 6782 1416 6F0B     		.2byte	0xb6f
 6783 1418 00000000 		.4byte	.LFB94
 6784 141c 28000000 		.4byte	.LFE94-.LFB94
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 222


 6785 1420 01       		.uleb128 0x1
 6786 1421 9C       		.byte	0x9c
 6787 1422 81140000 		.4byte	0x1481
 6788 1426 19       		.uleb128 0x19
 6789 1427 E1050000 		.4byte	.LASF158
 6790 142b 01       		.byte	0x1
 6791 142c 6F0B     		.2byte	0xb6f
 6792 142e 3C0B0000 		.4byte	0xb3c
 6793 1432 AC0A0000 		.4byte	.LLST75
 6794 1436 19       		.uleb128 0x19
 6795 1437 4F0D0000 		.4byte	.LASF28
 6796 143b 01       		.byte	0x1
 6797 143c 6F0B     		.2byte	0xb6f
 6798 143e DA080000 		.4byte	0x8da
 6799 1442 CD0A0000 		.4byte	.LLST76
 6800 1446 19       		.uleb128 0x19
 6801 1447 CD010000 		.4byte	.LASF109
 6802 144b 01       		.byte	0x1
 6803 144c 6F0B     		.2byte	0xb6f
 6804 144e DA080000 		.4byte	0x8da
 6805 1452 EE0A0000 		.4byte	.LLST77
 6806 1456 22       		.uleb128 0x22
 6807 1457 1A000000 		.4byte	.LVL247
 6808 145b 771F0000 		.4byte	0x1f77
 6809 145f 6B140000 		.4byte	0x146b
 6810 1463 1E       		.uleb128 0x1e
 6811 1464 01       		.uleb128 0x1
 6812 1465 50       		.byte	0x50
 6813 1466 03       		.uleb128 0x3
 6814 1467 F3       		.byte	0xf3
 6815 1468 01       		.uleb128 0x1
 6816 1469 50       		.byte	0x50
 6817 146a 00       		.byte	0
 6818 146b 1D       		.uleb128 0x1d
 6819 146c 22000000 		.4byte	.LVL248
 6820 1470 4C080000 		.4byte	0x84c
 6821 1474 1E       		.uleb128 0x1e
 6822 1475 01       		.uleb128 0x1
 6823 1476 50       		.byte	0x50
 6824 1477 02       		.uleb128 0x2
 6825 1478 74       		.byte	0x74
 6826 1479 00       		.sleb128 0
 6827 147a 1E       		.uleb128 0x1e
 6828 147b 01       		.uleb128 0x1
 6829 147c 51       		.byte	0x51
 6830 147d 01       		.uleb128 0x1
 6831 147e 31       		.byte	0x31
 6832 147f 00       		.byte	0
 6833 1480 00       		.byte	0
 6834 1481 25       		.uleb128 0x25
 6835 1482 680B0000 		.4byte	.LASF160
 6836 1486 01       		.byte	0x1
 6837 1487 A80B     		.2byte	0xba8
 6838 1489 35010000 		.4byte	0x135
 6839 148d 00000000 		.4byte	.LFB95
 6840 1491 74000000 		.4byte	.LFE95-.LFB95
 6841 1495 01       		.uleb128 0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 223


 6842 1496 9C       		.byte	0x9c
 6843 1497 21150000 		.4byte	0x1521
 6844 149b 19       		.uleb128 0x19
 6845 149c E1050000 		.4byte	.LASF158
 6846 14a0 01       		.byte	0x1
 6847 14a1 A80B     		.2byte	0xba8
 6848 14a3 2C150000 		.4byte	0x152c
 6849 14a7 1A0B0000 		.4byte	.LLST78
 6850 14ab 1A       		.uleb128 0x1a
 6851 14ac 26090000 		.4byte	.LASF161
 6852 14b0 01       		.byte	0x1
 6853 14b1 AA0B     		.2byte	0xbaa
 6854 14b3 3B050000 		.4byte	0x53b
 6855 14b7 3B0B0000 		.4byte	.LLST79
 6856 14bb 1A       		.uleb128 0x1a
 6857 14bc 4F040000 		.4byte	.LASF87
 6858 14c0 01       		.byte	0x1
 6859 14c1 AB0B     		.2byte	0xbab
 6860 14c3 35010000 		.4byte	0x135
 6861 14c7 4E0B0000 		.4byte	.LLST80
 6862 14cb 22       		.uleb128 0x22
 6863 14cc 10000000 		.4byte	.LVL253
 6864 14d0 8E1F0000 		.4byte	0x1f8e
 6865 14d4 DF140000 		.4byte	0x14df
 6866 14d8 1E       		.uleb128 0x1e
 6867 14d9 01       		.uleb128 0x1
 6868 14da 50       		.byte	0x50
 6869 14db 02       		.uleb128 0x2
 6870 14dc 75       		.byte	0x75
 6871 14dd 00       		.sleb128 0
 6872 14de 00       		.byte	0
 6873 14df 22       		.uleb128 0x22
 6874 14e0 20000000 		.4byte	.LVL254
 6875 14e4 8E1F0000 		.4byte	0x1f8e
 6876 14e8 F3140000 		.4byte	0x14f3
 6877 14ec 1E       		.uleb128 0x1e
 6878 14ed 01       		.uleb128 0x1
 6879 14ee 50       		.byte	0x50
 6880 14ef 02       		.uleb128 0x2
 6881 14f0 75       		.byte	0x75
 6882 14f1 00       		.sleb128 0
 6883 14f2 00       		.byte	0
 6884 14f3 22       		.uleb128 0x22
 6885 14f4 44000000 		.4byte	.LVL255
 6886 14f8 771F0000 		.4byte	0x1f77
 6887 14fc 07150000 		.4byte	0x1507
 6888 1500 1E       		.uleb128 0x1e
 6889 1501 01       		.uleb128 0x1
 6890 1502 51       		.byte	0x51
 6891 1503 02       		.uleb128 0x2
 6892 1504 75       		.byte	0x75
 6893 1505 00       		.sleb128 0
 6894 1506 00       		.byte	0
 6895 1507 1D       		.uleb128 0x1d
 6896 1508 4E000000 		.4byte	.LVL256
 6897 150c 771F0000 		.4byte	0x1f77
 6898 1510 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 224


 6899 1511 01       		.uleb128 0x1
 6900 1512 50       		.byte	0x50
 6901 1513 05       		.uleb128 0x5
 6902 1514 03       		.byte	0x3
 6903 1515 14000000 		.4byte	.LANCHOR0+20
 6904 1519 1E       		.uleb128 0x1e
 6905 151a 01       		.uleb128 0x1
 6906 151b 51       		.byte	0x51
 6907 151c 02       		.uleb128 0x2
 6908 151d 75       		.byte	0x75
 6909 151e 00       		.sleb128 0
 6910 151f 00       		.byte	0
 6911 1520 00       		.byte	0
 6912 1521 06       		.uleb128 0x6
 6913 1522 04       		.byte	0x4
 6914 1523 27150000 		.4byte	0x1527
 6915 1527 07       		.uleb128 0x7
 6916 1528 2E020000 		.4byte	0x22e
 6917 152c 07       		.uleb128 0x7
 6918 152d 21150000 		.4byte	0x1521
 6919 1531 27       		.uleb128 0x27
 6920 1532 180F0000 		.4byte	.LASF162
 6921 1536 01       		.byte	0x1
 6922 1537 EC0B     		.2byte	0xbec
 6923 1539 00000000 		.4byte	.LFB96
 6924 153d 54000000 		.4byte	.LFE96-.LFB96
 6925 1541 01       		.uleb128 0x1
 6926 1542 9C       		.byte	0x9c
 6927 1543 B1150000 		.4byte	0x15b1
 6928 1547 19       		.uleb128 0x19
 6929 1548 480C0000 		.4byte	.LASF163
 6930 154c 01       		.byte	0x1
 6931 154d EC0B     		.2byte	0xbec
 6932 154f 28020000 		.4byte	0x228
 6933 1553 6D0B0000 		.4byte	.LLST81
 6934 1557 19       		.uleb128 0x19
 6935 1558 4F0D0000 		.4byte	.LASF28
 6936 155c 01       		.byte	0x1
 6937 155d EC0B     		.2byte	0xbec
 6938 155f DA080000 		.4byte	0x8da
 6939 1563 8E0B0000 		.4byte	.LLST82
 6940 1567 1A       		.uleb128 0x1a
 6941 1568 26090000 		.4byte	.LASF161
 6942 156c 01       		.byte	0x1
 6943 156d EE0B     		.2byte	0xbee
 6944 156f 3B050000 		.4byte	0x53b
 6945 1573 AF0B0000 		.4byte	.LLST83
 6946 1577 22       		.uleb128 0x22
 6947 1578 0E000000 		.4byte	.LVL264
 6948 157c 8E1F0000 		.4byte	0x1f8e
 6949 1580 8C150000 		.4byte	0x158c
 6950 1584 1E       		.uleb128 0x1e
 6951 1585 01       		.uleb128 0x1
 6952 1586 50       		.byte	0x50
 6953 1587 03       		.uleb128 0x3
 6954 1588 F3       		.byte	0xf3
 6955 1589 01       		.uleb128 0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 225


 6956 158a 50       		.byte	0x50
 6957 158b 00       		.byte	0
 6958 158c 22       		.uleb128 0x22
 6959 158d 16000000 		.4byte	.LVL265
 6960 1591 8E1F0000 		.4byte	0x1f8e
 6961 1595 A0150000 		.4byte	0x15a0
 6962 1599 1E       		.uleb128 0x1e
 6963 159a 01       		.uleb128 0x1
 6964 159b 50       		.byte	0x50
 6965 159c 02       		.uleb128 0x2
 6966 159d 76       		.byte	0x76
 6967 159e 00       		.sleb128 0
 6968 159f 00       		.byte	0
 6969 15a0 1D       		.uleb128 0x1d
 6970 15a1 3C000000 		.4byte	.LVL266
 6971 15a5 771F0000 		.4byte	0x1f77
 6972 15a9 1E       		.uleb128 0x1e
 6973 15aa 01       		.uleb128 0x1
 6974 15ab 51       		.byte	0x51
 6975 15ac 02       		.uleb128 0x2
 6976 15ad 76       		.byte	0x76
 6977 15ae 00       		.sleb128 0
 6978 15af 00       		.byte	0
 6979 15b0 00       		.byte	0
 6980 15b1 27       		.uleb128 0x27
 6981 15b2 D30E0000 		.4byte	.LASF164
 6982 15b6 01       		.byte	0x1
 6983 15b7 0E0C     		.2byte	0xc0e
 6984 15b9 00000000 		.4byte	.LFB97
 6985 15bd 20000000 		.4byte	.LFE97-.LFB97
 6986 15c1 01       		.uleb128 0x1
 6987 15c2 9C       		.byte	0x9c
 6988 15c3 EA150000 		.4byte	0x15ea
 6989 15c7 19       		.uleb128 0x19
 6990 15c8 41010000 		.4byte	.LASF165
 6991 15cc 01       		.byte	0x1
 6992 15cd 0E0C     		.2byte	0xc0e
 6993 15cf F0150000 		.4byte	0x15f0
 6994 15d3 C20B0000 		.4byte	.LLST84
 6995 15d7 1C       		.uleb128 0x1c
 6996 15d8 08000000 		.4byte	.LVL269
 6997 15dc 6C1F0000 		.4byte	0x1f6c
 6998 15e0 1C       		.uleb128 0x1c
 6999 15e1 1A000000 		.4byte	.LVL270
 7000 15e5 831F0000 		.4byte	0x1f83
 7001 15e9 00       		.byte	0
 7002 15ea 06       		.uleb128 0x6
 7003 15eb 04       		.byte	0x4
 7004 15ec DB020000 		.4byte	0x2db
 7005 15f0 07       		.uleb128 0x7
 7006 15f1 EA150000 		.4byte	0x15ea
 7007 15f5 27       		.uleb128 0x27
 7008 15f6 2A0D0000 		.4byte	.LASF166
 7009 15fa 01       		.byte	0x1
 7010 15fb 1A0C     		.2byte	0xc1a
 7011 15fd 00000000 		.4byte	.LFB98
 7012 1601 14000000 		.4byte	.LFE98-.LFB98
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 226


 7013 1605 01       		.uleb128 0x1
 7014 1606 9C       		.byte	0x9c
 7015 1607 1A160000 		.4byte	0x161a
 7016 160b 1F       		.uleb128 0x1f
 7017 160c 41010000 		.4byte	.LASF165
 7018 1610 01       		.byte	0x1
 7019 1611 1A0C     		.2byte	0xc1a
 7020 1613 F0150000 		.4byte	0x15f0
 7021 1617 01       		.uleb128 0x1
 7022 1618 50       		.byte	0x50
 7023 1619 00       		.byte	0
 7024 161a 25       		.uleb128 0x25
 7025 161b 260C0000 		.4byte	.LASF167
 7026 161f 01       		.byte	0x1
 7027 1620 220C     		.2byte	0xc22
 7028 1622 35010000 		.4byte	0x135
 7029 1626 00000000 		.4byte	.LFB99
 7030 162a 58000000 		.4byte	.LFE99-.LFB99
 7031 162e 01       		.uleb128 0x1
 7032 162f 9C       		.byte	0x9c
 7033 1630 B5160000 		.4byte	0x16b5
 7034 1634 19       		.uleb128 0x19
 7035 1635 41010000 		.4byte	.LASF165
 7036 1639 01       		.byte	0x1
 7037 163a 220C     		.2byte	0xc22
 7038 163c F0150000 		.4byte	0x15f0
 7039 1640 EE0B0000 		.4byte	.LLST85
 7040 1644 19       		.uleb128 0x19
 7041 1645 E20D0000 		.4byte	.LASF168
 7042 1649 01       		.byte	0x1
 7043 164a 220C     		.2byte	0xc22
 7044 164c 17120000 		.4byte	0x1217
 7045 1650 650C0000 		.4byte	.LLST86
 7046 1654 1A       		.uleb128 0x1a
 7047 1655 4F040000 		.4byte	.LASF87
 7048 1659 01       		.byte	0x1
 7049 165a 240C     		.2byte	0xc24
 7050 165c 35010000 		.4byte	0x135
 7051 1660 910C0000 		.4byte	.LLST87
 7052 1664 26       		.uleb128 0x26
 7053 1665 0A000000 		.4byte	.LBB52
 7054 1669 42000000 		.4byte	.LBE52-.LBB52
 7055 166d A2160000 		.4byte	0x16a2
 7056 1671 1A       		.uleb128 0x1a
 7057 1672 57040000 		.4byte	.LASF112
 7058 1676 01       		.byte	0x1
 7059 1677 2C0C     		.2byte	0xc2c
 7060 1679 DA080000 		.4byte	0x8da
 7061 167d C70C0000 		.4byte	.LLST88
 7062 1681 1A       		.uleb128 0x1a
 7063 1682 2C060000 		.4byte	.LASF169
 7064 1686 01       		.byte	0x1
 7065 1687 2D0C     		.2byte	0xc2d
 7066 1689 DA080000 		.4byte	0x8da
 7067 168d E50C0000 		.4byte	.LLST89
 7068 1691 1D       		.uleb128 0x1d
 7069 1692 3A000000 		.4byte	.LVL278
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 227


 7070 1696 F5150000 		.4byte	0x15f5
 7071 169a 1E       		.uleb128 0x1e
 7072 169b 01       		.uleb128 0x1
 7073 169c 50       		.byte	0x50
 7074 169d 02       		.uleb128 0x2
 7075 169e 74       		.byte	0x74
 7076 169f 00       		.sleb128 0
 7077 16a0 00       		.byte	0
 7078 16a1 00       		.byte	0
 7079 16a2 1C       		.uleb128 0x1c
 7080 16a3 0A000000 		.4byte	.LVL274
 7081 16a7 6C1F0000 		.4byte	0x1f6c
 7082 16ab 1C       		.uleb128 0x1c
 7083 16ac 50000000 		.4byte	.LVL287
 7084 16b0 831F0000 		.4byte	0x1f83
 7085 16b4 00       		.byte	0
 7086 16b5 2D       		.uleb128 0x2d
 7087 16b6 A6010000 		.4byte	.LASF171
 7088 16ba 01       		.byte	0x1
 7089 16bb 610C     		.2byte	0xc61
 7090 16bd 00000000 		.4byte	.LFB100
 7091 16c1 10000000 		.4byte	.LFE100-.LFB100
 7092 16c5 01       		.uleb128 0x1
 7093 16c6 9C       		.byte	0x9c
 7094 16c7 25       		.uleb128 0x25
 7095 16c8 8E0E0000 		.4byte	.LASF172
 7096 16cc 01       		.byte	0x1
 7097 16cd 400E     		.2byte	0xe40
 7098 16cf 40010000 		.4byte	0x140
 7099 16d3 00000000 		.4byte	.LFB105
 7100 16d7 18000000 		.4byte	.LFE105-.LFB105
 7101 16db 01       		.uleb128 0x1
 7102 16dc 9C       		.byte	0x9c
 7103 16dd 29170000 		.4byte	0x1729
 7104 16e1 19       		.uleb128 0x19
 7105 16e2 D80A0000 		.4byte	.LASF91
 7106 16e6 01       		.byte	0x1
 7107 16e7 400E     		.2byte	0xe40
 7108 16e9 39020000 		.4byte	0x239
 7109 16ed 130D0000 		.4byte	.LLST90
 7110 16f1 1A       		.uleb128 0x1a
 7111 16f2 41050000 		.4byte	.LASF88
 7112 16f6 01       		.byte	0x1
 7113 16f7 420E     		.2byte	0xe42
 7114 16f9 3B050000 		.4byte	0x53b
 7115 16fd 260D0000 		.4byte	.LLST91
 7116 1701 1A       		.uleb128 0x1a
 7117 1702 03030000 		.4byte	.LASF173
 7118 1706 01       		.byte	0x1
 7119 1707 430E     		.2byte	0xe43
 7120 1709 56010000 		.4byte	0x156
 7121 170d 390D0000 		.4byte	.LLST92
 7122 1711 20       		.uleb128 0x20
 7123 1712 9D050000 		.4byte	.LASF120
 7124 1716 01       		.byte	0x1
 7125 1717 440E     		.2byte	0xe44
 7126 1719 40010000 		.4byte	0x140
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 228


 7127 171d 01       		.uleb128 0x1
 7128 171e 50       		.byte	0x50
 7129 171f 1C       		.uleb128 0x1c
 7130 1720 12000000 		.4byte	.LVL291
 7131 1724 CE040000 		.4byte	0x4ce
 7132 1728 00       		.byte	0
 7133 1729 25       		.uleb128 0x25
 7134 172a 2E070000 		.4byte	.LASF174
 7135 172e 01       		.byte	0x1
 7136 172f AC0E     		.2byte	0xeac
 7137 1731 39020000 		.4byte	0x239
 7138 1735 00000000 		.4byte	.LFB108
 7139 1739 0C000000 		.4byte	.LFE108-.LFB108
 7140 173d 01       		.uleb128 0x1
 7141 173e 9C       		.byte	0x9c
 7142 173f 52170000 		.4byte	0x1752
 7143 1743 20       		.uleb128 0x20
 7144 1744 4F040000 		.4byte	.LASF87
 7145 1748 01       		.byte	0x1
 7146 1749 AE0E     		.2byte	0xeae
 7147 174b 39020000 		.4byte	0x239
 7148 174f 01       		.uleb128 0x1
 7149 1750 50       		.byte	0x50
 7150 1751 00       		.byte	0
 7151 1752 25       		.uleb128 0x25
 7152 1753 6C0C0000 		.4byte	.LASF175
 7153 1757 01       		.byte	0x1
 7154 1758 D90E     		.2byte	0xed9
 7155 175a 35010000 		.4byte	0x135
 7156 175e 00000000 		.4byte	.LFB109
 7157 1762 D0000000 		.4byte	.LFE109-.LFB109
 7158 1766 01       		.uleb128 0x1
 7159 1767 9C       		.byte	0x9c
 7160 1768 C1170000 		.4byte	0x17c1
 7161 176c 19       		.uleb128 0x19
 7162 176d 57060000 		.4byte	.LASF176
 7163 1771 01       		.byte	0x1
 7164 1772 D90E     		.2byte	0xed9
 7165 1774 B9040000 		.4byte	0x4b9
 7166 1778 4D0D0000 		.4byte	.LLST93
 7167 177c 1A       		.uleb128 0x1a
 7168 177d 7B010000 		.4byte	.LASF177
 7169 1781 01       		.byte	0x1
 7170 1782 DB0E     		.2byte	0xedb
 7171 1784 6D0D0000 		.4byte	0xd6d
 7172 1788 D90D0000 		.4byte	.LLST94
 7173 178c 1A       		.uleb128 0x1a
 7174 178d 4F040000 		.4byte	.LASF87
 7175 1791 01       		.byte	0x1
 7176 1792 DC0E     		.2byte	0xedc
 7177 1794 35010000 		.4byte	0x135
 7178 1798 650E0000 		.4byte	.LLST95
 7179 179c 22       		.uleb128 0x22
 7180 179d 4C000000 		.4byte	.LVL295
 7181 17a1 8E1F0000 		.4byte	0x1f8e
 7182 17a5 B0170000 		.4byte	0x17b0
 7183 17a9 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 229


 7184 17aa 01       		.uleb128 0x1
 7185 17ab 50       		.byte	0x50
 7186 17ac 02       		.uleb128 0x2
 7187 17ad 75       		.byte	0x75
 7188 17ae 00       		.sleb128 0
 7189 17af 00       		.byte	0
 7190 17b0 1D       		.uleb128 0x1d
 7191 17b1 9A000000 		.4byte	.LVL297
 7192 17b5 771F0000 		.4byte	0x1f77
 7193 17b9 1E       		.uleb128 0x1e
 7194 17ba 01       		.uleb128 0x1
 7195 17bb 51       		.byte	0x51
 7196 17bc 02       		.uleb128 0x2
 7197 17bd 75       		.byte	0x75
 7198 17be 00       		.sleb128 0
 7199 17bf 00       		.byte	0
 7200 17c0 00       		.byte	0
 7201 17c1 25       		.uleb128 0x25
 7202 17c2 6B0E0000 		.4byte	.LASF178
 7203 17c6 01       		.byte	0x1
 7204 17c7 300F     		.2byte	0xf30
 7205 17c9 35010000 		.4byte	0x135
 7206 17cd 00000000 		.4byte	.LFB110
 7207 17d1 88000000 		.4byte	.LFE110-.LFB110
 7208 17d5 01       		.uleb128 0x1
 7209 17d6 9C       		.byte	0x9c
 7210 17d7 30180000 		.4byte	0x1830
 7211 17db 19       		.uleb128 0x19
 7212 17dc 57060000 		.4byte	.LASF176
 7213 17e0 01       		.byte	0x1
 7214 17e1 300F     		.2byte	0xf30
 7215 17e3 B9040000 		.4byte	0x4b9
 7216 17e7 9B0E0000 		.4byte	.LLST96
 7217 17eb 1A       		.uleb128 0x1a
 7218 17ec 41050000 		.4byte	.LASF88
 7219 17f0 01       		.byte	0x1
 7220 17f1 320F     		.2byte	0xf32
 7221 17f3 6D0D0000 		.4byte	0xd6d
 7222 17f7 030F0000 		.4byte	.LLST97
 7223 17fb 1A       		.uleb128 0x1a
 7224 17fc 4F040000 		.4byte	.LASF87
 7225 1800 01       		.byte	0x1
 7226 1801 330F     		.2byte	0xf33
 7227 1803 35010000 		.4byte	0x135
 7228 1807 6B0F0000 		.4byte	.LLST98
 7229 180b 22       		.uleb128 0x22
 7230 180c 22000000 		.4byte	.LVL307
 7231 1810 8E1F0000 		.4byte	0x1f8e
 7232 1814 1F180000 		.4byte	0x181f
 7233 1818 1E       		.uleb128 0x1e
 7234 1819 01       		.uleb128 0x1
 7235 181a 50       		.byte	0x50
 7236 181b 02       		.uleb128 0x2
 7237 181c 75       		.byte	0x75
 7238 181d 00       		.sleb128 0
 7239 181e 00       		.byte	0
 7240 181f 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 230


 7241 1820 72000000 		.4byte	.LVL309
 7242 1824 771F0000 		.4byte	0x1f77
 7243 1828 1E       		.uleb128 0x1e
 7244 1829 01       		.uleb128 0x1
 7245 182a 51       		.byte	0x51
 7246 182b 02       		.uleb128 0x2
 7247 182c 75       		.byte	0x75
 7248 182d 00       		.sleb128 0
 7249 182e 00       		.byte	0
 7250 182f 00       		.byte	0
 7251 1830 27       		.uleb128 0x27
 7252 1831 0B080000 		.4byte	.LASF179
 7253 1835 01       		.byte	0x1
 7254 1836 800F     		.2byte	0xf80
 7255 1838 00000000 		.4byte	.LFB111
 7256 183c A0000000 		.4byte	.LFE111-.LFB111
 7257 1840 01       		.uleb128 0x1
 7258 1841 9C       		.byte	0x9c
 7259 1842 C8180000 		.4byte	0x18c8
 7260 1846 19       		.uleb128 0x19
 7261 1847 57060000 		.4byte	.LASF176
 7262 184b 01       		.byte	0x1
 7263 184c 800F     		.2byte	0xf80
 7264 184e B9040000 		.4byte	0x4b9
 7265 1852 B90F0000 		.4byte	.LLST99
 7266 1856 19       		.uleb128 0x19
 7267 1857 B8060000 		.4byte	.LASF180
 7268 185b 01       		.byte	0x1
 7269 185c 800F     		.2byte	0xf80
 7270 185e 40010000 		.4byte	0x140
 7271 1862 FB0F0000 		.4byte	.LLST100
 7272 1866 1A       		.uleb128 0x1a
 7273 1867 41050000 		.4byte	.LASF88
 7274 186b 01       		.byte	0x1
 7275 186c 820F     		.2byte	0xf82
 7276 186e 6D0D0000 		.4byte	0xd6d
 7277 1872 27100000 		.4byte	.LLST101
 7278 1876 1A       		.uleb128 0x1a
 7279 1877 B7010000 		.4byte	.LASF127
 7280 187b 01       		.byte	0x1
 7281 187c 830F     		.2byte	0xf83
 7282 187e 40010000 		.4byte	0x140
 7283 1882 69100000 		.4byte	.LLST102
 7284 1886 1A       		.uleb128 0x1a
 7285 1887 AA0E0000 		.4byte	.LASF181
 7286 188b 01       		.byte	0x1
 7287 188c 830F     		.2byte	0xf83
 7288 188e 40010000 		.4byte	0x140
 7289 1892 7C100000 		.4byte	.LLST103
 7290 1896 2E       		.uleb128 0x2e
 7291 1897 590A0000 		.4byte	.LASF182
 7292 189b 01       		.byte	0x1
 7293 189c 840F     		.2byte	0xf84
 7294 189e C8180000 		.4byte	0x18c8
 7295 18a2 01       		.byte	0x1
 7296 18a3 22       		.uleb128 0x22
 7297 18a4 4C000000 		.4byte	.LVL323
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 231


 7298 18a8 8E1F0000 		.4byte	0x1f8e
 7299 18ac B7180000 		.4byte	0x18b7
 7300 18b0 1E       		.uleb128 0x1e
 7301 18b1 01       		.uleb128 0x1
 7302 18b2 50       		.byte	0x50
 7303 18b3 02       		.uleb128 0x2
 7304 18b4 75       		.byte	0x75
 7305 18b5 00       		.sleb128 0
 7306 18b6 00       		.byte	0
 7307 18b7 1D       		.uleb128 0x1d
 7308 18b8 94000000 		.4byte	.LVL324
 7309 18bc 771F0000 		.4byte	0x1f77
 7310 18c0 1E       		.uleb128 0x1e
 7311 18c1 01       		.uleb128 0x1
 7312 18c2 51       		.byte	0x51
 7313 18c3 02       		.uleb128 0x2
 7314 18c4 75       		.byte	0x75
 7315 18c5 00       		.sleb128 0
 7316 18c6 00       		.byte	0
 7317 18c7 00       		.byte	0
 7318 18c8 07       		.uleb128 0x7
 7319 18c9 40010000 		.4byte	0x140
 7320 18cd 25       		.uleb128 0x25
 7321 18ce 8F000000 		.4byte	.LASF183
 7322 18d2 01       		.byte	0x1
 7323 18d3 1B11     		.2byte	0x111b
 7324 18d5 4B010000 		.4byte	0x14b
 7325 18d9 00000000 		.4byte	.LFB112
 7326 18dd 20000000 		.4byte	.LFE112-.LFB112
 7327 18e1 01       		.uleb128 0x1
 7328 18e2 9C       		.byte	0x9c
 7329 18e3 F6180000 		.4byte	0x18f6
 7330 18e7 20       		.uleb128 0x20
 7331 18e8 9D050000 		.4byte	.LASF120
 7332 18ec 01       		.byte	0x1
 7333 18ed 1D11     		.2byte	0x111d
 7334 18ef 4B010000 		.4byte	0x14b
 7335 18f3 01       		.uleb128 0x1
 7336 18f4 50       		.byte	0x50
 7337 18f5 00       		.byte	0
 7338 18f6 2F       		.uleb128 0x2f
 7339 18f7 810B0000 		.4byte	.LASF185
 7340 18fb 01       		.byte	0x1
 7341 18fc 2B11     		.2byte	0x112b
 7342 18fe B0000000 		.4byte	0xb0
 7343 1902 00000000 		.4byte	.LFB113
 7344 1906 20000000 		.4byte	.LFE113-.LFB113
 7345 190a 01       		.uleb128 0x1
 7346 190b 9C       		.byte	0x9c
 7347 190c 25       		.uleb128 0x25
 7348 190d 5A0E0000 		.4byte	.LASF186
 7349 1911 01       		.byte	0x1
 7350 1912 3C11     		.2byte	0x113c
 7351 1914 EB000000 		.4byte	0xeb
 7352 1918 00000000 		.4byte	.LFB114
 7353 191c 80000000 		.4byte	.LFE114-.LFB114
 7354 1920 01       		.uleb128 0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 232


 7355 1921 9C       		.byte	0x9c
 7356 1922 94190000 		.4byte	0x1994
 7357 1926 19       		.uleb128 0x19
 7358 1927 EF010000 		.4byte	.LASF187
 7359 192b 01       		.byte	0x1
 7360 192c 3C11     		.2byte	0x113c
 7361 192e 35010000 		.4byte	0x135
 7362 1932 9B100000 		.4byte	.LLST104
 7363 1936 19       		.uleb128 0x19
 7364 1937 CD010000 		.4byte	.LASF109
 7365 193b 01       		.byte	0x1
 7366 193c 3C11     		.2byte	0x113c
 7367 193e 4B010000 		.4byte	0x14b
 7368 1942 C7100000 		.4byte	.LLST105
 7369 1946 1A       		.uleb128 0x1a
 7370 1947 510E0000 		.4byte	.LASF188
 7371 194b 01       		.byte	0x1
 7372 194c 3E11     		.2byte	0x113e
 7373 194e EB000000 		.4byte	0xeb
 7374 1952 F3100000 		.4byte	.LLST106
 7375 1956 1C       		.uleb128 0x1c
 7376 1957 0A000000 		.4byte	.LVL328
 7377 195b 6C1F0000 		.4byte	0x1f6c
 7378 195f 22       		.uleb128 0x22
 7379 1960 2A000000 		.4byte	.LVL329
 7380 1964 4C080000 		.4byte	0x84c
 7381 1968 78190000 		.4byte	0x1978
 7382 196c 1E       		.uleb128 0x1e
 7383 196d 01       		.uleb128 0x1
 7384 196e 50       		.byte	0x50
 7385 196f 02       		.uleb128 0x2
 7386 1970 74       		.byte	0x74
 7387 1971 00       		.sleb128 0
 7388 1972 1E       		.uleb128 0x1e
 7389 1973 01       		.uleb128 0x1
 7390 1974 51       		.byte	0x51
 7391 1975 01       		.uleb128 0x1
 7392 1976 31       		.byte	0x31
 7393 1977 00       		.byte	0
 7394 1978 1C       		.uleb128 0x1c
 7395 1979 3E000000 		.4byte	.LVL330
 7396 197d 831F0000 		.4byte	0x1f83
 7397 1981 1C       		.uleb128 0x1c
 7398 1982 42000000 		.4byte	.LVL331
 7399 1986 6C1F0000 		.4byte	0x1f6c
 7400 198a 1C       		.uleb128 0x1c
 7401 198b 74000000 		.4byte	.LVL333
 7402 198f 831F0000 		.4byte	0x1f83
 7403 1993 00       		.byte	0
 7404 1994 25       		.uleb128 0x25
 7405 1995 410E0000 		.4byte	.LASF189
 7406 1999 01       		.byte	0x1
 7407 199a 8011     		.2byte	0x1180
 7408 199c 35010000 		.4byte	0x135
 7409 19a0 00000000 		.4byte	.LFB115
 7410 19a4 A4000000 		.4byte	.LFE115-.LFB115
 7411 19a8 01       		.uleb128 0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 233


 7412 19a9 9C       		.byte	0x9c
 7413 19aa 3C1A0000 		.4byte	0x1a3c
 7414 19ae 19       		.uleb128 0x19
 7415 19af 56050000 		.4byte	.LASF190
 7416 19b3 01       		.byte	0x1
 7417 19b4 8011     		.2byte	0x1180
 7418 19b6 EB000000 		.4byte	0xeb
 7419 19ba 11110000 		.4byte	.LLST107
 7420 19be 19       		.uleb128 0x19
 7421 19bf E80E0000 		.4byte	.LASF191
 7422 19c3 01       		.byte	0x1
 7423 19c4 8011     		.2byte	0x1180
 7424 19c6 EB000000 		.4byte	0xeb
 7425 19ca 3D110000 		.4byte	.LLST108
 7426 19ce 19       		.uleb128 0x19
 7427 19cf 3D080000 		.4byte	.LASF192
 7428 19d3 01       		.byte	0x1
 7429 19d4 8011     		.2byte	0x1180
 7430 19d6 3C1A0000 		.4byte	0x1a3c
 7431 19da 82110000 		.4byte	.LLST109
 7432 19de 19       		.uleb128 0x19
 7433 19df CD010000 		.4byte	.LASF109
 7434 19e3 01       		.byte	0x1
 7435 19e4 8011     		.2byte	0x1180
 7436 19e6 4B010000 		.4byte	0x14b
 7437 19ea C7110000 		.4byte	.LLST110
 7438 19ee 1A       		.uleb128 0x1a
 7439 19ef 4F040000 		.4byte	.LASF87
 7440 19f3 01       		.byte	0x1
 7441 19f4 8211     		.2byte	0x1182
 7442 19f6 35010000 		.4byte	0x135
 7443 19fa F3110000 		.4byte	.LLST111
 7444 19fe 1C       		.uleb128 0x1c
 7445 19ff 0E000000 		.4byte	.LVL336
 7446 1a03 6C1F0000 		.4byte	0x1f6c
 7447 1a07 22       		.uleb128 0x22
 7448 1a08 40000000 		.4byte	.LVL337
 7449 1a0c 4C080000 		.4byte	0x84c
 7450 1a10 201A0000 		.4byte	0x1a20
 7451 1a14 1E       		.uleb128 0x1e
 7452 1a15 01       		.uleb128 0x1
 7453 1a16 50       		.byte	0x50
 7454 1a17 02       		.uleb128 0x2
 7455 1a18 76       		.byte	0x76
 7456 1a19 00       		.sleb128 0
 7457 1a1a 1E       		.uleb128 0x1e
 7458 1a1b 01       		.uleb128 0x1
 7459 1a1c 51       		.byte	0x51
 7460 1a1d 01       		.uleb128 0x1
 7461 1a1e 31       		.byte	0x31
 7462 1a1f 00       		.byte	0
 7463 1a20 1C       		.uleb128 0x1c
 7464 1a21 54000000 		.4byte	.LVL338
 7465 1a25 831F0000 		.4byte	0x1f83
 7466 1a29 1C       		.uleb128 0x1c
 7467 1a2a 58000000 		.4byte	.LVL339
 7468 1a2e 6C1F0000 		.4byte	0x1f6c
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 234


 7469 1a32 1C       		.uleb128 0x1c
 7470 1a33 98000000 		.4byte	.LVL345
 7471 1a37 831F0000 		.4byte	0x1f83
 7472 1a3b 00       		.byte	0
 7473 1a3c 06       		.uleb128 0x6
 7474 1a3d 04       		.byte	0x4
 7475 1a3e EB000000 		.4byte	0xeb
 7476 1a42 25       		.uleb128 0x25
 7477 1a43 0C0D0000 		.4byte	.LASF193
 7478 1a47 01       		.byte	0x1
 7479 1a48 D011     		.2byte	0x11d0
 7480 1a4a 35010000 		.4byte	0x135
 7481 1a4e 00000000 		.4byte	.LFB116
 7482 1a52 B8000000 		.4byte	.LFE116-.LFB116
 7483 1a56 01       		.uleb128 0x1
 7484 1a57 9C       		.byte	0x9c
 7485 1a58 071B0000 		.4byte	0x1b07
 7486 1a5c 19       		.uleb128 0x19
 7487 1a5d CD040000 		.4byte	.LASF194
 7488 1a61 01       		.byte	0x1
 7489 1a62 D011     		.2byte	0x11d0
 7490 1a64 39020000 		.4byte	0x239
 7491 1a68 1D120000 		.4byte	.LLST112
 7492 1a6c 19       		.uleb128 0x19
 7493 1a6d 87000000 		.4byte	.LASF195
 7494 1a71 01       		.byte	0x1
 7495 1a72 D011     		.2byte	0x11d0
 7496 1a74 EB000000 		.4byte	0xeb
 7497 1a78 49120000 		.4byte	.LLST113
 7498 1a7c 19       		.uleb128 0x19
 7499 1a7d 27020000 		.4byte	.LASF196
 7500 1a81 01       		.byte	0x1
 7501 1a82 D011     		.2byte	0x11d0
 7502 1a84 AB020000 		.4byte	0x2ab
 7503 1a88 8E120000 		.4byte	.LLST114
 7504 1a8c 19       		.uleb128 0x19
 7505 1a8d 33030000 		.4byte	.LASF197
 7506 1a91 01       		.byte	0x1
 7507 1a92 D011     		.2byte	0x11d0
 7508 1a94 3C1A0000 		.4byte	0x1a3c
 7509 1a98 AF120000 		.4byte	.LLST115
 7510 1a9c 1A       		.uleb128 0x1a
 7511 1a9d 41050000 		.4byte	.LASF88
 7512 1aa1 01       		.byte	0x1
 7513 1aa2 D211     		.2byte	0x11d2
 7514 1aa4 3B050000 		.4byte	0x53b
 7515 1aa8 DB120000 		.4byte	.LLST116
 7516 1aac 1A       		.uleb128 0x1a
 7517 1aad 4F040000 		.4byte	.LASF87
 7518 1ab1 01       		.byte	0x1
 7519 1ab2 D311     		.2byte	0x11d3
 7520 1ab4 35010000 		.4byte	0x135
 7521 1ab8 07130000 		.4byte	.LLST117
 7522 1abc 1A       		.uleb128 0x1a
 7523 1abd 87020000 		.4byte	.LASF198
 7524 1ac1 01       		.byte	0x1
 7525 1ac2 D411     		.2byte	0x11d4
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 235


 7526 1ac4 CA000000 		.4byte	0xca
 7527 1ac8 31130000 		.4byte	.LLST118
 7528 1acc 1C       		.uleb128 0x1c
 7529 1acd 0E000000 		.4byte	.LVL349
 7530 1ad1 6C1F0000 		.4byte	0x1f6c
 7531 1ad5 22       		.uleb128 0x22
 7532 1ad6 64000000 		.4byte	.LVL354
 7533 1ada 8E1F0000 		.4byte	0x1f8e
 7534 1ade E91A0000 		.4byte	0x1ae9
 7535 1ae2 1E       		.uleb128 0x1e
 7536 1ae3 01       		.uleb128 0x1
 7537 1ae4 50       		.byte	0x50
 7538 1ae5 02       		.uleb128 0x2
 7539 1ae6 77       		.byte	0x77
 7540 1ae7 00       		.sleb128 0
 7541 1ae8 00       		.byte	0
 7542 1ae9 22       		.uleb128 0x22
 7543 1aea 8A000000 		.4byte	.LVL356
 7544 1aee 771F0000 		.4byte	0x1f77
 7545 1af2 FD1A0000 		.4byte	0x1afd
 7546 1af6 1E       		.uleb128 0x1e
 7547 1af7 01       		.uleb128 0x1
 7548 1af8 51       		.byte	0x51
 7549 1af9 02       		.uleb128 0x2
 7550 1afa 77       		.byte	0x77
 7551 1afb 00       		.sleb128 0
 7552 1afc 00       		.byte	0
 7553 1afd 1C       		.uleb128 0x1c
 7554 1afe AA000000 		.4byte	.LVL357
 7555 1b02 831F0000 		.4byte	0x1f83
 7556 1b06 00       		.byte	0
 7557 1b07 25       		.uleb128 0x25
 7558 1b08 C1000000 		.4byte	.LASF199
 7559 1b0c 01       		.byte	0x1
 7560 1b0d 3A12     		.2byte	0x123a
 7561 1b0f 35010000 		.4byte	0x135
 7562 1b13 00000000 		.4byte	.LFB117
 7563 1b17 D8000000 		.4byte	.LFE117-.LFB117
 7564 1b1b 01       		.uleb128 0x1
 7565 1b1c 9C       		.byte	0x9c
 7566 1b1d 361C0000 		.4byte	0x1c36
 7567 1b21 19       		.uleb128 0x19
 7568 1b22 CD040000 		.4byte	.LASF194
 7569 1b26 01       		.byte	0x1
 7570 1b27 3A12     		.2byte	0x123a
 7571 1b29 39020000 		.4byte	0x239
 7572 1b2d 44130000 		.4byte	.LLST119
 7573 1b31 19       		.uleb128 0x19
 7574 1b32 87000000 		.4byte	.LASF195
 7575 1b36 01       		.byte	0x1
 7576 1b37 3A12     		.2byte	0x123a
 7577 1b39 EB000000 		.4byte	0xeb
 7578 1b3d 86130000 		.4byte	.LLST120
 7579 1b41 19       		.uleb128 0x19
 7580 1b42 27020000 		.4byte	.LASF196
 7581 1b46 01       		.byte	0x1
 7582 1b47 3A12     		.2byte	0x123a
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 236


 7583 1b49 AB020000 		.4byte	0x2ab
 7584 1b4d C0130000 		.4byte	.LLST121
 7585 1b51 19       		.uleb128 0x19
 7586 1b52 33030000 		.4byte	.LASF197
 7587 1b56 01       		.byte	0x1
 7588 1b57 3A12     		.2byte	0x123a
 7589 1b59 3C1A0000 		.4byte	0x1a3c
 7590 1b5d E1130000 		.4byte	.LLST122
 7591 1b61 19       		.uleb128 0x19
 7592 1b62 F5040000 		.4byte	.LASF200
 7593 1b66 01       		.byte	0x1
 7594 1b67 3A12     		.2byte	0x123a
 7595 1b69 361C0000 		.4byte	0x1c36
 7596 1b6d 02140000 		.4byte	.LLST123
 7597 1b71 1A       		.uleb128 0x1a
 7598 1b72 41050000 		.4byte	.LASF88
 7599 1b76 01       		.byte	0x1
 7600 1b77 3C12     		.2byte	0x123c
 7601 1b79 3B050000 		.4byte	0x53b
 7602 1b7d 22140000 		.4byte	.LLST124
 7603 1b81 1A       		.uleb128 0x1a
 7604 1b82 87020000 		.4byte	.LASF198
 7605 1b86 01       		.byte	0x1
 7606 1b87 3D12     		.2byte	0x123d
 7607 1b89 CA000000 		.4byte	0xca
 7608 1b8d 64140000 		.4byte	.LLST125
 7609 1b91 1A       		.uleb128 0x1a
 7610 1b92 4F040000 		.4byte	.LASF87
 7611 1b96 01       		.byte	0x1
 7612 1b97 3E12     		.2byte	0x123e
 7613 1b99 35010000 		.4byte	0x135
 7614 1b9d 77140000 		.4byte	.LLST126
 7615 1ba1 28       		.uleb128 0x28
 7616 1ba2 8B0A0000 		.4byte	.LASF132
 7617 1ba6 01       		.byte	0x1
 7618 1ba7 3F12     		.2byte	0x123f
 7619 1ba9 40010000 		.4byte	0x140
 7620 1bad 29       		.uleb128 0x29
 7621 1bae F0030000 		.4byte	0x3f0
 7622 1bb2 02000000 		.4byte	.LBB53
 7623 1bb6 14000000 		.4byte	.LBE53-.LBB53
 7624 1bba 01       		.byte	0x1
 7625 1bbb 5712     		.2byte	0x1257
 7626 1bbd D61B0000 		.4byte	0x1bd6
 7627 1bc1 23       		.uleb128 0x23
 7628 1bc2 02000000 		.4byte	.LBB54
 7629 1bc6 14000000 		.4byte	.LBE54-.LBB54
 7630 1bca 2A       		.uleb128 0x2a
 7631 1bcb 00040000 		.4byte	0x400
 7632 1bcf 2A       		.uleb128 0x2a
 7633 1bd0 0B040000 		.4byte	0x40b
 7634 1bd4 00       		.byte	0
 7635 1bd5 00       		.byte	0
 7636 1bd6 29       		.uleb128 0x29
 7637 1bd7 17040000 		.4byte	0x417
 7638 1bdb C8000000 		.4byte	.LBB55
 7639 1bdf 04000000 		.4byte	.LBE55-.LBB55
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 237


 7640 1be3 01       		.byte	0x1
 7641 1be4 AC12     		.2byte	0x12ac
 7642 1be6 F41B0000 		.4byte	0x1bf4
 7643 1bea 2C       		.uleb128 0x2c
 7644 1beb 23040000 		.4byte	0x423
 7645 1bef A1140000 		.4byte	.LLST127
 7646 1bf3 00       		.byte	0
 7647 1bf4 22       		.uleb128 0x22
 7648 1bf5 76000000 		.4byte	.LVL369
 7649 1bf9 8E1F0000 		.4byte	0x1f8e
 7650 1bfd 081C0000 		.4byte	0x1c08
 7651 1c01 1E       		.uleb128 0x1e
 7652 1c02 01       		.uleb128 0x1
 7653 1c03 50       		.byte	0x50
 7654 1c04 02       		.uleb128 0x2
 7655 1c05 77       		.byte	0x77
 7656 1c06 00       		.sleb128 0
 7657 1c07 00       		.byte	0
 7658 1c08 22       		.uleb128 0x22
 7659 1c09 9A000000 		.4byte	.LVL370
 7660 1c0d 771F0000 		.4byte	0x1f77
 7661 1c11 1C1C0000 		.4byte	0x1c1c
 7662 1c15 1E       		.uleb128 0x1e
 7663 1c16 01       		.uleb128 0x1
 7664 1c17 51       		.byte	0x51
 7665 1c18 02       		.uleb128 0x2
 7666 1c19 77       		.byte	0x77
 7667 1c1a 00       		.sleb128 0
 7668 1c1b 00       		.byte	0
 7669 1c1c 1D       		.uleb128 0x1d
 7670 1c1d A6000000 		.4byte	.LVL373
 7671 1c21 771F0000 		.4byte	0x1f77
 7672 1c25 1E       		.uleb128 0x1e
 7673 1c26 01       		.uleb128 0x1
 7674 1c27 50       		.byte	0x50
 7675 1c28 05       		.uleb128 0x5
 7676 1c29 03       		.byte	0x3
 7677 1c2a 14000000 		.4byte	.LANCHOR0+20
 7678 1c2e 1E       		.uleb128 0x1e
 7679 1c2f 01       		.uleb128 0x1
 7680 1c30 51       		.byte	0x51
 7681 1c31 02       		.uleb128 0x2
 7682 1c32 76       		.byte	0x76
 7683 1c33 18       		.sleb128 24
 7684 1c34 00       		.byte	0
 7685 1c35 00       		.byte	0
 7686 1c36 06       		.uleb128 0x6
 7687 1c37 04       		.byte	0x4
 7688 1c38 35010000 		.4byte	0x135
 7689 1c3c 27       		.uleb128 0x27
 7690 1c3d EA060000 		.4byte	.LASF201
 7691 1c41 01       		.byte	0x1
 7692 1c42 B612     		.2byte	0x12b6
 7693 1c44 00000000 		.4byte	.LFB118
 7694 1c48 9C000000 		.4byte	.LFE118-.LFB118
 7695 1c4c 01       		.uleb128 0x1
 7696 1c4d 9C       		.byte	0x9c
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 238


 7697 1c4e 271D0000 		.4byte	0x1d27
 7698 1c52 19       		.uleb128 0x19
 7699 1c53 CD040000 		.4byte	.LASF194
 7700 1c57 01       		.byte	0x1
 7701 1c58 B612     		.2byte	0x12b6
 7702 1c5a 39020000 		.4byte	0x239
 7703 1c5e B4140000 		.4byte	.LLST128
 7704 1c62 19       		.uleb128 0x19
 7705 1c63 F5040000 		.4byte	.LASF200
 7706 1c67 01       		.byte	0x1
 7707 1c68 B612     		.2byte	0x12b6
 7708 1c6a 361C0000 		.4byte	0x1c36
 7709 1c6e F6140000 		.4byte	.LLST129
 7710 1c72 1A       		.uleb128 0x1a
 7711 1c73 41050000 		.4byte	.LASF88
 7712 1c77 01       		.byte	0x1
 7713 1c78 B812     		.2byte	0x12b8
 7714 1c7a 3B050000 		.4byte	0x53b
 7715 1c7e 38150000 		.4byte	.LLST130
 7716 1c82 1A       		.uleb128 0x1a
 7717 1c83 87020000 		.4byte	.LASF198
 7718 1c87 01       		.byte	0x1
 7719 1c88 B912     		.2byte	0x12b9
 7720 1c8a CA000000 		.4byte	0xca
 7721 1c8e 7A150000 		.4byte	.LLST131
 7722 1c92 28       		.uleb128 0x28
 7723 1c93 8B0A0000 		.4byte	.LASF132
 7724 1c97 01       		.byte	0x1
 7725 1c98 BA12     		.2byte	0x12ba
 7726 1c9a 40010000 		.4byte	0x140
 7727 1c9e 29       		.uleb128 0x29
 7728 1c9f F0030000 		.4byte	0x3f0
 7729 1ca3 02000000 		.4byte	.LBB57
 7730 1ca7 14000000 		.4byte	.LBE57-.LBB57
 7731 1cab 01       		.byte	0x1
 7732 1cac D212     		.2byte	0x12d2
 7733 1cae C71C0000 		.4byte	0x1cc7
 7734 1cb2 23       		.uleb128 0x23
 7735 1cb3 02000000 		.4byte	.LBB58
 7736 1cb7 14000000 		.4byte	.LBE58-.LBB58
 7737 1cbb 2A       		.uleb128 0x2a
 7738 1cbc 00040000 		.4byte	0x400
 7739 1cc0 2A       		.uleb128 0x2a
 7740 1cc1 0B040000 		.4byte	0x40b
 7741 1cc5 00       		.byte	0
 7742 1cc6 00       		.byte	0
 7743 1cc7 29       		.uleb128 0x29
 7744 1cc8 17040000 		.4byte	0x417
 7745 1ccc 8E000000 		.4byte	.LBB59
 7746 1cd0 0E000000 		.4byte	.LBE59-.LBB59
 7747 1cd4 01       		.byte	0x1
 7748 1cd5 0613     		.2byte	0x1306
 7749 1cd7 E51C0000 		.4byte	0x1ce5
 7750 1cdb 2C       		.uleb128 0x2c
 7751 1cdc 23040000 		.4byte	0x423
 7752 1ce0 8D150000 		.4byte	.LLST132
 7753 1ce4 00       		.byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 239


 7754 1ce5 22       		.uleb128 0x22
 7755 1ce6 40000000 		.4byte	.LVL382
 7756 1cea 8E1F0000 		.4byte	0x1f8e
 7757 1cee F91C0000 		.4byte	0x1cf9
 7758 1cf2 1E       		.uleb128 0x1e
 7759 1cf3 01       		.uleb128 0x1
 7760 1cf4 50       		.byte	0x50
 7761 1cf5 02       		.uleb128 0x2
 7762 1cf6 77       		.byte	0x77
 7763 1cf7 00       		.sleb128 0
 7764 1cf8 00       		.byte	0
 7765 1cf9 22       		.uleb128 0x22
 7766 1cfa 64000000 		.4byte	.LVL383
 7767 1cfe 771F0000 		.4byte	0x1f77
 7768 1d02 0D1D0000 		.4byte	0x1d0d
 7769 1d06 1E       		.uleb128 0x1e
 7770 1d07 01       		.uleb128 0x1
 7771 1d08 51       		.byte	0x51
 7772 1d09 02       		.uleb128 0x2
 7773 1d0a 77       		.byte	0x77
 7774 1d0b 00       		.sleb128 0
 7775 1d0c 00       		.byte	0
 7776 1d0d 1D       		.uleb128 0x1d
 7777 1d0e 70000000 		.4byte	.LVL387
 7778 1d12 771F0000 		.4byte	0x1f77
 7779 1d16 1E       		.uleb128 0x1e
 7780 1d17 01       		.uleb128 0x1
 7781 1d18 50       		.byte	0x50
 7782 1d19 05       		.uleb128 0x5
 7783 1d1a 03       		.byte	0x3
 7784 1d1b 14000000 		.4byte	.LANCHOR0+20
 7785 1d1f 1E       		.uleb128 0x1e
 7786 1d20 01       		.uleb128 0x1
 7787 1d21 51       		.byte	0x51
 7788 1d22 02       		.uleb128 0x2
 7789 1d23 74       		.byte	0x74
 7790 1d24 18       		.sleb128 24
 7791 1d25 00       		.byte	0
 7792 1d26 00       		.byte	0
 7793 1d27 25       		.uleb128 0x25
 7794 1d28 F9000000 		.4byte	.LASF202
 7795 1d2c 01       		.byte	0x1
 7796 1d2d 0F13     		.2byte	0x130f
 7797 1d2f 35010000 		.4byte	0x135
 7798 1d33 00000000 		.4byte	.LFB119
 7799 1d37 34000000 		.4byte	.LFE119-.LFB119
 7800 1d3b 01       		.uleb128 0x1
 7801 1d3c 9C       		.byte	0x9c
 7802 1d3d 841D0000 		.4byte	0x1d84
 7803 1d41 19       		.uleb128 0x19
 7804 1d42 D80A0000 		.4byte	.LASF91
 7805 1d46 01       		.byte	0x1
 7806 1d47 0F13     		.2byte	0x130f
 7807 1d49 39020000 		.4byte	0x239
 7808 1d4d A0150000 		.4byte	.LLST133
 7809 1d51 1A       		.uleb128 0x1a
 7810 1d52 41050000 		.4byte	.LASF88
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 240


 7811 1d56 01       		.byte	0x1
 7812 1d57 1113     		.2byte	0x1311
 7813 1d59 3B050000 		.4byte	0x53b
 7814 1d5d B3150000 		.4byte	.LLST134
 7815 1d61 1A       		.uleb128 0x1a
 7816 1d62 4F040000 		.4byte	.LASF87
 7817 1d66 01       		.byte	0x1
 7818 1d67 1213     		.2byte	0x1312
 7819 1d69 35010000 		.4byte	0x135
 7820 1d6d D1150000 		.4byte	.LLST135
 7821 1d71 1C       		.uleb128 0x1c
 7822 1d72 10000000 		.4byte	.LVL392
 7823 1d76 6C1F0000 		.4byte	0x1f6c
 7824 1d7a 1C       		.uleb128 0x1c
 7825 1d7b 2A000000 		.4byte	.LVL397
 7826 1d7f 831F0000 		.4byte	0x1f83
 7827 1d83 00       		.byte	0
 7828 1d84 11       		.uleb128 0x11
 7829 1d85 2E020000 		.4byte	0x22e
 7830 1d89 941D0000 		.4byte	0x1d94
 7831 1d8d 12       		.uleb128 0x12
 7832 1d8e A9000000 		.4byte	0xa9
 7833 1d92 04       		.byte	0x4
 7834 1d93 00       		.byte	0
 7835 1d94 20       		.uleb128 0x20
 7836 1d95 9C0C0000 		.4byte	.LASF203
 7837 1d99 01       		.byte	0x1
 7838 1d9a 5F01     		.2byte	0x15f
 7839 1d9c 841D0000 		.4byte	0x1d84
 7840 1da0 05       		.uleb128 0x5
 7841 1da1 03       		.byte	0x3
 7842 1da2 30000000 		.4byte	pxReadyTasksLists
 7843 1da6 20       		.uleb128 0x20
 7844 1da7 D80C0000 		.4byte	.LASF204
 7845 1dab 01       		.byte	0x1
 7846 1dac 6001     		.2byte	0x160
 7847 1dae 2E020000 		.4byte	0x22e
 7848 1db2 05       		.uleb128 0x5
 7849 1db3 03       		.byte	0x3
 7850 1db4 94000000 		.4byte	xDelayedTaskList1
 7851 1db8 20       		.uleb128 0x20
 7852 1db9 EA0C0000 		.4byte	.LASF205
 7853 1dbd 01       		.byte	0x1
 7854 1dbe 6101     		.2byte	0x161
 7855 1dc0 2E020000 		.4byte	0x22e
 7856 1dc4 05       		.uleb128 0x5
 7857 1dc5 03       		.byte	0x3
 7858 1dc6 A8000000 		.4byte	xDelayedTaskList2
 7859 1dca 20       		.uleb128 0x20
 7860 1dcb BD050000 		.4byte	.LASF206
 7861 1dcf 01       		.byte	0x1
 7862 1dd0 6201     		.2byte	0x162
 7863 1dd2 DC1D0000 		.4byte	0x1ddc
 7864 1dd6 05       		.uleb128 0x5
 7865 1dd7 03       		.byte	0x3
 7866 1dd8 28000000 		.4byte	pxDelayedTaskList
 7867 1ddc 08       		.uleb128 0x8
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 241


 7868 1ddd 3C0B0000 		.4byte	0xb3c
 7869 1de1 20       		.uleb128 0x20
 7870 1de2 95060000 		.4byte	.LASF207
 7871 1de6 01       		.byte	0x1
 7872 1de7 6301     		.2byte	0x163
 7873 1de9 DC1D0000 		.4byte	0x1ddc
 7874 1ded 05       		.uleb128 0x5
 7875 1dee 03       		.byte	0x3
 7876 1def D0000000 		.4byte	pxOverflowDelayedTaskList
 7877 1df3 20       		.uleb128 0x20
 7878 1df4 01070000 		.4byte	.LASF208
 7879 1df8 01       		.byte	0x1
 7880 1df9 6401     		.2byte	0x164
 7881 1dfb 2E020000 		.4byte	0x22e
 7882 1dff 05       		.uleb128 0x5
 7883 1e00 03       		.byte	0x3
 7884 1e01 14000000 		.4byte	xPendingReadyList
 7885 1e05 20       		.uleb128 0x20
 7886 1e06 5C020000 		.4byte	.LASF209
 7887 1e0a 01       		.byte	0x1
 7888 1e0b 6801     		.2byte	0x168
 7889 1e0d 2E020000 		.4byte	0x22e
 7890 1e11 05       		.uleb128 0x5
 7891 1e12 03       		.byte	0x3
 7892 1e13 BC000000 		.4byte	xTasksWaitingTermination
 7893 1e17 20       		.uleb128 0x20
 7894 1e18 E90B0000 		.4byte	.LASF210
 7895 1e1c 01       		.byte	0x1
 7896 1e1d 6901     		.2byte	0x169
 7897 1e1f 23020000 		.4byte	0x223
 7898 1e23 05       		.uleb128 0x5
 7899 1e24 03       		.byte	0x3
 7900 1e25 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 7901 1e29 20       		.uleb128 0x20
 7902 1e2a DB000000 		.4byte	.LASF211
 7903 1e2e 01       		.byte	0x1
 7904 1e2f 6F01     		.2byte	0x16f
 7905 1e31 2E020000 		.4byte	0x22e
 7906 1e35 05       		.uleb128 0x5
 7907 1e36 03       		.byte	0x3
 7908 1e37 00000000 		.4byte	xSuspendedTaskList
 7909 1e3b 20       		.uleb128 0x20
 7910 1e3c 70000000 		.4byte	.LASF212
 7911 1e40 01       		.byte	0x1
 7912 1e41 7401     		.2byte	0x174
 7913 1e43 23020000 		.4byte	0x223
 7914 1e47 05       		.uleb128 0x5
 7915 1e48 03       		.byte	0x3
 7916 1e49 D4000000 		.4byte	uxCurrentNumberOfTasks
 7917 1e4d 20       		.uleb128 0x20
 7918 1e4e 1F0D0000 		.4byte	.LASF213
 7919 1e52 01       		.byte	0x1
 7920 1e53 7501     		.2byte	0x175
 7921 1e55 5F1E0000 		.4byte	0x1e5f
 7922 1e59 05       		.uleb128 0x5
 7923 1e5a 03       		.byte	0x3
 7924 1e5b EC000000 		.4byte	xTickCount
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 242


 7925 1e5f 08       		.uleb128 0x8
 7926 1e60 4B010000 		.4byte	0x14b
 7927 1e64 20       		.uleb128 0x20
 7928 1e65 BA070000 		.4byte	.LASF214
 7929 1e69 01       		.byte	0x1
 7930 1e6a 7601     		.2byte	0x176
 7931 1e6c 23020000 		.4byte	0x223
 7932 1e70 05       		.uleb128 0x5
 7933 1e71 03       		.byte	0x3
 7934 1e72 E4000000 		.4byte	uxTopReadyPriority
 7935 1e76 20       		.uleb128 0x20
 7936 1e77 3E090000 		.4byte	.LASF215
 7937 1e7b 01       		.byte	0x1
 7938 1e7c 7701     		.2byte	0x177
 7939 1e7e 881E0000 		.4byte	0x1e88
 7940 1e82 05       		.uleb128 0x5
 7941 1e83 03       		.byte	0x3
 7942 1e84 DC000000 		.4byte	xSchedulerRunning
 7943 1e88 08       		.uleb128 0x8
 7944 1e89 35010000 		.4byte	0x135
 7945 1e8d 20       		.uleb128 0x20
 7946 1e8e 480F0000 		.4byte	.LASF216
 7947 1e92 01       		.byte	0x1
 7948 1e93 7801     		.2byte	0x178
 7949 1e95 23020000 		.4byte	0x223
 7950 1e99 05       		.uleb128 0x5
 7951 1e9a 03       		.byte	0x3
 7952 1e9b FC000000 		.4byte	uxPendedTicks
 7953 1e9f 20       		.uleb128 0x20
 7954 1ea0 A9000000 		.4byte	.LASF217
 7955 1ea4 01       		.byte	0x1
 7956 1ea5 7901     		.2byte	0x179
 7957 1ea7 881E0000 		.4byte	0x1e88
 7958 1eab 05       		.uleb128 0x5
 7959 1eac 03       		.byte	0x3
 7960 1ead 00010000 		.4byte	xYieldPending
 7961 1eb1 20       		.uleb128 0x20
 7962 1eb2 FC0C0000 		.4byte	.LASF218
 7963 1eb6 01       		.byte	0x1
 7964 1eb7 7A01     		.2byte	0x17a
 7965 1eb9 881E0000 		.4byte	0x1e88
 7966 1ebd 05       		.uleb128 0x5
 7967 1ebe 03       		.byte	0x3
 7968 1ebf F8000000 		.4byte	xNumOfOverflows
 7969 1ec3 20       		.uleb128 0x20
 7970 1ec4 580C0000 		.4byte	.LASF219
 7971 1ec8 01       		.byte	0x1
 7972 1ec9 7B01     		.2byte	0x17b
 7973 1ecb 40010000 		.4byte	0x140
 7974 1ecf 05       		.uleb128 0x5
 7975 1ed0 03       		.byte	0x3
 7976 1ed1 E0000000 		.4byte	uxTaskNumber
 7977 1ed5 20       		.uleb128 0x20
 7978 1ed6 DA010000 		.4byte	.LASF220
 7979 1eda 01       		.byte	0x1
 7980 1edb 7C01     		.2byte	0x17c
 7981 1edd 5F1E0000 		.4byte	0x1e5f
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 243


 7982 1ee1 05       		.uleb128 0x5
 7983 1ee2 03       		.byte	0x3
 7984 1ee3 2C000000 		.4byte	xNextTaskUnblockTime
 7985 1ee7 20       		.uleb128 0x20
 7986 1ee8 810C0000 		.4byte	.LASF221
 7987 1eec 01       		.byte	0x1
 7988 1eed 7D01     		.2byte	0x17d
 7989 1eef 39020000 		.4byte	0x239
 7990 1ef3 05       		.uleb128 0x5
 7991 1ef4 03       		.byte	0x3
 7992 1ef5 F4000000 		.4byte	xIdleTaskHandle
 7993 1ef9 20       		.uleb128 0x20
 7994 1efa 1A040000 		.4byte	.LASF222
 7995 1efe 01       		.byte	0x1
 7996 1eff 8701     		.2byte	0x187
 7997 1f01 23020000 		.4byte	0x223
 7998 1f05 05       		.uleb128 0x5
 7999 1f06 03       		.byte	0x3
 8000 1f07 F0000000 		.4byte	uxSchedulerSuspended
 8001 1f0b 33       		.uleb128 0x33
 8002 1f0c 54010000 		.4byte	.LASF223
 8003 1f10 09       		.byte	0x9
 8004 1f11 1207     		.2byte	0x712
 8005 1f13 171F0000 		.4byte	0x1f17
 8006 1f17 08       		.uleb128 0x8
 8007 1f18 E0000000 		.4byte	0xe0
 8008 1f1c 34       		.uleb128 0x34
 8009 1f1d 90050000 		.4byte	.LASF224
 8010 1f21 01       		.byte	0x1
 8011 1f22 5C01     		.2byte	0x15c
 8012 1f24 2E1F0000 		.4byte	0x1f2e
 8013 1f28 05       		.uleb128 0x5
 8014 1f29 03       		.byte	0x3
 8015 1f2a 00000000 		.4byte	pxCurrentTCB
 8016 1f2e 08       		.uleb128 0x8
 8017 1f2f 3B050000 		.4byte	0x53b
 8018 1f33 35       		.uleb128 0x35
 8019 1f34 810A0000 		.4byte	.LASF225
 8020 1f38 810A0000 		.4byte	.LASF225
 8021 1f3c 0A       		.byte	0xa
 8022 1f3d 83       		.byte	0x83
 8023 1f3e 35       		.uleb128 0x35
 8024 1f3f 5A0D0000 		.4byte	.LASF226
 8025 1f43 5A0D0000 		.4byte	.LASF226
 8026 1f47 0B       		.byte	0xb
 8027 1f48 19       		.byte	0x19
 8028 1f49 36       		.uleb128 0x36
 8029 1f4a 6D060000 		.4byte	.LASF227
 8030 1f4e 6D060000 		.4byte	.LASF227
 8031 1f52 07       		.byte	0x7
 8032 1f53 6401     		.2byte	0x164
 8033 1f55 35       		.uleb128 0x35
 8034 1f56 870D0000 		.4byte	.LASF228
 8035 1f5a 870D0000 		.4byte	.LASF228
 8036 1f5e 0A       		.byte	0xa
 8037 1f5f 67       		.byte	0x67
 8038 1f60 36       		.uleb128 0x36
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 244


 8039 1f61 230E0000 		.4byte	.LASF229
 8040 1f65 230E0000 		.4byte	.LASF229
 8041 1f69 07       		.byte	0x7
 8042 1f6a 5901     		.2byte	0x159
 8043 1f6c 35       		.uleb128 0x35
 8044 1f6d C50C0000 		.4byte	.LASF230
 8045 1f71 C50C0000 		.4byte	.LASF230
 8046 1f75 02       		.byte	0x2
 8047 1f76 6C       		.byte	0x6c
 8048 1f77 36       		.uleb128 0x36
 8049 1f78 24030000 		.4byte	.LASF231
 8050 1f7c 24030000 		.4byte	.LASF231
 8051 1f80 07       		.byte	0x7
 8052 1f81 8601     		.2byte	0x186
 8053 1f83 35       		.uleb128 0x35
 8054 1f84 560B0000 		.4byte	.LASF232
 8055 1f88 560B0000 		.4byte	.LASF232
 8056 1f8c 02       		.byte	0x2
 8057 1f8d 6D       		.byte	0x6d
 8058 1f8e 36       		.uleb128 0x36
 8059 1f8f 3B0C0000 		.4byte	.LASF233
 8060 1f93 3B0C0000 		.4byte	.LASF233
 8061 1f97 07       		.byte	0x7
 8062 1f98 9501     		.2byte	0x195
 8063 1f9a 36       		.uleb128 0x36
 8064 1f9b EB0A0000 		.4byte	.LASF234
 8065 1f9f EB0A0000 		.4byte	.LASF234
 8066 1fa3 07       		.byte	0x7
 8067 1fa4 7101     		.2byte	0x171
 8068 1fa6 35       		.uleb128 0x35
 8069 1fa7 D1030000 		.4byte	.LASF235
 8070 1fab D1030000 		.4byte	.LASF235
 8071 1faf 0A       		.byte	0xa
 8072 1fb0 82       		.byte	0x82
 8073 1fb1 35       		.uleb128 0x35
 8074 1fb2 53070000 		.4byte	.LASF236
 8075 1fb6 53070000 		.4byte	.LASF236
 8076 1fba 0A       		.byte	0xa
 8077 1fbb 8C       		.byte	0x8c
 8078 1fbc 35       		.uleb128 0x35
 8079 1fbd A8070000 		.4byte	.LASF237
 8080 1fc1 A8070000 		.4byte	.LASF237
 8081 1fc5 0A       		.byte	0xa
 8082 1fc6 93       		.byte	0x93
 8083 1fc7 00       		.byte	0
 8084              		.section	.debug_abbrev,"",%progbits
 8085              	.Ldebug_abbrev0:
 8086 0000 01       		.uleb128 0x1
 8087 0001 11       		.uleb128 0x11
 8088 0002 01       		.byte	0x1
 8089 0003 25       		.uleb128 0x25
 8090 0004 0E       		.uleb128 0xe
 8091 0005 13       		.uleb128 0x13
 8092 0006 0B       		.uleb128 0xb
 8093 0007 03       		.uleb128 0x3
 8094 0008 0E       		.uleb128 0xe
 8095 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 245


 8096 000a 0E       		.uleb128 0xe
 8097 000b 55       		.uleb128 0x55
 8098 000c 17       		.uleb128 0x17
 8099 000d 11       		.uleb128 0x11
 8100 000e 01       		.uleb128 0x1
 8101 000f 10       		.uleb128 0x10
 8102 0010 17       		.uleb128 0x17
 8103 0011 00       		.byte	0
 8104 0012 00       		.byte	0
 8105 0013 02       		.uleb128 0x2
 8106 0014 16       		.uleb128 0x16
 8107 0015 00       		.byte	0
 8108 0016 03       		.uleb128 0x3
 8109 0017 0E       		.uleb128 0xe
 8110 0018 3A       		.uleb128 0x3a
 8111 0019 0B       		.uleb128 0xb
 8112 001a 3B       		.uleb128 0x3b
 8113 001b 0B       		.uleb128 0xb
 8114 001c 49       		.uleb128 0x49
 8115 001d 13       		.uleb128 0x13
 8116 001e 00       		.byte	0
 8117 001f 00       		.byte	0
 8118 0020 03       		.uleb128 0x3
 8119 0021 24       		.uleb128 0x24
 8120 0022 00       		.byte	0
 8121 0023 0B       		.uleb128 0xb
 8122 0024 0B       		.uleb128 0xb
 8123 0025 3E       		.uleb128 0x3e
 8124 0026 0B       		.uleb128 0xb
 8125 0027 03       		.uleb128 0x3
 8126 0028 0E       		.uleb128 0xe
 8127 0029 00       		.byte	0
 8128 002a 00       		.byte	0
 8129 002b 04       		.uleb128 0x4
 8130 002c 24       		.uleb128 0x24
 8131 002d 00       		.byte	0
 8132 002e 0B       		.uleb128 0xb
 8133 002f 0B       		.uleb128 0xb
 8134 0030 3E       		.uleb128 0x3e
 8135 0031 0B       		.uleb128 0xb
 8136 0032 03       		.uleb128 0x3
 8137 0033 08       		.uleb128 0x8
 8138 0034 00       		.byte	0
 8139 0035 00       		.byte	0
 8140 0036 05       		.uleb128 0x5
 8141 0037 0F       		.uleb128 0xf
 8142 0038 00       		.byte	0
 8143 0039 0B       		.uleb128 0xb
 8144 003a 0B       		.uleb128 0xb
 8145 003b 00       		.byte	0
 8146 003c 00       		.byte	0
 8147 003d 06       		.uleb128 0x6
 8148 003e 0F       		.uleb128 0xf
 8149 003f 00       		.byte	0
 8150 0040 0B       		.uleb128 0xb
 8151 0041 0B       		.uleb128 0xb
 8152 0042 49       		.uleb128 0x49
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 246


 8153 0043 13       		.uleb128 0x13
 8154 0044 00       		.byte	0
 8155 0045 00       		.byte	0
 8156 0046 07       		.uleb128 0x7
 8157 0047 26       		.uleb128 0x26
 8158 0048 00       		.byte	0
 8159 0049 49       		.uleb128 0x49
 8160 004a 13       		.uleb128 0x13
 8161 004b 00       		.byte	0
 8162 004c 00       		.byte	0
 8163 004d 08       		.uleb128 0x8
 8164 004e 35       		.uleb128 0x35
 8165 004f 00       		.byte	0
 8166 0050 49       		.uleb128 0x49
 8167 0051 13       		.uleb128 0x13
 8168 0052 00       		.byte	0
 8169 0053 00       		.byte	0
 8170 0054 09       		.uleb128 0x9
 8171 0055 15       		.uleb128 0x15
 8172 0056 01       		.byte	0x1
 8173 0057 27       		.uleb128 0x27
 8174 0058 19       		.uleb128 0x19
 8175 0059 01       		.uleb128 0x1
 8176 005a 13       		.uleb128 0x13
 8177 005b 00       		.byte	0
 8178 005c 00       		.byte	0
 8179 005d 0A       		.uleb128 0xa
 8180 005e 05       		.uleb128 0x5
 8181 005f 00       		.byte	0
 8182 0060 49       		.uleb128 0x49
 8183 0061 13       		.uleb128 0x13
 8184 0062 00       		.byte	0
 8185 0063 00       		.byte	0
 8186 0064 0B       		.uleb128 0xb
 8187 0065 13       		.uleb128 0x13
 8188 0066 01       		.byte	0x1
 8189 0067 03       		.uleb128 0x3
 8190 0068 0E       		.uleb128 0xe
 8191 0069 0B       		.uleb128 0xb
 8192 006a 0B       		.uleb128 0xb
 8193 006b 3A       		.uleb128 0x3a
 8194 006c 0B       		.uleb128 0xb
 8195 006d 3B       		.uleb128 0x3b
 8196 006e 0B       		.uleb128 0xb
 8197 006f 01       		.uleb128 0x1
 8198 0070 13       		.uleb128 0x13
 8199 0071 00       		.byte	0
 8200 0072 00       		.byte	0
 8201 0073 0C       		.uleb128 0xc
 8202 0074 0D       		.uleb128 0xd
 8203 0075 00       		.byte	0
 8204 0076 03       		.uleb128 0x3
 8205 0077 0E       		.uleb128 0xe
 8206 0078 3A       		.uleb128 0x3a
 8207 0079 0B       		.uleb128 0xb
 8208 007a 3B       		.uleb128 0x3b
 8209 007b 0B       		.uleb128 0xb
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 247


 8210 007c 49       		.uleb128 0x49
 8211 007d 13       		.uleb128 0x13
 8212 007e 38       		.uleb128 0x38
 8213 007f 0B       		.uleb128 0xb
 8214 0080 00       		.byte	0
 8215 0081 00       		.byte	0
 8216 0082 0D       		.uleb128 0xd
 8217 0083 04       		.uleb128 0x4
 8218 0084 01       		.byte	0x1
 8219 0085 0B       		.uleb128 0xb
 8220 0086 0B       		.uleb128 0xb
 8221 0087 49       		.uleb128 0x49
 8222 0088 13       		.uleb128 0x13
 8223 0089 3A       		.uleb128 0x3a
 8224 008a 0B       		.uleb128 0xb
 8225 008b 3B       		.uleb128 0x3b
 8226 008c 0B       		.uleb128 0xb
 8227 008d 01       		.uleb128 0x1
 8228 008e 13       		.uleb128 0x13
 8229 008f 00       		.byte	0
 8230 0090 00       		.byte	0
 8231 0091 0E       		.uleb128 0xe
 8232 0092 28       		.uleb128 0x28
 8233 0093 00       		.byte	0
 8234 0094 03       		.uleb128 0x3
 8235 0095 0E       		.uleb128 0xe
 8236 0096 1C       		.uleb128 0x1c
 8237 0097 0B       		.uleb128 0xb
 8238 0098 00       		.byte	0
 8239 0099 00       		.byte	0
 8240 009a 0F       		.uleb128 0xf
 8241 009b 13       		.uleb128 0x13
 8242 009c 01       		.byte	0x1
 8243 009d 03       		.uleb128 0x3
 8244 009e 0E       		.uleb128 0xe
 8245 009f 0B       		.uleb128 0xb
 8246 00a0 0B       		.uleb128 0xb
 8247 00a1 3A       		.uleb128 0x3a
 8248 00a2 0B       		.uleb128 0xb
 8249 00a3 3B       		.uleb128 0x3b
 8250 00a4 05       		.uleb128 0x5
 8251 00a5 01       		.uleb128 0x1
 8252 00a6 13       		.uleb128 0x13
 8253 00a7 00       		.byte	0
 8254 00a8 00       		.byte	0
 8255 00a9 10       		.uleb128 0x10
 8256 00aa 0D       		.uleb128 0xd
 8257 00ab 00       		.byte	0
 8258 00ac 03       		.uleb128 0x3
 8259 00ad 0E       		.uleb128 0xe
 8260 00ae 3A       		.uleb128 0x3a
 8261 00af 0B       		.uleb128 0xb
 8262 00b0 3B       		.uleb128 0x3b
 8263 00b1 05       		.uleb128 0x5
 8264 00b2 49       		.uleb128 0x49
 8265 00b3 13       		.uleb128 0x13
 8266 00b4 38       		.uleb128 0x38
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 248


 8267 00b5 0B       		.uleb128 0xb
 8268 00b6 00       		.byte	0
 8269 00b7 00       		.byte	0
 8270 00b8 11       		.uleb128 0x11
 8271 00b9 01       		.uleb128 0x1
 8272 00ba 01       		.byte	0x1
 8273 00bb 49       		.uleb128 0x49
 8274 00bc 13       		.uleb128 0x13
 8275 00bd 01       		.uleb128 0x1
 8276 00be 13       		.uleb128 0x13
 8277 00bf 00       		.byte	0
 8278 00c0 00       		.byte	0
 8279 00c1 12       		.uleb128 0x12
 8280 00c2 21       		.uleb128 0x21
 8281 00c3 00       		.byte	0
 8282 00c4 49       		.uleb128 0x49
 8283 00c5 13       		.uleb128 0x13
 8284 00c6 2F       		.uleb128 0x2f
 8285 00c7 0B       		.uleb128 0xb
 8286 00c8 00       		.byte	0
 8287 00c9 00       		.byte	0
 8288 00ca 13       		.uleb128 0x13
 8289 00cb 16       		.uleb128 0x16
 8290 00cc 00       		.byte	0
 8291 00cd 03       		.uleb128 0x3
 8292 00ce 0E       		.uleb128 0xe
 8293 00cf 3A       		.uleb128 0x3a
 8294 00d0 0B       		.uleb128 0xb
 8295 00d1 3B       		.uleb128 0x3b
 8296 00d2 05       		.uleb128 0x5
 8297 00d3 49       		.uleb128 0x49
 8298 00d4 13       		.uleb128 0x13
 8299 00d5 00       		.byte	0
 8300 00d6 00       		.byte	0
 8301 00d7 14       		.uleb128 0x14
 8302 00d8 2E       		.uleb128 0x2e
 8303 00d9 01       		.byte	0x1
 8304 00da 03       		.uleb128 0x3
 8305 00db 0E       		.uleb128 0xe
 8306 00dc 3A       		.uleb128 0x3a
 8307 00dd 0B       		.uleb128 0xb
 8308 00de 3B       		.uleb128 0x3b
 8309 00df 0B       		.uleb128 0xb
 8310 00e0 27       		.uleb128 0x27
 8311 00e1 19       		.uleb128 0x19
 8312 00e2 49       		.uleb128 0x49
 8313 00e3 13       		.uleb128 0x13
 8314 00e4 20       		.uleb128 0x20
 8315 00e5 0B       		.uleb128 0xb
 8316 00e6 01       		.uleb128 0x1
 8317 00e7 13       		.uleb128 0x13
 8318 00e8 00       		.byte	0
 8319 00e9 00       		.byte	0
 8320 00ea 15       		.uleb128 0x15
 8321 00eb 34       		.uleb128 0x34
 8322 00ec 00       		.byte	0
 8323 00ed 03       		.uleb128 0x3
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 249


 8324 00ee 0E       		.uleb128 0xe
 8325 00ef 3A       		.uleb128 0x3a
 8326 00f0 0B       		.uleb128 0xb
 8327 00f1 3B       		.uleb128 0x3b
 8328 00f2 0B       		.uleb128 0xb
 8329 00f3 49       		.uleb128 0x49
 8330 00f4 13       		.uleb128 0x13
 8331 00f5 00       		.byte	0
 8332 00f6 00       		.byte	0
 8333 00f7 16       		.uleb128 0x16
 8334 00f8 2E       		.uleb128 0x2e
 8335 00f9 01       		.byte	0x1
 8336 00fa 03       		.uleb128 0x3
 8337 00fb 0E       		.uleb128 0xe
 8338 00fc 3A       		.uleb128 0x3a
 8339 00fd 0B       		.uleb128 0xb
 8340 00fe 3B       		.uleb128 0x3b
 8341 00ff 0B       		.uleb128 0xb
 8342 0100 27       		.uleb128 0x27
 8343 0101 19       		.uleb128 0x19
 8344 0102 20       		.uleb128 0x20
 8345 0103 0B       		.uleb128 0xb
 8346 0104 01       		.uleb128 0x1
 8347 0105 13       		.uleb128 0x13
 8348 0106 00       		.byte	0
 8349 0107 00       		.byte	0
 8350 0108 17       		.uleb128 0x17
 8351 0109 05       		.uleb128 0x5
 8352 010a 00       		.byte	0
 8353 010b 03       		.uleb128 0x3
 8354 010c 0E       		.uleb128 0xe
 8355 010d 3A       		.uleb128 0x3a
 8356 010e 0B       		.uleb128 0xb
 8357 010f 3B       		.uleb128 0x3b
 8358 0110 0B       		.uleb128 0xb
 8359 0111 49       		.uleb128 0x49
 8360 0112 13       		.uleb128 0x13
 8361 0113 00       		.byte	0
 8362 0114 00       		.byte	0
 8363 0115 18       		.uleb128 0x18
 8364 0116 2E       		.uleb128 0x2e
 8365 0117 01       		.byte	0x1
 8366 0118 03       		.uleb128 0x3
 8367 0119 0E       		.uleb128 0xe
 8368 011a 3A       		.uleb128 0x3a
 8369 011b 0B       		.uleb128 0xb
 8370 011c 3B       		.uleb128 0x3b
 8371 011d 05       		.uleb128 0x5
 8372 011e 27       		.uleb128 0x27
 8373 011f 19       		.uleb128 0x19
 8374 0120 49       		.uleb128 0x49
 8375 0121 13       		.uleb128 0x13
 8376 0122 11       		.uleb128 0x11
 8377 0123 01       		.uleb128 0x1
 8378 0124 12       		.uleb128 0x12
 8379 0125 06       		.uleb128 0x6
 8380 0126 40       		.uleb128 0x40
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 250


 8381 0127 18       		.uleb128 0x18
 8382 0128 9742     		.uleb128 0x2117
 8383 012a 19       		.uleb128 0x19
 8384 012b 01       		.uleb128 0x1
 8385 012c 13       		.uleb128 0x13
 8386 012d 00       		.byte	0
 8387 012e 00       		.byte	0
 8388 012f 19       		.uleb128 0x19
 8389 0130 05       		.uleb128 0x5
 8390 0131 00       		.byte	0
 8391 0132 03       		.uleb128 0x3
 8392 0133 0E       		.uleb128 0xe
 8393 0134 3A       		.uleb128 0x3a
 8394 0135 0B       		.uleb128 0xb
 8395 0136 3B       		.uleb128 0x3b
 8396 0137 05       		.uleb128 0x5
 8397 0138 49       		.uleb128 0x49
 8398 0139 13       		.uleb128 0x13
 8399 013a 02       		.uleb128 0x2
 8400 013b 17       		.uleb128 0x17
 8401 013c 00       		.byte	0
 8402 013d 00       		.byte	0
 8403 013e 1A       		.uleb128 0x1a
 8404 013f 34       		.uleb128 0x34
 8405 0140 00       		.byte	0
 8406 0141 03       		.uleb128 0x3
 8407 0142 0E       		.uleb128 0xe
 8408 0143 3A       		.uleb128 0x3a
 8409 0144 0B       		.uleb128 0xb
 8410 0145 3B       		.uleb128 0x3b
 8411 0146 05       		.uleb128 0x5
 8412 0147 49       		.uleb128 0x49
 8413 0148 13       		.uleb128 0x13
 8414 0149 02       		.uleb128 0x2
 8415 014a 17       		.uleb128 0x17
 8416 014b 00       		.byte	0
 8417 014c 00       		.byte	0
 8418 014d 1B       		.uleb128 0x1b
 8419 014e 2E       		.uleb128 0x2e
 8420 014f 01       		.byte	0x1
 8421 0150 03       		.uleb128 0x3
 8422 0151 0E       		.uleb128 0xe
 8423 0152 3A       		.uleb128 0x3a
 8424 0153 0B       		.uleb128 0xb
 8425 0154 3B       		.uleb128 0x3b
 8426 0155 05       		.uleb128 0x5
 8427 0156 27       		.uleb128 0x27
 8428 0157 19       		.uleb128 0x19
 8429 0158 11       		.uleb128 0x11
 8430 0159 01       		.uleb128 0x1
 8431 015a 12       		.uleb128 0x12
 8432 015b 06       		.uleb128 0x6
 8433 015c 40       		.uleb128 0x40
 8434 015d 18       		.uleb128 0x18
 8435 015e 9742     		.uleb128 0x2117
 8436 0160 19       		.uleb128 0x19
 8437 0161 01       		.uleb128 0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 251


 8438 0162 13       		.uleb128 0x13
 8439 0163 00       		.byte	0
 8440 0164 00       		.byte	0
 8441 0165 1C       		.uleb128 0x1c
 8442 0166 898201   		.uleb128 0x4109
 8443 0169 00       		.byte	0
 8444 016a 11       		.uleb128 0x11
 8445 016b 01       		.uleb128 0x1
 8446 016c 31       		.uleb128 0x31
 8447 016d 13       		.uleb128 0x13
 8448 016e 00       		.byte	0
 8449 016f 00       		.byte	0
 8450 0170 1D       		.uleb128 0x1d
 8451 0171 898201   		.uleb128 0x4109
 8452 0174 01       		.byte	0x1
 8453 0175 11       		.uleb128 0x11
 8454 0176 01       		.uleb128 0x1
 8455 0177 31       		.uleb128 0x31
 8456 0178 13       		.uleb128 0x13
 8457 0179 00       		.byte	0
 8458 017a 00       		.byte	0
 8459 017b 1E       		.uleb128 0x1e
 8460 017c 8A8201   		.uleb128 0x410a
 8461 017f 00       		.byte	0
 8462 0180 02       		.uleb128 0x2
 8463 0181 18       		.uleb128 0x18
 8464 0182 9142     		.uleb128 0x2111
 8465 0184 18       		.uleb128 0x18
 8466 0185 00       		.byte	0
 8467 0186 00       		.byte	0
 8468 0187 1F       		.uleb128 0x1f
 8469 0188 05       		.uleb128 0x5
 8470 0189 00       		.byte	0
 8471 018a 03       		.uleb128 0x3
 8472 018b 0E       		.uleb128 0xe
 8473 018c 3A       		.uleb128 0x3a
 8474 018d 0B       		.uleb128 0xb
 8475 018e 3B       		.uleb128 0x3b
 8476 018f 05       		.uleb128 0x5
 8477 0190 49       		.uleb128 0x49
 8478 0191 13       		.uleb128 0x13
 8479 0192 02       		.uleb128 0x2
 8480 0193 18       		.uleb128 0x18
 8481 0194 00       		.byte	0
 8482 0195 00       		.byte	0
 8483 0196 20       		.uleb128 0x20
 8484 0197 34       		.uleb128 0x34
 8485 0198 00       		.byte	0
 8486 0199 03       		.uleb128 0x3
 8487 019a 0E       		.uleb128 0xe
 8488 019b 3A       		.uleb128 0x3a
 8489 019c 0B       		.uleb128 0xb
 8490 019d 3B       		.uleb128 0x3b
 8491 019e 05       		.uleb128 0x5
 8492 019f 49       		.uleb128 0x49
 8493 01a0 13       		.uleb128 0x13
 8494 01a1 02       		.uleb128 0x2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 252


 8495 01a2 18       		.uleb128 0x18
 8496 01a3 00       		.byte	0
 8497 01a4 00       		.byte	0
 8498 01a5 21       		.uleb128 0x21
 8499 01a6 34       		.uleb128 0x34
 8500 01a7 00       		.byte	0
 8501 01a8 03       		.uleb128 0x3
 8502 01a9 08       		.uleb128 0x8
 8503 01aa 3A       		.uleb128 0x3a
 8504 01ab 0B       		.uleb128 0xb
 8505 01ac 3B       		.uleb128 0x3b
 8506 01ad 05       		.uleb128 0x5
 8507 01ae 49       		.uleb128 0x49
 8508 01af 13       		.uleb128 0x13
 8509 01b0 02       		.uleb128 0x2
 8510 01b1 17       		.uleb128 0x17
 8511 01b2 00       		.byte	0
 8512 01b3 00       		.byte	0
 8513 01b4 22       		.uleb128 0x22
 8514 01b5 898201   		.uleb128 0x4109
 8515 01b8 01       		.byte	0x1
 8516 01b9 11       		.uleb128 0x11
 8517 01ba 01       		.uleb128 0x1
 8518 01bb 31       		.uleb128 0x31
 8519 01bc 13       		.uleb128 0x13
 8520 01bd 01       		.uleb128 0x1
 8521 01be 13       		.uleb128 0x13
 8522 01bf 00       		.byte	0
 8523 01c0 00       		.byte	0
 8524 01c1 23       		.uleb128 0x23
 8525 01c2 0B       		.uleb128 0xb
 8526 01c3 01       		.byte	0x1
 8527 01c4 11       		.uleb128 0x11
 8528 01c5 01       		.uleb128 0x1
 8529 01c6 12       		.uleb128 0x12
 8530 01c7 06       		.uleb128 0x6
 8531 01c8 00       		.byte	0
 8532 01c9 00       		.byte	0
 8533 01ca 24       		.uleb128 0x24
 8534 01cb 2E       		.uleb128 0x2e
 8535 01cc 01       		.byte	0x1
 8536 01cd 03       		.uleb128 0x3
 8537 01ce 0E       		.uleb128 0xe
 8538 01cf 3A       		.uleb128 0x3a
 8539 01d0 0B       		.uleb128 0xb
 8540 01d1 3B       		.uleb128 0x3b
 8541 01d2 05       		.uleb128 0x5
 8542 01d3 27       		.uleb128 0x27
 8543 01d4 19       		.uleb128 0x19
 8544 01d5 8701     		.uleb128 0x87
 8545 01d7 19       		.uleb128 0x19
 8546 01d8 11       		.uleb128 0x11
 8547 01d9 01       		.uleb128 0x1
 8548 01da 12       		.uleb128 0x12
 8549 01db 06       		.uleb128 0x6
 8550 01dc 40       		.uleb128 0x40
 8551 01dd 18       		.uleb128 0x18
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 253


 8552 01de 9742     		.uleb128 0x2117
 8553 01e0 19       		.uleb128 0x19
 8554 01e1 01       		.uleb128 0x1
 8555 01e2 13       		.uleb128 0x13
 8556 01e3 00       		.byte	0
 8557 01e4 00       		.byte	0
 8558 01e5 25       		.uleb128 0x25
 8559 01e6 2E       		.uleb128 0x2e
 8560 01e7 01       		.byte	0x1
 8561 01e8 3F       		.uleb128 0x3f
 8562 01e9 19       		.uleb128 0x19
 8563 01ea 03       		.uleb128 0x3
 8564 01eb 0E       		.uleb128 0xe
 8565 01ec 3A       		.uleb128 0x3a
 8566 01ed 0B       		.uleb128 0xb
 8567 01ee 3B       		.uleb128 0x3b
 8568 01ef 05       		.uleb128 0x5
 8569 01f0 27       		.uleb128 0x27
 8570 01f1 19       		.uleb128 0x19
 8571 01f2 49       		.uleb128 0x49
 8572 01f3 13       		.uleb128 0x13
 8573 01f4 11       		.uleb128 0x11
 8574 01f5 01       		.uleb128 0x1
 8575 01f6 12       		.uleb128 0x12
 8576 01f7 06       		.uleb128 0x6
 8577 01f8 40       		.uleb128 0x40
 8578 01f9 18       		.uleb128 0x18
 8579 01fa 9742     		.uleb128 0x2117
 8580 01fc 19       		.uleb128 0x19
 8581 01fd 01       		.uleb128 0x1
 8582 01fe 13       		.uleb128 0x13
 8583 01ff 00       		.byte	0
 8584 0200 00       		.byte	0
 8585 0201 26       		.uleb128 0x26
 8586 0202 0B       		.uleb128 0xb
 8587 0203 01       		.byte	0x1
 8588 0204 11       		.uleb128 0x11
 8589 0205 01       		.uleb128 0x1
 8590 0206 12       		.uleb128 0x12
 8591 0207 06       		.uleb128 0x6
 8592 0208 01       		.uleb128 0x1
 8593 0209 13       		.uleb128 0x13
 8594 020a 00       		.byte	0
 8595 020b 00       		.byte	0
 8596 020c 27       		.uleb128 0x27
 8597 020d 2E       		.uleb128 0x2e
 8598 020e 01       		.byte	0x1
 8599 020f 3F       		.uleb128 0x3f
 8600 0210 19       		.uleb128 0x19
 8601 0211 03       		.uleb128 0x3
 8602 0212 0E       		.uleb128 0xe
 8603 0213 3A       		.uleb128 0x3a
 8604 0214 0B       		.uleb128 0xb
 8605 0215 3B       		.uleb128 0x3b
 8606 0216 05       		.uleb128 0x5
 8607 0217 27       		.uleb128 0x27
 8608 0218 19       		.uleb128 0x19
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 254


 8609 0219 11       		.uleb128 0x11
 8610 021a 01       		.uleb128 0x1
 8611 021b 12       		.uleb128 0x12
 8612 021c 06       		.uleb128 0x6
 8613 021d 40       		.uleb128 0x40
 8614 021e 18       		.uleb128 0x18
 8615 021f 9742     		.uleb128 0x2117
 8616 0221 19       		.uleb128 0x19
 8617 0222 01       		.uleb128 0x1
 8618 0223 13       		.uleb128 0x13
 8619 0224 00       		.byte	0
 8620 0225 00       		.byte	0
 8621 0226 28       		.uleb128 0x28
 8622 0227 34       		.uleb128 0x34
 8623 0228 00       		.byte	0
 8624 0229 03       		.uleb128 0x3
 8625 022a 0E       		.uleb128 0xe
 8626 022b 3A       		.uleb128 0x3a
 8627 022c 0B       		.uleb128 0xb
 8628 022d 3B       		.uleb128 0x3b
 8629 022e 05       		.uleb128 0x5
 8630 022f 49       		.uleb128 0x49
 8631 0230 13       		.uleb128 0x13
 8632 0231 00       		.byte	0
 8633 0232 00       		.byte	0
 8634 0233 29       		.uleb128 0x29
 8635 0234 1D       		.uleb128 0x1d
 8636 0235 01       		.byte	0x1
 8637 0236 31       		.uleb128 0x31
 8638 0237 13       		.uleb128 0x13
 8639 0238 11       		.uleb128 0x11
 8640 0239 01       		.uleb128 0x1
 8641 023a 12       		.uleb128 0x12
 8642 023b 06       		.uleb128 0x6
 8643 023c 58       		.uleb128 0x58
 8644 023d 0B       		.uleb128 0xb
 8645 023e 59       		.uleb128 0x59
 8646 023f 05       		.uleb128 0x5
 8647 0240 01       		.uleb128 0x1
 8648 0241 13       		.uleb128 0x13
 8649 0242 00       		.byte	0
 8650 0243 00       		.byte	0
 8651 0244 2A       		.uleb128 0x2a
 8652 0245 34       		.uleb128 0x34
 8653 0246 00       		.byte	0
 8654 0247 31       		.uleb128 0x31
 8655 0248 13       		.uleb128 0x13
 8656 0249 00       		.byte	0
 8657 024a 00       		.byte	0
 8658 024b 2B       		.uleb128 0x2b
 8659 024c 1D       		.uleb128 0x1d
 8660 024d 01       		.byte	0x1
 8661 024e 31       		.uleb128 0x31
 8662 024f 13       		.uleb128 0x13
 8663 0250 11       		.uleb128 0x11
 8664 0251 01       		.uleb128 0x1
 8665 0252 12       		.uleb128 0x12
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 255


 8666 0253 06       		.uleb128 0x6
 8667 0254 58       		.uleb128 0x58
 8668 0255 0B       		.uleb128 0xb
 8669 0256 59       		.uleb128 0x59
 8670 0257 05       		.uleb128 0x5
 8671 0258 00       		.byte	0
 8672 0259 00       		.byte	0
 8673 025a 2C       		.uleb128 0x2c
 8674 025b 05       		.uleb128 0x5
 8675 025c 00       		.byte	0
 8676 025d 31       		.uleb128 0x31
 8677 025e 13       		.uleb128 0x13
 8678 025f 02       		.uleb128 0x2
 8679 0260 17       		.uleb128 0x17
 8680 0261 00       		.byte	0
 8681 0262 00       		.byte	0
 8682 0263 2D       		.uleb128 0x2d
 8683 0264 2E       		.uleb128 0x2e
 8684 0265 00       		.byte	0
 8685 0266 3F       		.uleb128 0x3f
 8686 0267 19       		.uleb128 0x19
 8687 0268 03       		.uleb128 0x3
 8688 0269 0E       		.uleb128 0xe
 8689 026a 3A       		.uleb128 0x3a
 8690 026b 0B       		.uleb128 0xb
 8691 026c 3B       		.uleb128 0x3b
 8692 026d 05       		.uleb128 0x5
 8693 026e 27       		.uleb128 0x27
 8694 026f 19       		.uleb128 0x19
 8695 0270 11       		.uleb128 0x11
 8696 0271 01       		.uleb128 0x1
 8697 0272 12       		.uleb128 0x12
 8698 0273 06       		.uleb128 0x6
 8699 0274 40       		.uleb128 0x40
 8700 0275 18       		.uleb128 0x18
 8701 0276 9742     		.uleb128 0x2117
 8702 0278 19       		.uleb128 0x19
 8703 0279 00       		.byte	0
 8704 027a 00       		.byte	0
 8705 027b 2E       		.uleb128 0x2e
 8706 027c 34       		.uleb128 0x34
 8707 027d 00       		.byte	0
 8708 027e 03       		.uleb128 0x3
 8709 027f 0E       		.uleb128 0xe
 8710 0280 3A       		.uleb128 0x3a
 8711 0281 0B       		.uleb128 0xb
 8712 0282 3B       		.uleb128 0x3b
 8713 0283 05       		.uleb128 0x5
 8714 0284 49       		.uleb128 0x49
 8715 0285 13       		.uleb128 0x13
 8716 0286 1C       		.uleb128 0x1c
 8717 0287 0B       		.uleb128 0xb
 8718 0288 00       		.byte	0
 8719 0289 00       		.byte	0
 8720 028a 2F       		.uleb128 0x2f
 8721 028b 2E       		.uleb128 0x2e
 8722 028c 00       		.byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 256


 8723 028d 3F       		.uleb128 0x3f
 8724 028e 19       		.uleb128 0x19
 8725 028f 03       		.uleb128 0x3
 8726 0290 0E       		.uleb128 0xe
 8727 0291 3A       		.uleb128 0x3a
 8728 0292 0B       		.uleb128 0xb
 8729 0293 3B       		.uleb128 0x3b
 8730 0294 05       		.uleb128 0x5
 8731 0295 27       		.uleb128 0x27
 8732 0296 19       		.uleb128 0x19
 8733 0297 49       		.uleb128 0x49
 8734 0298 13       		.uleb128 0x13
 8735 0299 11       		.uleb128 0x11
 8736 029a 01       		.uleb128 0x1
 8737 029b 12       		.uleb128 0x12
 8738 029c 06       		.uleb128 0x6
 8739 029d 40       		.uleb128 0x40
 8740 029e 18       		.uleb128 0x18
 8741 029f 9742     		.uleb128 0x2117
 8742 02a1 19       		.uleb128 0x19
 8743 02a2 00       		.byte	0
 8744 02a3 00       		.byte	0
 8745 02a4 30       		.uleb128 0x30
 8746 02a5 0B       		.uleb128 0xb
 8747 02a6 01       		.byte	0x1
 8748 02a7 55       		.uleb128 0x55
 8749 02a8 17       		.uleb128 0x17
 8750 02a9 00       		.byte	0
 8751 02aa 00       		.byte	0
 8752 02ab 31       		.uleb128 0x31
 8753 02ac 0B       		.uleb128 0xb
 8754 02ad 01       		.byte	0x1
 8755 02ae 55       		.uleb128 0x55
 8756 02af 17       		.uleb128 0x17
 8757 02b0 01       		.uleb128 0x1
 8758 02b1 13       		.uleb128 0x13
 8759 02b2 00       		.byte	0
 8760 02b3 00       		.byte	0
 8761 02b4 32       		.uleb128 0x32
 8762 02b5 34       		.uleb128 0x34
 8763 02b6 00       		.byte	0
 8764 02b7 31       		.uleb128 0x31
 8765 02b8 13       		.uleb128 0x13
 8766 02b9 02       		.uleb128 0x2
 8767 02ba 18       		.uleb128 0x18
 8768 02bb 00       		.byte	0
 8769 02bc 00       		.byte	0
 8770 02bd 33       		.uleb128 0x33
 8771 02be 34       		.uleb128 0x34
 8772 02bf 00       		.byte	0
 8773 02c0 03       		.uleb128 0x3
 8774 02c1 0E       		.uleb128 0xe
 8775 02c2 3A       		.uleb128 0x3a
 8776 02c3 0B       		.uleb128 0xb
 8777 02c4 3B       		.uleb128 0x3b
 8778 02c5 05       		.uleb128 0x5
 8779 02c6 49       		.uleb128 0x49
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 257


 8780 02c7 13       		.uleb128 0x13
 8781 02c8 3F       		.uleb128 0x3f
 8782 02c9 19       		.uleb128 0x19
 8783 02ca 3C       		.uleb128 0x3c
 8784 02cb 19       		.uleb128 0x19
 8785 02cc 00       		.byte	0
 8786 02cd 00       		.byte	0
 8787 02ce 34       		.uleb128 0x34
 8788 02cf 34       		.uleb128 0x34
 8789 02d0 00       		.byte	0
 8790 02d1 03       		.uleb128 0x3
 8791 02d2 0E       		.uleb128 0xe
 8792 02d3 3A       		.uleb128 0x3a
 8793 02d4 0B       		.uleb128 0xb
 8794 02d5 3B       		.uleb128 0x3b
 8795 02d6 05       		.uleb128 0x5
 8796 02d7 49       		.uleb128 0x49
 8797 02d8 13       		.uleb128 0x13
 8798 02d9 3F       		.uleb128 0x3f
 8799 02da 19       		.uleb128 0x19
 8800 02db 02       		.uleb128 0x2
 8801 02dc 18       		.uleb128 0x18
 8802 02dd 00       		.byte	0
 8803 02de 00       		.byte	0
 8804 02df 35       		.uleb128 0x35
 8805 02e0 2E       		.uleb128 0x2e
 8806 02e1 00       		.byte	0
 8807 02e2 3F       		.uleb128 0x3f
 8808 02e3 19       		.uleb128 0x19
 8809 02e4 3C       		.uleb128 0x3c
 8810 02e5 19       		.uleb128 0x19
 8811 02e6 6E       		.uleb128 0x6e
 8812 02e7 0E       		.uleb128 0xe
 8813 02e8 03       		.uleb128 0x3
 8814 02e9 0E       		.uleb128 0xe
 8815 02ea 3A       		.uleb128 0x3a
 8816 02eb 0B       		.uleb128 0xb
 8817 02ec 3B       		.uleb128 0x3b
 8818 02ed 0B       		.uleb128 0xb
 8819 02ee 00       		.byte	0
 8820 02ef 00       		.byte	0
 8821 02f0 36       		.uleb128 0x36
 8822 02f1 2E       		.uleb128 0x2e
 8823 02f2 00       		.byte	0
 8824 02f3 3F       		.uleb128 0x3f
 8825 02f4 19       		.uleb128 0x19
 8826 02f5 3C       		.uleb128 0x3c
 8827 02f6 19       		.uleb128 0x19
 8828 02f7 6E       		.uleb128 0x6e
 8829 02f8 0E       		.uleb128 0xe
 8830 02f9 03       		.uleb128 0x3
 8831 02fa 0E       		.uleb128 0xe
 8832 02fb 3A       		.uleb128 0x3a
 8833 02fc 0B       		.uleb128 0xb
 8834 02fd 3B       		.uleb128 0x3b
 8835 02fe 05       		.uleb128 0x5
 8836 02ff 00       		.byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 258


 8837 0300 00       		.byte	0
 8838 0301 00       		.byte	0
 8839              		.section	.debug_loc,"",%progbits
 8840              	.Ldebug_loc0:
 8841              	.LLST0:
 8842 0000 00000000 		.4byte	.LVL0
 8843 0004 20000000 		.4byte	.LVL1
 8844 0008 0100     		.2byte	0x1
 8845 000a 50       		.byte	0x50
 8846 000b 20000000 		.4byte	.LVL1
 8847 000f 22000000 		.4byte	.LVL2
 8848 0013 0400     		.2byte	0x4
 8849 0015 F3       		.byte	0xf3
 8850 0016 01       		.uleb128 0x1
 8851 0017 50       		.byte	0x50
 8852 0018 9F       		.byte	0x9f
 8853 0019 22000000 		.4byte	.LVL2
 8854 001d 24000000 		.4byte	.LVL3
 8855 0021 0100     		.2byte	0x1
 8856 0023 50       		.byte	0x50
 8857 0024 24000000 		.4byte	.LVL3
 8858 0028 26000000 		.4byte	.LVL4
 8859 002c 0400     		.2byte	0x4
 8860 002e F3       		.byte	0xf3
 8861 002f 01       		.uleb128 0x1
 8862 0030 50       		.byte	0x50
 8863 0031 9F       		.byte	0x9f
 8864 0032 26000000 		.4byte	.LVL4
 8865 0036 28000000 		.4byte	.LVL5
 8866 003a 0100     		.2byte	0x1
 8867 003c 50       		.byte	0x50
 8868 003d 28000000 		.4byte	.LVL5
 8869 0041 2A000000 		.4byte	.LVL6
 8870 0045 0400     		.2byte	0x4
 8871 0047 F3       		.byte	0xf3
 8872 0048 01       		.uleb128 0x1
 8873 0049 50       		.byte	0x50
 8874 004a 9F       		.byte	0x9f
 8875 004b 2A000000 		.4byte	.LVL6
 8876 004f 2C000000 		.4byte	.LVL7
 8877 0053 0100     		.2byte	0x1
 8878 0055 50       		.byte	0x50
 8879 0056 2C000000 		.4byte	.LVL7
 8880 005a 38000000 		.4byte	.LFE80
 8881 005e 0400     		.2byte	0x4
 8882 0060 F3       		.byte	0xf3
 8883 0061 01       		.uleb128 0x1
 8884 0062 50       		.byte	0x50
 8885 0063 9F       		.byte	0x9f
 8886 0064 00000000 		.4byte	0
 8887 0068 00000000 		.4byte	0
 8888              	.LLST1:
 8889 006c 00000000 		.4byte	.LVL0
 8890 0070 2C000000 		.4byte	.LVL7
 8891 0074 0200     		.2byte	0x2
 8892 0076 30       		.byte	0x30
 8893 0077 9F       		.byte	0x9f
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 259


 8894 0078 2C000000 		.4byte	.LVL7
 8895 007c 38000000 		.4byte	.LFE80
 8896 0080 0100     		.2byte	0x1
 8897 0082 50       		.byte	0x50
 8898 0083 00000000 		.4byte	0
 8899 0087 00000000 		.4byte	0
 8900              	.LLST2:
 8901 008b 00000000 		.4byte	.LVL0
 8902 008f 20000000 		.4byte	.LVL1
 8903 0093 0100     		.2byte	0x1
 8904 0095 50       		.byte	0x50
 8905 0096 20000000 		.4byte	.LVL1
 8906 009a 22000000 		.4byte	.LVL2
 8907 009e 0400     		.2byte	0x4
 8908 00a0 F3       		.byte	0xf3
 8909 00a1 01       		.uleb128 0x1
 8910 00a2 50       		.byte	0x50
 8911 00a3 9F       		.byte	0x9f
 8912 00a4 22000000 		.4byte	.LVL2
 8913 00a8 24000000 		.4byte	.LVL3
 8914 00ac 0100     		.2byte	0x1
 8915 00ae 50       		.byte	0x50
 8916 00af 24000000 		.4byte	.LVL3
 8917 00b3 26000000 		.4byte	.LVL4
 8918 00b7 0400     		.2byte	0x4
 8919 00b9 F3       		.byte	0xf3
 8920 00ba 01       		.uleb128 0x1
 8921 00bb 50       		.byte	0x50
 8922 00bc 9F       		.byte	0x9f
 8923 00bd 26000000 		.4byte	.LVL4
 8924 00c1 28000000 		.4byte	.LVL5
 8925 00c5 0100     		.2byte	0x1
 8926 00c7 50       		.byte	0x50
 8927 00c8 28000000 		.4byte	.LVL5
 8928 00cc 2A000000 		.4byte	.LVL6
 8929 00d0 0400     		.2byte	0x4
 8930 00d2 F3       		.byte	0xf3
 8931 00d3 01       		.uleb128 0x1
 8932 00d4 50       		.byte	0x50
 8933 00d5 9F       		.byte	0x9f
 8934 00d6 2A000000 		.4byte	.LVL6
 8935 00da 2C000000 		.4byte	.LVL7
 8936 00de 0100     		.2byte	0x1
 8937 00e0 50       		.byte	0x50
 8938 00e1 2C000000 		.4byte	.LVL7
 8939 00e5 38000000 		.4byte	.LFE80
 8940 00e9 0400     		.2byte	0x4
 8941 00eb F3       		.byte	0xf3
 8942 00ec 01       		.uleb128 0x1
 8943 00ed 50       		.byte	0x50
 8944 00ee 9F       		.byte	0x9f
 8945 00ef 00000000 		.4byte	0
 8946 00f3 00000000 		.4byte	0
 8947              	.LLST3:
 8948 00f7 00000000 		.4byte	.LVL8
 8949 00fb 06000000 		.4byte	.LVL10
 8950 00ff 0100     		.2byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 260


 8951 0101 50       		.byte	0x50
 8952 0102 06000000 		.4byte	.LVL10
 8953 0106 12000000 		.4byte	.LVL13
 8954 010a 0100     		.2byte	0x1
 8955 010c 50       		.byte	0x50
 8956 010d 00000000 		.4byte	0
 8957 0111 00000000 		.4byte	0
 8958              	.LLST4:
 8959 0115 00000000 		.4byte	.LVL8
 8960 0119 04000000 		.4byte	.LVL9
 8961 011d 0200     		.2byte	0x2
 8962 011f 30       		.byte	0x30
 8963 0120 9F       		.byte	0x9f
 8964 0121 04000000 		.4byte	.LVL9
 8965 0125 0E000000 		.4byte	.LVL12
 8966 0129 0100     		.2byte	0x1
 8967 012b 53       		.byte	0x53
 8968 012c 0E000000 		.4byte	.LVL12
 8969 0130 14000000 		.4byte	.LFE104
 8970 0134 0500     		.2byte	0x5
 8971 0136 73       		.byte	0x73
 8972 0137 00       		.sleb128 0
 8973 0138 32       		.byte	0x32
 8974 0139 25       		.byte	0x25
 8975 013a 9F       		.byte	0x9f
 8976 013b 00000000 		.4byte	0
 8977 013f 00000000 		.4byte	0
 8978              	.LLST5:
 8979 0143 22000000 		.4byte	.LVL14
 8980 0147 24000000 		.4byte	.LVL15
 8981 014b 0100     		.2byte	0x1
 8982 014d 52       		.byte	0x52
 8983 014e 00000000 		.4byte	0
 8984 0152 00000000 		.4byte	0
 8985              	.LLST6:
 8986 0156 00000000 		.4byte	.LVL16
 8987 015a 06000000 		.4byte	.LVL17
 8988 015e 0100     		.2byte	0x1
 8989 0160 50       		.byte	0x50
 8990 0161 06000000 		.4byte	.LVL17
 8991 0165 12000000 		.4byte	.LFE106
 8992 0169 0100     		.2byte	0x1
 8993 016b 54       		.byte	0x54
 8994 016c 00000000 		.4byte	0
 8995 0170 00000000 		.4byte	0
 8996              	.LLST7:
 8997 0174 00000000 		.4byte	.LVL20
 8998 0178 1A000000 		.4byte	.LVL23
 8999 017c 0100     		.2byte	0x1
 9000 017e 50       		.byte	0x50
 9001 017f 1A000000 		.4byte	.LVL23
 9002 0183 90000000 		.4byte	.LFE70
 9003 0187 0100     		.2byte	0x1
 9004 0189 59       		.byte	0x59
 9005 018a 00000000 		.4byte	0
 9006 018e 00000000 		.4byte	0
 9007              	.LLST8:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 261


 9008 0192 00000000 		.4byte	.LVL20
 9009 0196 18000000 		.4byte	.LVL22
 9010 019a 0100     		.2byte	0x1
 9011 019c 51       		.byte	0x51
 9012 019d 18000000 		.4byte	.LVL22
 9013 01a1 56000000 		.4byte	.LVL31
 9014 01a5 0100     		.2byte	0x1
 9015 01a7 55       		.byte	0x55
 9016 01a8 56000000 		.4byte	.LVL31
 9017 01ac 90000000 		.4byte	.LFE70
 9018 01b0 0400     		.2byte	0x4
 9019 01b2 F3       		.byte	0xf3
 9020 01b3 01       		.uleb128 0x1
 9021 01b4 51       		.byte	0x51
 9022 01b5 9F       		.byte	0x9f
 9023 01b6 00000000 		.4byte	0
 9024 01ba 00000000 		.4byte	0
 9025              	.LLST9:
 9026 01be 00000000 		.4byte	.LVL20
 9027 01c2 16000000 		.4byte	.LVL21
 9028 01c6 0100     		.2byte	0x1
 9029 01c8 52       		.byte	0x52
 9030 01c9 16000000 		.4byte	.LVL21
 9031 01cd 2A000000 		.4byte	.LVL25
 9032 01d1 0100     		.2byte	0x1
 9033 01d3 57       		.byte	0x57
 9034 01d4 2A000000 		.4byte	.LVL25
 9035 01d8 32000000 		.4byte	.LVL27
 9036 01dc 0700     		.2byte	0x7
 9037 01de 72       		.byte	0x72
 9038 01df 81808080 		.sleb128 -1073741823
 9038      7C
 9039 01e4 9F       		.byte	0x9f
 9040 01e5 32000000 		.4byte	.LVL27
 9041 01e9 90000000 		.4byte	.LFE70
 9042 01ed 0400     		.2byte	0x4
 9043 01ef F3       		.byte	0xf3
 9044 01f0 01       		.uleb128 0x1
 9045 01f1 52       		.byte	0x52
 9046 01f2 9F       		.byte	0x9f
 9047 01f3 00000000 		.4byte	0
 9048 01f7 00000000 		.4byte	0
 9049              	.LLST10:
 9050 01fb 00000000 		.4byte	.LVL20
 9051 01ff 1D000000 		.4byte	.LVL24-1
 9052 0203 0100     		.2byte	0x1
 9053 0205 53       		.byte	0x53
 9054 0206 1D000000 		.4byte	.LVL24-1
 9055 020a 90000000 		.4byte	.LFE70
 9056 020e 0100     		.2byte	0x1
 9057 0210 5A       		.byte	0x5a
 9058 0211 00000000 		.4byte	0
 9059 0215 00000000 		.4byte	0
 9060              	.LLST11:
 9061 0219 00000000 		.4byte	.LVL20
 9062 021d 50000000 		.4byte	.LVL30
 9063 0221 0200     		.2byte	0x2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 262


 9064 0223 91       		.byte	0x91
 9065 0224 00       		.sleb128 0
 9066 0225 50000000 		.4byte	.LVL30
 9067 0229 6C000000 		.4byte	.LVL34
 9068 022d 0100     		.2byte	0x1
 9069 022f 56       		.byte	0x56
 9070 0230 00000000 		.4byte	0
 9071 0234 00000000 		.4byte	0
 9072              	.LLST12:
 9073 0238 2E000000 		.4byte	.LVL26
 9074 023c 32000000 		.4byte	.LVL27
 9075 0240 0200     		.2byte	0x2
 9076 0242 30       		.byte	0x30
 9077 0243 9F       		.byte	0x9f
 9078 0244 32000000 		.4byte	.LVL27
 9079 0248 46000000 		.4byte	.LVL29
 9080 024c 0100     		.2byte	0x1
 9081 024e 53       		.byte	0x53
 9082 024f 00000000 		.4byte	0
 9083 0253 00000000 		.4byte	0
 9084              	.LLST13:
 9085 0257 02000000 		.4byte	.LVL36
 9086 025b 06000000 		.4byte	.LVL37
 9087 025f 0200     		.2byte	0x2
 9088 0261 30       		.byte	0x30
 9089 0262 9F       		.byte	0x9f
 9090 0263 06000000 		.4byte	.LVL37
 9091 0267 1C000000 		.4byte	.LVL40
 9092 026b 0100     		.2byte	0x1
 9093 026d 54       		.byte	0x54
 9094 026e 00000000 		.4byte	0
 9095 0272 00000000 		.4byte	0
 9096              	.LLST14:
 9097 0276 00000000 		.4byte	.LVL46
 9098 027a 07000000 		.4byte	.LVL47-1
 9099 027e 0100     		.2byte	0x1
 9100 0280 50       		.byte	0x50
 9101 0281 07000000 		.4byte	.LVL47-1
 9102 0285 A2000000 		.4byte	.LVL51
 9103 0289 0100     		.2byte	0x1
 9104 028b 55       		.byte	0x55
 9105 028c A2000000 		.4byte	.LVL51
 9106 0290 AC000000 		.4byte	.LFE71
 9107 0294 0400     		.2byte	0x4
 9108 0296 F3       		.byte	0xf3
 9109 0297 01       		.uleb128 0x1
 9110 0298 50       		.byte	0x50
 9111 0299 9F       		.byte	0x9f
 9112 029a 00000000 		.4byte	0
 9113 029e 00000000 		.4byte	0
 9114              	.LLST15:
 9115 02a2 10000000 		.4byte	.LVL53
 9116 02a6 34000000 		.4byte	.LVL56
 9117 02aa 0100     		.2byte	0x1
 9118 02ac 55       		.byte	0x55
 9119 02ad 00000000 		.4byte	0
 9120 02b1 00000000 		.4byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 263


 9121              	.LLST16:
 9122 02b5 00000000 		.4byte	.LVL57
 9123 02b9 02000000 		.4byte	.LVL58
 9124 02bd 0100     		.2byte	0x1
 9125 02bf 50       		.byte	0x50
 9126 02c0 02000000 		.4byte	.LVL58
 9127 02c4 08000000 		.4byte	.LFE101
 9128 02c8 0400     		.2byte	0x4
 9129 02ca F3       		.byte	0xf3
 9130 02cb 01       		.uleb128 0x1
 9131 02cc 50       		.byte	0x50
 9132 02cd 9F       		.byte	0x9f
 9133 02ce 00000000 		.4byte	0
 9134 02d2 00000000 		.4byte	0
 9135              	.LLST17:
 9136 02d6 00000000 		.4byte	.LVL60
 9137 02da 10000000 		.4byte	.LVL62
 9138 02de 0100     		.2byte	0x1
 9139 02e0 50       		.byte	0x50
 9140 02e1 10000000 		.4byte	.LVL62
 9141 02e5 4A000000 		.4byte	.LVL66
 9142 02e9 0100     		.2byte	0x1
 9143 02eb 54       		.byte	0x54
 9144 02ec 4A000000 		.4byte	.LVL66
 9145 02f0 84000000 		.4byte	.LFE120
 9146 02f4 0400     		.2byte	0x4
 9147 02f6 F3       		.byte	0xf3
 9148 02f7 01       		.uleb128 0x1
 9149 02f8 50       		.byte	0x50
 9150 02f9 9F       		.byte	0x9f
 9151 02fa 00000000 		.4byte	0
 9152 02fe 00000000 		.4byte	0
 9153              	.LLST18:
 9154 0302 00000000 		.4byte	.LVL60
 9155 0306 15000000 		.4byte	.LVL63-1
 9156 030a 0100     		.2byte	0x1
 9157 030c 51       		.byte	0x51
 9158 030d 15000000 		.4byte	.LVL63-1
 9159 0311 80000000 		.4byte	.LVL71
 9160 0315 0100     		.2byte	0x1
 9161 0317 56       		.byte	0x56
 9162 0318 80000000 		.4byte	.LVL71
 9163 031c 84000000 		.4byte	.LFE120
 9164 0320 0400     		.2byte	0x4
 9165 0322 F3       		.byte	0xf3
 9166 0323 01       		.uleb128 0x1
 9167 0324 51       		.byte	0x51
 9168 0325 9F       		.byte	0x9f
 9169 0326 00000000 		.4byte	0
 9170 032a 00000000 		.4byte	0
 9171              	.LLST19:
 9172 032e 4A000000 		.4byte	.LVL66
 9173 0332 80000000 		.4byte	.LVL71
 9174 0336 0100     		.2byte	0x1
 9175 0338 54       		.byte	0x54
 9176 0339 00000000 		.4byte	0
 9177 033d 00000000 		.4byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 264


 9178              	.LLST20:
 9179 0341 0C000000 		.4byte	.LVL61
 9180 0345 6A000000 		.4byte	.LVL69
 9181 0349 0100     		.2byte	0x1
 9182 034b 55       		.byte	0x55
 9183 034c 00000000 		.4byte	0
 9184 0350 00000000 		.4byte	0
 9185              	.LLST21:
 9186 0354 00000000 		.4byte	.LVL72
 9187 0358 10000000 		.4byte	.LVL73
 9188 035c 0100     		.2byte	0x1
 9189 035e 50       		.byte	0x50
 9190 035f 10000000 		.4byte	.LVL73
 9191 0363 62000000 		.4byte	.LFE69
 9192 0367 0100     		.2byte	0x1
 9193 0369 56       		.byte	0x56
 9194 036a 00000000 		.4byte	0
 9195 036e 00000000 		.4byte	0
 9196              	.LLST22:
 9197 0372 00000000 		.4byte	.LVL72
 9198 0376 13000000 		.4byte	.LVL74-1
 9199 037a 0100     		.2byte	0x1
 9200 037c 51       		.byte	0x51
 9201 037d 13000000 		.4byte	.LVL74-1
 9202 0381 62000000 		.4byte	.LFE69
 9203 0385 0100     		.2byte	0x1
 9204 0387 57       		.byte	0x57
 9205 0388 00000000 		.4byte	0
 9206 038c 00000000 		.4byte	0
 9207              	.LLST23:
 9208 0390 00000000 		.4byte	.LVL72
 9209 0394 13000000 		.4byte	.LVL74-1
 9210 0398 0100     		.2byte	0x1
 9211 039a 52       		.byte	0x52
 9212 039b 13000000 		.4byte	.LVL74-1
 9213 039f 62000000 		.4byte	.LFE69
 9214 03a3 0400     		.2byte	0x4
 9215 03a5 F3       		.byte	0xf3
 9216 03a6 01       		.uleb128 0x1
 9217 03a7 52       		.byte	0x52
 9218 03a8 9F       		.byte	0x9f
 9219 03a9 00000000 		.4byte	0
 9220 03ad 00000000 		.4byte	0
 9221              	.LLST24:
 9222 03b1 00000000 		.4byte	.LVL72
 9223 03b5 13000000 		.4byte	.LVL74-1
 9224 03b9 0100     		.2byte	0x1
 9225 03bb 53       		.byte	0x53
 9226 03bc 13000000 		.4byte	.LVL74-1
 9227 03c0 62000000 		.4byte	.LFE69
 9228 03c4 0100     		.2byte	0x1
 9229 03c6 58       		.byte	0x58
 9230 03c7 00000000 		.4byte	0
 9231 03cb 00000000 		.4byte	0
 9232              	.LLST25:
 9233 03cf 1E000000 		.4byte	.LVL76
 9234 03d3 2A000000 		.4byte	.LVL77
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 265


 9235 03d7 0100     		.2byte	0x1
 9236 03d9 50       		.byte	0x50
 9237 03da 2A000000 		.4byte	.LVL77
 9238 03de 30000000 		.4byte	.LVL79
 9239 03e2 0100     		.2byte	0x1
 9240 03e4 54       		.byte	0x54
 9241 03e5 32000000 		.4byte	.LVL80
 9242 03e9 62000000 		.4byte	.LFE69
 9243 03ed 0100     		.2byte	0x1
 9244 03ef 54       		.byte	0x54
 9245 03f0 00000000 		.4byte	0
 9246 03f4 00000000 		.4byte	0
 9247              	.LLST26:
 9248 03f8 54000000 		.4byte	.LVL82
 9249 03fc 58000000 		.4byte	.LVL83
 9250 0400 0200     		.2byte	0x2
 9251 0402 31       		.byte	0x31
 9252 0403 9F       		.byte	0x9f
 9253 0404 5C000000 		.4byte	.LVL84
 9254 0408 62000000 		.4byte	.LFE69
 9255 040c 0100     		.2byte	0x1
 9256 040e 50       		.byte	0x50
 9257 040f 00000000 		.4byte	0
 9258 0413 00000000 		.4byte	0
 9259              	.LLST27:
 9260 0417 14000000 		.4byte	.LVL74
 9261 041b 1A000000 		.4byte	.LVL75
 9262 041f 0100     		.2byte	0x1
 9263 0421 50       		.byte	0x50
 9264 0422 1A000000 		.4byte	.LVL75
 9265 0426 30000000 		.4byte	.LVL79
 9266 042a 0100     		.2byte	0x1
 9267 042c 59       		.byte	0x59
 9268 042d 30000000 		.4byte	.LVL79
 9269 0431 32000000 		.4byte	.LVL80
 9270 0435 0100     		.2byte	0x1
 9271 0437 50       		.byte	0x50
 9272 0438 00000000 		.4byte	0
 9273 043c 00000000 		.4byte	0
 9274              	.LLST28:
 9275 0440 00000000 		.4byte	.LVL85
 9276 0444 07000000 		.4byte	.LVL86-1
 9277 0448 0100     		.2byte	0x1
 9278 044a 50       		.byte	0x50
 9279 044b 07000000 		.4byte	.LVL86-1
 9280 044f 10000000 		.4byte	.LVL87
 9281 0453 0100     		.2byte	0x1
 9282 0455 54       		.byte	0x54
 9283 0456 00000000 		.4byte	0
 9284 045a 00000000 		.4byte	0
 9285              	.LLST29:
 9286 045e 10000000 		.4byte	.LVL87
 9287 0462 B2000000 		.4byte	.LVL94
 9288 0466 0100     		.2byte	0x1
 9289 0468 54       		.byte	0x54
 9290 0469 00000000 		.4byte	0
 9291 046d 00000000 		.4byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 266


 9292              	.LLST30:
 9293 0471 00000000 		.4byte	.LVL95
 9294 0475 11000000 		.4byte	.LVL97-1
 9295 0479 0100     		.2byte	0x1
 9296 047b 50       		.byte	0x50
 9297 047c 11000000 		.4byte	.LVL97-1
 9298 0480 44000000 		.4byte	.LVL101
 9299 0484 0100     		.2byte	0x1
 9300 0486 54       		.byte	0x54
 9301 0487 44000000 		.4byte	.LVL101
 9302 048b 46000000 		.4byte	.LVL102
 9303 048f 0100     		.2byte	0x1
 9304 0491 50       		.byte	0x50
 9305 0492 46000000 		.4byte	.LVL102
 9306 0496 48000000 		.4byte	.LVL103
 9307 049a 0400     		.2byte	0x4
 9308 049c F3       		.byte	0xf3
 9309 049d 01       		.uleb128 0x1
 9310 049e 50       		.byte	0x50
 9311 049f 9F       		.byte	0x9f
 9312 04a0 48000000 		.4byte	.LVL103
 9313 04a4 5C000000 		.4byte	.LVL109
 9314 04a8 0100     		.2byte	0x1
 9315 04aa 54       		.byte	0x54
 9316 04ab 5C000000 		.4byte	.LVL109
 9317 04af 64000000 		.4byte	.LFE75
 9318 04b3 0400     		.2byte	0x4
 9319 04b5 F3       		.byte	0xf3
 9320 04b6 01       		.uleb128 0x1
 9321 04b7 50       		.byte	0x50
 9322 04b8 9F       		.byte	0x9f
 9323 04b9 00000000 		.4byte	0
 9324 04bd 00000000 		.4byte	0
 9325              	.LLST31:
 9326 04c1 14000000 		.4byte	.LVL98
 9327 04c5 44000000 		.4byte	.LVL101
 9328 04c9 0100     		.2byte	0x1
 9329 04cb 55       		.byte	0x55
 9330 04cc 48000000 		.4byte	.LVL103
 9331 04d0 5C000000 		.4byte	.LVL109
 9332 04d4 0100     		.2byte	0x1
 9333 04d6 55       		.byte	0x55
 9334 04d7 00000000 		.4byte	0
 9335 04db 00000000 		.4byte	0
 9336              	.LLST32:
 9337 04df 02000000 		.4byte	.LVL96
 9338 04e3 11000000 		.4byte	.LVL97-1
 9339 04e7 0100     		.2byte	0x1
 9340 04e9 50       		.byte	0x50
 9341 04ea 11000000 		.4byte	.LVL97-1
 9342 04ee 44000000 		.4byte	.LVL101
 9343 04f2 0100     		.2byte	0x1
 9344 04f4 54       		.byte	0x54
 9345 04f5 44000000 		.4byte	.LVL101
 9346 04f9 46000000 		.4byte	.LVL102
 9347 04fd 0100     		.2byte	0x1
 9348 04ff 50       		.byte	0x50
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 267


 9349 0500 46000000 		.4byte	.LVL102
 9350 0504 48000000 		.4byte	.LVL103
 9351 0508 0400     		.2byte	0x4
 9352 050a F3       		.byte	0xf3
 9353 050b 01       		.uleb128 0x1
 9354 050c 50       		.byte	0x50
 9355 050d 9F       		.byte	0x9f
 9356 050e 48000000 		.4byte	.LVL103
 9357 0512 5C000000 		.4byte	.LVL109
 9358 0516 0100     		.2byte	0x1
 9359 0518 54       		.byte	0x54
 9360 0519 5C000000 		.4byte	.LVL109
 9361 051d 64000000 		.4byte	.LFE75
 9362 0521 0400     		.2byte	0x4
 9363 0523 F3       		.byte	0xf3
 9364 0524 01       		.uleb128 0x1
 9365 0525 50       		.byte	0x50
 9366 0526 9F       		.byte	0x9f
 9367 0527 00000000 		.4byte	0
 9368 052b 00000000 		.4byte	0
 9369              	.LLST33:
 9370 052f 00000000 		.4byte	.LVL110
 9371 0533 07000000 		.4byte	.LVL111-1
 9372 0537 0100     		.2byte	0x1
 9373 0539 50       		.byte	0x50
 9374 053a 07000000 		.4byte	.LVL111-1
 9375 053e 10000000 		.4byte	.LVL112
 9376 0542 0100     		.2byte	0x1
 9377 0544 54       		.byte	0x54
 9378 0545 00000000 		.4byte	0
 9379 0549 00000000 		.4byte	0
 9380              	.LLST34:
 9381 054d 10000000 		.4byte	.LVL112
 9382 0551 12000000 		.4byte	.LVL113
 9383 0555 0100     		.2byte	0x1
 9384 0557 54       		.byte	0x54
 9385 0558 00000000 		.4byte	0
 9386 055c 00000000 		.4byte	0
 9387              	.LLST35:
 9388 0560 12000000 		.4byte	.LVL113
 9389 0564 1A000000 		.4byte	.LVL115
 9390 0568 0100     		.2byte	0x1
 9391 056a 54       		.byte	0x54
 9392 056b 1A000000 		.4byte	.LVL115
 9393 056f 20000000 		.4byte	.LFE76
 9394 0573 0100     		.2byte	0x1
 9395 0575 50       		.byte	0x50
 9396 0576 00000000 		.4byte	0
 9397 057a 00000000 		.4byte	0
 9398              	.LLST36:
 9399 057e 00000000 		.4byte	.LVL116
 9400 0582 1C000000 		.4byte	.LVL117
 9401 0586 0100     		.2byte	0x1
 9402 0588 50       		.byte	0x50
 9403 0589 00000000 		.4byte	0
 9404 058d 00000000 		.4byte	0
 9405              	.LLST37:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 268


 9406 0591 1C000000 		.4byte	.LVL117
 9407 0595 1E000000 		.4byte	.LVL118
 9408 0599 0100     		.2byte	0x1
 9409 059b 50       		.byte	0x50
 9410 059c 00000000 		.4byte	0
 9411 05a0 00000000 		.4byte	0
 9412              	.LLST38:
 9413 05a4 1E000000 		.4byte	.LVL118
 9414 05a8 22000000 		.4byte	.LVL119
 9415 05ac 0100     		.2byte	0x1
 9416 05ae 53       		.byte	0x53
 9417 05af 00000000 		.4byte	0
 9418 05b3 00000000 		.4byte	0
 9419              	.LLST39:
 9420 05b7 00000000 		.4byte	.LVL120
 9421 05bb 0F000000 		.4byte	.LVL123-1
 9422 05bf 0100     		.2byte	0x1
 9423 05c1 50       		.byte	0x50
 9424 05c2 0F000000 		.4byte	.LVL123-1
 9425 05c6 18000000 		.4byte	.LVL124
 9426 05ca 0100     		.2byte	0x1
 9427 05cc 54       		.byte	0x54
 9428 05cd 00000000 		.4byte	0
 9429 05d1 00000000 		.4byte	0
 9430              	.LLST40:
 9431 05d5 00000000 		.4byte	.LVL120
 9432 05d9 0C000000 		.4byte	.LVL122
 9433 05dd 0100     		.2byte	0x1
 9434 05df 51       		.byte	0x51
 9435 05e0 0C000000 		.4byte	.LVL122
 9436 05e4 66000000 		.4byte	.LVL129
 9437 05e8 0100     		.2byte	0x1
 9438 05ea 55       		.byte	0x55
 9439 05eb 66000000 		.4byte	.LVL129
 9440 05ef 87000000 		.4byte	.LVL130-1
 9441 05f3 0300     		.2byte	0x3
 9442 05f5 74       		.byte	0x74
 9443 05f6 C000     		.sleb128 64
 9444 05f8 00000000 		.4byte	0
 9445 05fc 00000000 		.4byte	0
 9446              	.LLST41:
 9447 0600 18000000 		.4byte	.LVL124
 9448 0604 DA000000 		.4byte	.LVL135
 9449 0608 0100     		.2byte	0x1
 9450 060a 54       		.byte	0x54
 9451 060b 00000000 		.4byte	0
 9452 060f 00000000 		.4byte	0
 9453              	.LLST42:
 9454 0613 1A000000 		.4byte	.LVL125
 9455 0617 5E000000 		.4byte	.LVL128
 9456 061b 0100     		.2byte	0x1
 9457 061d 53       		.byte	0x53
 9458 061e 00000000 		.4byte	0
 9459 0622 00000000 		.4byte	0
 9460              	.LLST43:
 9461 0626 54000000 		.4byte	.LVL127
 9462 062a 90000000 		.4byte	.LVL131
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 269


 9463 062e 0100     		.2byte	0x1
 9464 0630 56       		.byte	0x56
 9465 0631 00000000 		.4byte	0
 9466 0635 00000000 		.4byte	0
 9467              	.LLST44:
 9468 0639 06000000 		.4byte	.LVL121
 9469 063d 52000000 		.4byte	.LVL126
 9470 0641 0200     		.2byte	0x2
 9471 0643 30       		.byte	0x30
 9472 0644 9F       		.byte	0x9f
 9473 0645 52000000 		.4byte	.LVL126
 9474 0649 D4000000 		.4byte	.LVL133
 9475 064d 0100     		.2byte	0x1
 9476 064f 57       		.byte	0x57
 9477 0650 00000000 		.4byte	0
 9478 0654 00000000 		.4byte	0
 9479              	.LLST45:
 9480 0658 00000000 		.4byte	.LVL136
 9481 065c 13000000 		.4byte	.LVL137-1
 9482 0660 0100     		.2byte	0x1
 9483 0662 50       		.byte	0x50
 9484 0663 13000000 		.4byte	.LVL137-1
 9485 0667 6C000000 		.4byte	.LVL142
 9486 066b 0100     		.2byte	0x1
 9487 066d 54       		.byte	0x54
 9488 066e 6C000000 		.4byte	.LVL142
 9489 0672 78000000 		.4byte	.LFE81
 9490 0676 0100     		.2byte	0x1
 9491 0678 50       		.byte	0x50
 9492 0679 00000000 		.4byte	0
 9493 067d 00000000 		.4byte	0
 9494              	.LLST47:
 9495 0681 00000000 		.4byte	.LVL143
 9496 0685 1B000000 		.4byte	.LVL145-1
 9497 0689 0100     		.2byte	0x1
 9498 068b 50       		.byte	0x50
 9499 068c 1B000000 		.4byte	.LVL145-1
 9500 0690 80000000 		.4byte	.LVL153
 9501 0694 0100     		.2byte	0x1
 9502 0696 54       		.byte	0x54
 9503 0697 80000000 		.4byte	.LVL153
 9504 069b 88000000 		.4byte	.LFE82
 9505 069f 0400     		.2byte	0x4
 9506 06a1 F3       		.byte	0xf3
 9507 06a2 01       		.uleb128 0x1
 9508 06a3 50       		.byte	0x50
 9509 06a4 9F       		.byte	0x9f
 9510 06a5 00000000 		.4byte	0
 9511 06a9 00000000 		.4byte	0
 9512              	.LLST48:
 9513 06ad 04000000 		.4byte	.LVL144
 9514 06b1 3A000000 		.4byte	.LVL146
 9515 06b5 0200     		.2byte	0x2
 9516 06b7 30       		.byte	0x30
 9517 06b8 9F       		.byte	0x9f
 9518 06b9 3A000000 		.4byte	.LVL146
 9519 06bd 68000000 		.4byte	.LVL149
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 270


 9520 06c1 0100     		.2byte	0x1
 9521 06c3 56       		.byte	0x56
 9522 06c4 68000000 		.4byte	.LVL149
 9523 06c8 78000000 		.4byte	.LVL151
 9524 06cc 0200     		.2byte	0x2
 9525 06ce 30       		.byte	0x30
 9526 06cf 9F       		.byte	0x9f
 9527 06d0 78000000 		.4byte	.LVL151
 9528 06d4 80000000 		.4byte	.LVL153
 9529 06d8 0100     		.2byte	0x1
 9530 06da 56       		.byte	0x56
 9531 06db 80000000 		.4byte	.LVL153
 9532 06df 88000000 		.4byte	.LFE82
 9533 06e3 0100     		.2byte	0x1
 9534 06e5 50       		.byte	0x50
 9535 06e6 00000000 		.4byte	0
 9536 06ea 00000000 		.4byte	0
 9537              	.LLST49:
 9538 06ee 04000000 		.4byte	.LVL144
 9539 06f2 1B000000 		.4byte	.LVL145-1
 9540 06f6 0100     		.2byte	0x1
 9541 06f8 50       		.byte	0x50
 9542 06f9 1B000000 		.4byte	.LVL145-1
 9543 06fd 80000000 		.4byte	.LVL153
 9544 0701 0100     		.2byte	0x1
 9545 0703 54       		.byte	0x54
 9546 0704 80000000 		.4byte	.LVL153
 9547 0708 88000000 		.4byte	.LFE82
 9548 070c 0400     		.2byte	0x4
 9549 070e F3       		.byte	0xf3
 9550 070f 01       		.uleb128 0x1
 9551 0710 50       		.byte	0x50
 9552 0711 9F       		.byte	0x9f
 9553 0712 00000000 		.4byte	0
 9554 0716 00000000 		.4byte	0
 9555              	.LLST50:
 9556 071a 78000000 		.4byte	.LVL151
 9557 071e 7C000000 		.4byte	.LVL152
 9558 0722 0100     		.2byte	0x1
 9559 0724 55       		.byte	0x55
 9560 0725 00000000 		.4byte	0
 9561 0729 00000000 		.4byte	0
 9562              	.LLST51:
 9563 072d 16000000 		.4byte	.LVL154
 9564 0731 41000000 		.4byte	.LVL155-1
 9565 0735 0100     		.2byte	0x1
 9566 0737 50       		.byte	0x50
 9567 0738 00000000 		.4byte	0
 9568 073c 00000000 		.4byte	0
 9569              	.LLST52:
 9570 0740 00000000 		.4byte	.LVL160
 9571 0744 0A000000 		.4byte	.LVL161
 9572 0748 0100     		.2byte	0x1
 9573 074a 50       		.byte	0x50
 9574 074b 00000000 		.4byte	0
 9575 074f 00000000 		.4byte	0
 9576              	.LLST53:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 271


 9577 0753 44000000 		.4byte	.LVL168
 9578 0757 4A000000 		.4byte	.LVL170
 9579 075b 0100     		.2byte	0x1
 9580 075d 54       		.byte	0x54
 9581 075e 70000000 		.4byte	.LVL172
 9582 0762 C4000000 		.4byte	.LVL177
 9583 0766 0100     		.2byte	0x1
 9584 0768 54       		.byte	0x54
 9585 0769 00000000 		.4byte	0
 9586 076d 00000000 		.4byte	0
 9587              	.LLST54:
 9588 0771 72000000 		.4byte	.LVL173
 9589 0775 83000000 		.4byte	.LVL174-1
 9590 0779 0100     		.2byte	0x1
 9591 077b 53       		.byte	0x53
 9592 077c 00000000 		.4byte	0
 9593 0780 00000000 		.4byte	0
 9594              	.LLST55:
 9595 0784 04000000 		.4byte	.LVL162
 9596 0788 44000000 		.4byte	.LVL168
 9597 078c 0200     		.2byte	0x2
 9598 078e 30       		.byte	0x30
 9599 078f 9F       		.byte	0x9f
 9600 0790 44000000 		.4byte	.LVL168
 9601 0794 48000000 		.4byte	.LVL169
 9602 0798 0100     		.2byte	0x1
 9603 079a 58       		.byte	0x58
 9604 079b 4A000000 		.4byte	.LVL170
 9605 079f 4E000000 		.4byte	.LVL171
 9606 07a3 0200     		.2byte	0x2
 9607 07a5 30       		.byte	0x30
 9608 07a6 9F       		.byte	0x9f
 9609 07a7 4E000000 		.4byte	.LVL171
 9610 07ab DC000000 		.4byte	.LVL178
 9611 07af 0100     		.2byte	0x1
 9612 07b1 58       		.byte	0x58
 9613 07b2 DC000000 		.4byte	.LVL178
 9614 07b6 EE000000 		.4byte	.LVL179
 9615 07ba 0200     		.2byte	0x2
 9616 07bc 30       		.byte	0x30
 9617 07bd 9F       		.byte	0x9f
 9618 07be EE000000 		.4byte	.LVL179
 9619 07c2 04010000 		.4byte	.LVL182
 9620 07c6 0100     		.2byte	0x1
 9621 07c8 58       		.byte	0x58
 9622 07c9 04010000 		.4byte	.LVL182
 9623 07cd 08010000 		.4byte	.LFE91
 9624 07d1 0100     		.2byte	0x1
 9625 07d3 50       		.byte	0x50
 9626 07d4 00000000 		.4byte	0
 9627 07d8 00000000 		.4byte	0
 9628              	.LLST56:
 9629 07dc 16000000 		.4byte	.LVL163
 9630 07e0 DC000000 		.4byte	.LVL178
 9631 07e4 0100     		.2byte	0x1
 9632 07e6 57       		.byte	0x57
 9633 07e7 EE000000 		.4byte	.LVL179
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 272


 9634 07eb F2000000 		.4byte	.LVL180
 9635 07ef 0100     		.2byte	0x1
 9636 07f1 57       		.byte	0x57
 9637 07f2 00000000 		.4byte	0
 9638 07f6 00000000 		.4byte	0
 9639              	.LLST57:
 9640 07fa 1E000000 		.4byte	.LVL164
 9641 07fe 2C000000 		.4byte	.LVL165
 9642 0802 0100     		.2byte	0x1
 9643 0804 52       		.byte	0x52
 9644 0805 2C000000 		.4byte	.LVL165
 9645 0809 32000000 		.4byte	.LVL166
 9646 080d 0500     		.2byte	0x5
 9647 080f 03       		.byte	0x3
 9648 0810 D0000000 		.4byte	pxOverflowDelayedTaskList
 9649 0814 00000000 		.4byte	0
 9650 0818 00000000 		.4byte	0
 9651              	.LLST58:
 9652 081c 02000000 		.4byte	.LVL183
 9653 0820 26000000 		.4byte	.LVL185
 9654 0824 0200     		.2byte	0x2
 9655 0826 30       		.byte	0x30
 9656 0827 9F       		.byte	0x9f
 9657 0828 26000000 		.4byte	.LVL185
 9658 082c 74000000 		.4byte	.LVL190
 9659 0830 0100     		.2byte	0x1
 9660 0832 55       		.byte	0x55
 9661 0833 74000000 		.4byte	.LVL190
 9662 0837 76000000 		.4byte	.LVL191
 9663 083b 0200     		.2byte	0x2
 9664 083d 30       		.byte	0x30
 9665 083e 9F       		.byte	0x9f
 9666 083f 76000000 		.4byte	.LVL191
 9667 0843 C2000000 		.4byte	.LVL199
 9668 0847 0100     		.2byte	0x1
 9669 0849 55       		.byte	0x55
 9670 084a C2000000 		.4byte	.LVL199
 9671 084e C6000000 		.4byte	.LVL200
 9672 0852 0200     		.2byte	0x2
 9673 0854 30       		.byte	0x30
 9674 0855 9F       		.byte	0x9f
 9675 0856 C6000000 		.4byte	.LVL200
 9676 085a C8000000 		.4byte	.LVL201
 9677 085e 0100     		.2byte	0x1
 9678 0860 55       		.byte	0x55
 9679 0861 00000000 		.4byte	0
 9680 0865 00000000 		.4byte	0
 9681              	.LLST59:
 9682 0869 02000000 		.4byte	.LVL183
 9683 086d AE000000 		.4byte	.LVL197
 9684 0871 0200     		.2byte	0x2
 9685 0873 30       		.byte	0x30
 9686 0874 9F       		.byte	0x9f
 9687 0875 AE000000 		.4byte	.LVL197
 9688 0879 C2000000 		.4byte	.LVL199
 9689 087d 0200     		.2byte	0x2
 9690 087f 31       		.byte	0x31
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 273


 9691 0880 9F       		.byte	0x9f
 9692 0881 C2000000 		.4byte	.LVL199
 9693 0885 C8000000 		.4byte	.LVL201
 9694 0889 0200     		.2byte	0x2
 9695 088b 30       		.byte	0x30
 9696 088c 9F       		.byte	0x9f
 9697 088d C8000000 		.4byte	.LVL201
 9698 0891 D0000000 		.4byte	.LVL203
 9699 0895 0100     		.2byte	0x1
 9700 0897 54       		.byte	0x54
 9701 0898 D0000000 		.4byte	.LVL203
 9702 089c D8000000 		.4byte	.LFE86
 9703 08a0 0100     		.2byte	0x1
 9704 08a2 50       		.byte	0x50
 9705 08a3 00000000 		.4byte	0
 9706 08a7 00000000 		.4byte	0
 9707              	.LLST60:
 9708 08ab 8A000000 		.4byte	.LVL193
 9709 08af 9A000000 		.4byte	.LVL195
 9710 08b3 0100     		.2byte	0x1
 9711 08b5 54       		.byte	0x54
 9712 08b6 9A000000 		.4byte	.LVL195
 9713 08ba 9C000000 		.4byte	.LVL196
 9714 08be 0300     		.2byte	0x3
 9715 08c0 74       		.byte	0x74
 9716 08c1 7F       		.sleb128 -1
 9717 08c2 9F       		.byte	0x9f
 9718 08c3 9C000000 		.4byte	.LVL196
 9719 08c7 C0000000 		.4byte	.LVL198
 9720 08cb 0100     		.2byte	0x1
 9721 08cd 54       		.byte	0x54
 9722 08ce C6000000 		.4byte	.LVL200
 9723 08d2 C8000000 		.4byte	.LVL201
 9724 08d6 0100     		.2byte	0x1
 9725 08d8 54       		.byte	0x54
 9726 08d9 00000000 		.4byte	0
 9727 08dd 00000000 		.4byte	0
 9728              	.LLST61:
 9729 08e1 00000000 		.4byte	.LVL204
 9730 08e5 09000000 		.4byte	.LVL206-1
 9731 08e9 0100     		.2byte	0x1
 9732 08eb 50       		.byte	0x50
 9733 08ec 09000000 		.4byte	.LVL206-1
 9734 08f0 62000000 		.4byte	.LVL213
 9735 08f4 0100     		.2byte	0x1
 9736 08f6 55       		.byte	0x55
 9737 08f7 62000000 		.4byte	.LVL213
 9738 08fb 6C000000 		.4byte	.LFE73
 9739 08ff 0400     		.2byte	0x4
 9740 0901 F3       		.byte	0xf3
 9741 0902 01       		.uleb128 0x1
 9742 0903 50       		.byte	0x50
 9743 0904 9F       		.byte	0x9f
 9744 0905 00000000 		.4byte	0
 9745 0909 00000000 		.4byte	0
 9746              	.LLST62:
 9747 090d 00000000 		.4byte	.LVL204
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 274


 9748 0911 09000000 		.4byte	.LVL206-1
 9749 0915 0100     		.2byte	0x1
 9750 0917 51       		.byte	0x51
 9751 0918 09000000 		.4byte	.LVL206-1
 9752 091c 62000000 		.4byte	.LVL213
 9753 0920 0100     		.2byte	0x1
 9754 0922 54       		.byte	0x54
 9755 0923 62000000 		.4byte	.LVL213
 9756 0927 6C000000 		.4byte	.LFE73
 9757 092b 0400     		.2byte	0x4
 9758 092d F3       		.byte	0xf3
 9759 092e 01       		.uleb128 0x1
 9760 092f 51       		.byte	0x51
 9761 0930 9F       		.byte	0x9f
 9762 0931 00000000 		.4byte	0
 9763 0935 00000000 		.4byte	0
 9764              	.LLST63:
 9765 0939 14000000 		.4byte	.LVL208
 9766 093d 49000000 		.4byte	.LVL211-1
 9767 0941 0100     		.2byte	0x1
 9768 0943 53       		.byte	0x53
 9769 0944 00000000 		.4byte	0
 9770 0948 00000000 		.4byte	0
 9771              	.LLST64:
 9772 094c 06000000 		.4byte	.LVL205
 9773 0950 3E000000 		.4byte	.LVL209
 9774 0954 0200     		.2byte	0x2
 9775 0956 30       		.byte	0x30
 9776 0957 9F       		.byte	0x9f
 9777 0958 3E000000 		.4byte	.LVL209
 9778 095c 49000000 		.4byte	.LVL211-1
 9779 0960 0100     		.2byte	0x1
 9780 0962 52       		.byte	0x52
 9781 0963 00000000 		.4byte	0
 9782 0967 00000000 		.4byte	0
 9783              	.LLST65:
 9784 096b 10000000 		.4byte	.LVL207
 9785 096f 46000000 		.4byte	.LVL210
 9786 0973 0100     		.2byte	0x1
 9787 0975 50       		.byte	0x50
 9788 0976 00000000 		.4byte	0
 9789 097a 00000000 		.4byte	0
 9790              	.LLST66:
 9791 097e 00000000 		.4byte	.LVL214
 9792 0982 09000000 		.4byte	.LVL216-1
 9793 0986 0100     		.2byte	0x1
 9794 0988 50       		.byte	0x50
 9795 0989 09000000 		.4byte	.LVL216-1
 9796 098d 18000000 		.4byte	.LVL219
 9797 0991 0100     		.2byte	0x1
 9798 0993 54       		.byte	0x54
 9799 0994 18000000 		.4byte	.LVL219
 9800 0998 1A000000 		.4byte	.LVL220
 9801 099c 0100     		.2byte	0x1
 9802 099e 50       		.byte	0x50
 9803 099f 1A000000 		.4byte	.LVL220
 9804 09a3 34000000 		.4byte	.LFE74
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 275


 9805 09a7 0400     		.2byte	0x4
 9806 09a9 F3       		.byte	0xf3
 9807 09aa 01       		.uleb128 0x1
 9808 09ab 50       		.byte	0x50
 9809 09ac 9F       		.byte	0x9f
 9810 09ad 00000000 		.4byte	0
 9811 09b1 00000000 		.4byte	0
 9812              	.LLST67:
 9813 09b5 02000000 		.4byte	.LVL215
 9814 09b9 16000000 		.4byte	.LVL218
 9815 09bd 0200     		.2byte	0x2
 9816 09bf 30       		.byte	0x30
 9817 09c0 9F       		.byte	0x9f
 9818 09c1 16000000 		.4byte	.LVL218
 9819 09c5 18000000 		.4byte	.LVL219
 9820 09c9 0100     		.2byte	0x1
 9821 09cb 50       		.byte	0x50
 9822 09cc 18000000 		.4byte	.LVL219
 9823 09d0 1A000000 		.4byte	.LVL220
 9824 09d4 0200     		.2byte	0x2
 9825 09d6 30       		.byte	0x30
 9826 09d7 9F       		.byte	0x9f
 9827 09d8 1A000000 		.4byte	.LVL220
 9828 09dc 34000000 		.4byte	.LFE74
 9829 09e0 0100     		.2byte	0x1
 9830 09e2 50       		.byte	0x50
 9831 09e3 00000000 		.4byte	0
 9832 09e7 00000000 		.4byte	0
 9833              	.LLST68:
 9834 09eb 2A000000 		.4byte	.LVL223
 9835 09ef 5C000000 		.4byte	.LVL224
 9836 09f3 0100     		.2byte	0x1
 9837 09f5 53       		.byte	0x53
 9838 09f6 00000000 		.4byte	0
 9839 09fa 00000000 		.4byte	0
 9840              	.LLST69:
 9841 09fe 20000000 		.4byte	.LVL221
 9842 0a02 24000000 		.4byte	.LVL222
 9843 0a06 0100     		.2byte	0x1
 9844 0a08 53       		.byte	0x53
 9845 0a09 00000000 		.4byte	0
 9846 0a0d 00000000 		.4byte	0
 9847              	.LLST70:
 9848 0a11 2A000000 		.4byte	.LVL223
 9849 0a15 5C000000 		.4byte	.LVL224
 9850 0a19 0B00     		.2byte	0xb
 9851 0a1b 73       		.byte	0x73
 9852 0a1c 00       		.sleb128 0
 9853 0a1d 44       		.byte	0x44
 9854 0a1e 1E       		.byte	0x1e
 9855 0a1f 03       		.byte	0x3
 9856 0a20 30000000 		.4byte	pxReadyTasksLists
 9857 0a24 22       		.byte	0x22
 9858 0a25 9F       		.byte	0x9f
 9859 0a26 00000000 		.4byte	0
 9860 0a2a 00000000 		.4byte	0
 9861              	.LLST71:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 276


 9862 0a2e 00000000 		.4byte	.LVL225
 9863 0a32 07000000 		.4byte	.LVL226-1
 9864 0a36 0100     		.2byte	0x1
 9865 0a38 50       		.byte	0x50
 9866 0a39 07000000 		.4byte	.LVL226-1
 9867 0a3d 10000000 		.4byte	.LVL227
 9868 0a41 0100     		.2byte	0x1
 9869 0a43 54       		.byte	0x54
 9870 0a44 00000000 		.4byte	0
 9871 0a48 00000000 		.4byte	0
 9872              	.LLST72:
 9873 0a4c 10000000 		.4byte	.LVL227
 9874 0a50 B8000000 		.4byte	.LVL238
 9875 0a54 0100     		.2byte	0x1
 9876 0a56 54       		.byte	0x54
 9877 0a57 00000000 		.4byte	0
 9878 0a5b 00000000 		.4byte	0
 9879              	.LLST73:
 9880 0a5f 00000000 		.4byte	.LVL239
 9881 0a63 0F000000 		.4byte	.LVL241-1
 9882 0a67 0100     		.2byte	0x1
 9883 0a69 50       		.byte	0x50
 9884 0a6a 0F000000 		.4byte	.LVL241-1
 9885 0a6e 20000000 		.4byte	.LFE93
 9886 0a72 0400     		.2byte	0x4
 9887 0a74 F3       		.byte	0xf3
 9888 0a75 01       		.uleb128 0x1
 9889 0a76 50       		.byte	0x50
 9890 0a77 9F       		.byte	0x9f
 9891 0a78 00000000 		.4byte	0
 9892 0a7c 00000000 		.4byte	0
 9893              	.LLST74:
 9894 0a80 00000000 		.4byte	.LVL239
 9895 0a84 0A000000 		.4byte	.LVL240
 9896 0a88 0100     		.2byte	0x1
 9897 0a8a 51       		.byte	0x51
 9898 0a8b 0A000000 		.4byte	.LVL240
 9899 0a8f 1A000000 		.4byte	.LVL243
 9900 0a93 0100     		.2byte	0x1
 9901 0a95 54       		.byte	0x54
 9902 0a96 1A000000 		.4byte	.LVL243
 9903 0a9a 20000000 		.4byte	.LFE93
 9904 0a9e 0400     		.2byte	0x4
 9905 0aa0 F3       		.byte	0xf3
 9906 0aa1 01       		.uleb128 0x1
 9907 0aa2 51       		.byte	0x51
 9908 0aa3 9F       		.byte	0x9f
 9909 0aa4 00000000 		.4byte	0
 9910 0aa8 00000000 		.4byte	0
 9911              	.LLST75:
 9912 0aac 00000000 		.4byte	.LVL244
 9913 0ab0 19000000 		.4byte	.LVL247-1
 9914 0ab4 0100     		.2byte	0x1
 9915 0ab6 50       		.byte	0x50
 9916 0ab7 19000000 		.4byte	.LVL247-1
 9917 0abb 28000000 		.4byte	.LFE94
 9918 0abf 0400     		.2byte	0x4
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 277


 9919 0ac1 F3       		.byte	0xf3
 9920 0ac2 01       		.uleb128 0x1
 9921 0ac3 50       		.byte	0x50
 9922 0ac4 9F       		.byte	0x9f
 9923 0ac5 00000000 		.4byte	0
 9924 0ac9 00000000 		.4byte	0
 9925              	.LLST76:
 9926 0acd 00000000 		.4byte	.LVL244
 9927 0ad1 0E000000 		.4byte	.LVL246
 9928 0ad5 0100     		.2byte	0x1
 9929 0ad7 51       		.byte	0x51
 9930 0ad8 0E000000 		.4byte	.LVL246
 9931 0adc 28000000 		.4byte	.LFE94
 9932 0ae0 0400     		.2byte	0x4
 9933 0ae2 F3       		.byte	0xf3
 9934 0ae3 01       		.uleb128 0x1
 9935 0ae4 51       		.byte	0x51
 9936 0ae5 9F       		.byte	0x9f
 9937 0ae6 00000000 		.4byte	0
 9938 0aea 00000000 		.4byte	0
 9939              	.LLST77:
 9940 0aee 00000000 		.4byte	.LVL244
 9941 0af2 0A000000 		.4byte	.LVL245
 9942 0af6 0100     		.2byte	0x1
 9943 0af8 52       		.byte	0x52
 9944 0af9 0A000000 		.4byte	.LVL245
 9945 0afd 24000000 		.4byte	.LVL249
 9946 0b01 0100     		.2byte	0x1
 9947 0b03 54       		.byte	0x54
 9948 0b04 24000000 		.4byte	.LVL249
 9949 0b08 28000000 		.4byte	.LFE94
 9950 0b0c 0400     		.2byte	0x4
 9951 0b0e F3       		.byte	0xf3
 9952 0b0f 01       		.uleb128 0x1
 9953 0b10 52       		.byte	0x52
 9954 0b11 9F       		.byte	0x9f
 9955 0b12 00000000 		.4byte	0
 9956 0b16 00000000 		.4byte	0
 9957              	.LLST78:
 9958 0b1a 00000000 		.4byte	.LVL250
 9959 0b1e 0C000000 		.4byte	.LVL252
 9960 0b22 0100     		.2byte	0x1
 9961 0b24 50       		.byte	0x50
 9962 0b25 0C000000 		.4byte	.LVL252
 9963 0b29 74000000 		.4byte	.LFE95
 9964 0b2d 0400     		.2byte	0x4
 9965 0b2f F3       		.byte	0xf3
 9966 0b30 01       		.uleb128 0x1
 9967 0b31 50       		.byte	0x50
 9968 0b32 9F       		.byte	0x9f
 9969 0b33 00000000 		.4byte	0
 9970 0b37 00000000 		.4byte	0
 9971              	.LLST79:
 9972 0b3b 06000000 		.4byte	.LVL251
 9973 0b3f 6A000000 		.4byte	.LVL260
 9974 0b43 0100     		.2byte	0x1
 9975 0b45 54       		.byte	0x54
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 278


 9976 0b46 00000000 		.4byte	0
 9977 0b4a 00000000 		.4byte	0
 9978              	.LLST80:
 9979 0b4e 5C000000 		.4byte	.LVL257
 9980 0b52 66000000 		.4byte	.LVL258
 9981 0b56 0200     		.2byte	0x2
 9982 0b58 31       		.byte	0x31
 9983 0b59 9F       		.byte	0x9f
 9984 0b5a 68000000 		.4byte	.LVL259
 9985 0b5e 74000000 		.4byte	.LFE95
 9986 0b62 0100     		.2byte	0x1
 9987 0b64 50       		.byte	0x50
 9988 0b65 00000000 		.4byte	0
 9989 0b69 00000000 		.4byte	0
 9990              	.LLST81:
 9991 0b6d 00000000 		.4byte	.LVL261
 9992 0b71 0D000000 		.4byte	.LVL264-1
 9993 0b75 0100     		.2byte	0x1
 9994 0b77 50       		.byte	0x50
 9995 0b78 0D000000 		.4byte	.LVL264-1
 9996 0b7c 54000000 		.4byte	.LFE96
 9997 0b80 0400     		.2byte	0x4
 9998 0b82 F3       		.byte	0xf3
 9999 0b83 01       		.uleb128 0x1
 10000 0b84 50       		.byte	0x50
 10001 0b85 9F       		.byte	0x9f
 10002 0b86 00000000 		.4byte	0
 10003 0b8a 00000000 		.4byte	0
 10004              	.LLST82:
 10005 0b8e 00000000 		.4byte	.LVL261
 10006 0b92 06000000 		.4byte	.LVL262
 10007 0b96 0100     		.2byte	0x1
 10008 0b98 51       		.byte	0x51
 10009 0b99 06000000 		.4byte	.LVL262
 10010 0b9d 54000000 		.4byte	.LFE96
 10011 0ba1 0400     		.2byte	0x4
 10012 0ba3 F3       		.byte	0xf3
 10013 0ba4 01       		.uleb128 0x1
 10014 0ba5 51       		.byte	0x51
 10015 0ba6 9F       		.byte	0x9f
 10016 0ba7 00000000 		.4byte	0
 10017 0bab 00000000 		.4byte	0
 10018              	.LLST83:
 10019 0baf 0A000000 		.4byte	.LVL263
 10020 0bb3 50000000 		.4byte	.LVL267
 10021 0bb7 0100     		.2byte	0x1
 10022 0bb9 55       		.byte	0x55
 10023 0bba 00000000 		.4byte	0
 10024 0bbe 00000000 		.4byte	0
 10025              	.LLST84:
 10026 0bc2 00000000 		.4byte	.LVL268
 10027 0bc6 07000000 		.4byte	.LVL269-1
 10028 0bca 0100     		.2byte	0x1
 10029 0bcc 50       		.byte	0x50
 10030 0bcd 07000000 		.4byte	.LVL269-1
 10031 0bd1 1C000000 		.4byte	.LVL271
 10032 0bd5 0100     		.2byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 279


 10033 0bd7 54       		.byte	0x54
 10034 0bd8 1C000000 		.4byte	.LVL271
 10035 0bdc 20000000 		.4byte	.LFE97
 10036 0be0 0400     		.2byte	0x4
 10037 0be2 F3       		.byte	0xf3
 10038 0be3 01       		.uleb128 0x1
 10039 0be4 50       		.byte	0x50
 10040 0be5 9F       		.byte	0x9f
 10041 0be6 00000000 		.4byte	0
 10042 0bea 00000000 		.4byte	0
 10043              	.LLST85:
 10044 0bee 00000000 		.4byte	.LVL273
 10045 0bf2 09000000 		.4byte	.LVL274-1
 10046 0bf6 0100     		.2byte	0x1
 10047 0bf8 50       		.byte	0x50
 10048 0bf9 09000000 		.4byte	.LVL274-1
 10049 0bfd 3C000000 		.4byte	.LVL279
 10050 0c01 0100     		.2byte	0x1
 10051 0c03 54       		.byte	0x54
 10052 0c04 3C000000 		.4byte	.LVL279
 10053 0c08 3E000000 		.4byte	.LVL280
 10054 0c0c 0400     		.2byte	0x4
 10055 0c0e F3       		.byte	0xf3
 10056 0c0f 01       		.uleb128 0x1
 10057 0c10 50       		.byte	0x50
 10058 0c11 9F       		.byte	0x9f
 10059 0c12 3E000000 		.4byte	.LVL280
 10060 0c16 44000000 		.4byte	.LVL282
 10061 0c1a 0100     		.2byte	0x1
 10062 0c1c 54       		.byte	0x54
 10063 0c1d 44000000 		.4byte	.LVL282
 10064 0c21 46000000 		.4byte	.LVL283
 10065 0c25 0400     		.2byte	0x4
 10066 0c27 F3       		.byte	0xf3
 10067 0c28 01       		.uleb128 0x1
 10068 0c29 50       		.byte	0x50
 10069 0c2a 9F       		.byte	0x9f
 10070 0c2b 46000000 		.4byte	.LVL283
 10071 0c2f 48000000 		.4byte	.LVL284
 10072 0c33 0100     		.2byte	0x1
 10073 0c35 54       		.byte	0x54
 10074 0c36 48000000 		.4byte	.LVL284
 10075 0c3a 4A000000 		.4byte	.LVL285
 10076 0c3e 0400     		.2byte	0x4
 10077 0c40 F3       		.byte	0xf3
 10078 0c41 01       		.uleb128 0x1
 10079 0c42 50       		.byte	0x50
 10080 0c43 9F       		.byte	0x9f
 10081 0c44 4A000000 		.4byte	.LVL285
 10082 0c48 4C000000 		.4byte	.LVL286
 10083 0c4c 0100     		.2byte	0x1
 10084 0c4e 54       		.byte	0x54
 10085 0c4f 4C000000 		.4byte	.LVL286
 10086 0c53 58000000 		.4byte	.LFE99
 10087 0c57 0400     		.2byte	0x4
 10088 0c59 F3       		.byte	0xf3
 10089 0c5a 01       		.uleb128 0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 280


 10090 0c5b 50       		.byte	0x50
 10091 0c5c 9F       		.byte	0x9f
 10092 0c5d 00000000 		.4byte	0
 10093 0c61 00000000 		.4byte	0
 10094              	.LLST86:
 10095 0c65 00000000 		.4byte	.LVL273
 10096 0c69 09000000 		.4byte	.LVL274-1
 10097 0c6d 0100     		.2byte	0x1
 10098 0c6f 51       		.byte	0x51
 10099 0c70 09000000 		.4byte	.LVL274-1
 10100 0c74 54000000 		.4byte	.LVL288
 10101 0c78 0100     		.2byte	0x1
 10102 0c7a 55       		.byte	0x55
 10103 0c7b 54000000 		.4byte	.LVL288
 10104 0c7f 58000000 		.4byte	.LFE99
 10105 0c83 0400     		.2byte	0x4
 10106 0c85 F3       		.byte	0xf3
 10107 0c86 01       		.uleb128 0x1
 10108 0c87 51       		.byte	0x51
 10109 0c88 9F       		.byte	0x9f
 10110 0c89 00000000 		.4byte	0
 10111 0c8d 00000000 		.4byte	0
 10112              	.LLST87:
 10113 0c91 3A000000 		.4byte	.LVL278
 10114 0c95 3E000000 		.4byte	.LVL280
 10115 0c99 0200     		.2byte	0x2
 10116 0c9b 30       		.byte	0x30
 10117 0c9c 9F       		.byte	0x9f
 10118 0c9d 42000000 		.4byte	.LVL281
 10119 0ca1 46000000 		.4byte	.LVL283
 10120 0ca5 0200     		.2byte	0x2
 10121 0ca7 31       		.byte	0x31
 10122 0ca8 9F       		.byte	0x9f
 10123 0ca9 4C000000 		.4byte	.LVL286
 10124 0cad 54000000 		.4byte	.LVL288
 10125 0cb1 0100     		.2byte	0x1
 10126 0cb3 54       		.byte	0x54
 10127 0cb4 54000000 		.4byte	.LVL288
 10128 0cb8 58000000 		.4byte	.LFE99
 10129 0cbc 0100     		.2byte	0x1
 10130 0cbe 50       		.byte	0x50
 10131 0cbf 00000000 		.4byte	0
 10132 0cc3 00000000 		.4byte	0
 10133              	.LLST88:
 10134 0cc7 10000000 		.4byte	.LVL275
 10135 0ccb 39000000 		.4byte	.LVL278-1
 10136 0ccf 0100     		.2byte	0x1
 10137 0cd1 51       		.byte	0x51
 10138 0cd2 3E000000 		.4byte	.LVL280
 10139 0cd6 4C000000 		.4byte	.LVL286
 10140 0cda 0100     		.2byte	0x1
 10141 0cdc 51       		.byte	0x51
 10142 0cdd 00000000 		.4byte	0
 10143 0ce1 00000000 		.4byte	0
 10144              	.LLST89:
 10145 0ce5 14000000 		.4byte	.LVL276
 10146 0ce9 36000000 		.4byte	.LVL277
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 281


 10147 0ced 0100     		.2byte	0x1
 10148 0cef 50       		.byte	0x50
 10149 0cf0 36000000 		.4byte	.LVL277
 10150 0cf4 39000000 		.4byte	.LVL278-1
 10151 0cf8 0600     		.2byte	0x6
 10152 0cfa 71       		.byte	0x71
 10153 0cfb 00       		.sleb128 0
 10154 0cfc 72       		.byte	0x72
 10155 0cfd 00       		.sleb128 0
 10156 0cfe 1C       		.byte	0x1c
 10157 0cff 9F       		.byte	0x9f
 10158 0d00 3E000000 		.4byte	.LVL280
 10159 0d04 4C000000 		.4byte	.LVL286
 10160 0d08 0100     		.2byte	0x1
 10161 0d0a 50       		.byte	0x50
 10162 0d0b 00000000 		.4byte	0
 10163 0d0f 00000000 		.4byte	0
 10164              	.LLST90:
 10165 0d13 00000000 		.4byte	.LVL289
 10166 0d17 0C000000 		.4byte	.LVL290
 10167 0d1b 0100     		.2byte	0x1
 10168 0d1d 50       		.byte	0x50
 10169 0d1e 00000000 		.4byte	0
 10170 0d22 00000000 		.4byte	0
 10171              	.LLST91:
 10172 0d26 0C000000 		.4byte	.LVL290
 10173 0d2a 11000000 		.4byte	.LVL291-1
 10174 0d2e 0100     		.2byte	0x1
 10175 0d30 53       		.byte	0x53
 10176 0d31 00000000 		.4byte	0
 10177 0d35 00000000 		.4byte	0
 10178              	.LLST92:
 10179 0d39 0C000000 		.4byte	.LVL290
 10180 0d3d 11000000 		.4byte	.LVL291-1
 10181 0d41 0200     		.2byte	0x2
 10182 0d43 73       		.byte	0x73
 10183 0d44 30       		.sleb128 48
 10184 0d45 00000000 		.4byte	0
 10185 0d49 00000000 		.4byte	0
 10186              	.LLST93:
 10187 0d4d 00000000 		.4byte	.LVL293
 10188 0d51 2C000000 		.4byte	.LVL294
 10189 0d55 0100     		.2byte	0x1
 10190 0d57 50       		.byte	0x50
 10191 0d58 2C000000 		.4byte	.LVL294
 10192 0d5c 4B000000 		.4byte	.LVL295-1
 10193 0d60 0100     		.2byte	0x1
 10194 0d62 53       		.byte	0x53
 10195 0d63 4B000000 		.4byte	.LVL295-1
 10196 0d67 7C000000 		.4byte	.LVL296
 10197 0d6b 0100     		.2byte	0x1
 10198 0d6d 54       		.byte	0x54
 10199 0d6e 7C000000 		.4byte	.LVL296
 10200 0d72 9E000000 		.4byte	.LVL298
 10201 0d76 0300     		.2byte	0x3
 10202 0d78 75       		.byte	0x75
 10203 0d79 7C       		.sleb128 -4
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 282


 10204 0d7a 9F       		.byte	0x9f
 10205 0d7b 9E000000 		.4byte	.LVL298
 10206 0d7f AC000000 		.4byte	.LVL299
 10207 0d83 0100     		.2byte	0x1
 10208 0d85 53       		.byte	0x53
 10209 0d86 AC000000 		.4byte	.LVL299
 10210 0d8a BC000000 		.4byte	.LVL300
 10211 0d8e 0100     		.2byte	0x1
 10212 0d90 50       		.byte	0x50
 10213 0d91 BC000000 		.4byte	.LVL300
 10214 0d95 BE000000 		.4byte	.LVL301
 10215 0d99 0400     		.2byte	0x4
 10216 0d9b F3       		.byte	0xf3
 10217 0d9c 01       		.uleb128 0x1
 10218 0d9d 50       		.byte	0x50
 10219 0d9e 9F       		.byte	0x9f
 10220 0d9f BE000000 		.4byte	.LVL301
 10221 0da3 C0000000 		.4byte	.LVL302
 10222 0da7 0100     		.2byte	0x1
 10223 0da9 50       		.byte	0x50
 10224 0daa C0000000 		.4byte	.LVL302
 10225 0dae C2000000 		.4byte	.LVL303
 10226 0db2 0400     		.2byte	0x4
 10227 0db4 F3       		.byte	0xf3
 10228 0db5 01       		.uleb128 0x1
 10229 0db6 50       		.byte	0x50
 10230 0db7 9F       		.byte	0x9f
 10231 0db8 C2000000 		.4byte	.LVL303
 10232 0dbc C4000000 		.4byte	.LVL304
 10233 0dc0 0100     		.2byte	0x1
 10234 0dc2 50       		.byte	0x50
 10235 0dc3 C4000000 		.4byte	.LVL304
 10236 0dc7 D0000000 		.4byte	.LFE109
 10237 0dcb 0400     		.2byte	0x4
 10238 0dcd F3       		.byte	0xf3
 10239 0dce 01       		.uleb128 0x1
 10240 0dcf 50       		.byte	0x50
 10241 0dd0 9F       		.byte	0x9f
 10242 0dd1 00000000 		.4byte	0
 10243 0dd5 00000000 		.4byte	0
 10244              	.LLST94:
 10245 0dd9 00000000 		.4byte	.LVL293
 10246 0ddd 2C000000 		.4byte	.LVL294
 10247 0de1 0100     		.2byte	0x1
 10248 0de3 50       		.byte	0x50
 10249 0de4 2C000000 		.4byte	.LVL294
 10250 0de8 4B000000 		.4byte	.LVL295-1
 10251 0dec 0100     		.2byte	0x1
 10252 0dee 53       		.byte	0x53
 10253 0def 4B000000 		.4byte	.LVL295-1
 10254 0df3 7C000000 		.4byte	.LVL296
 10255 0df7 0100     		.2byte	0x1
 10256 0df9 54       		.byte	0x54
 10257 0dfa 7C000000 		.4byte	.LVL296
 10258 0dfe 9E000000 		.4byte	.LVL298
 10259 0e02 0300     		.2byte	0x3
 10260 0e04 75       		.byte	0x75
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 283


 10261 0e05 7C       		.sleb128 -4
 10262 0e06 9F       		.byte	0x9f
 10263 0e07 9E000000 		.4byte	.LVL298
 10264 0e0b AC000000 		.4byte	.LVL299
 10265 0e0f 0100     		.2byte	0x1
 10266 0e11 53       		.byte	0x53
 10267 0e12 AC000000 		.4byte	.LVL299
 10268 0e16 BC000000 		.4byte	.LVL300
 10269 0e1a 0100     		.2byte	0x1
 10270 0e1c 50       		.byte	0x50
 10271 0e1d BC000000 		.4byte	.LVL300
 10272 0e21 BE000000 		.4byte	.LVL301
 10273 0e25 0400     		.2byte	0x4
 10274 0e27 F3       		.byte	0xf3
 10275 0e28 01       		.uleb128 0x1
 10276 0e29 50       		.byte	0x50
 10277 0e2a 9F       		.byte	0x9f
 10278 0e2b BE000000 		.4byte	.LVL301
 10279 0e2f C0000000 		.4byte	.LVL302
 10280 0e33 0100     		.2byte	0x1
 10281 0e35 50       		.byte	0x50
 10282 0e36 C0000000 		.4byte	.LVL302
 10283 0e3a C2000000 		.4byte	.LVL303
 10284 0e3e 0400     		.2byte	0x4
 10285 0e40 F3       		.byte	0xf3
 10286 0e41 01       		.uleb128 0x1
 10287 0e42 50       		.byte	0x50
 10288 0e43 9F       		.byte	0x9f
 10289 0e44 C2000000 		.4byte	.LVL303
 10290 0e48 C4000000 		.4byte	.LVL304
 10291 0e4c 0100     		.2byte	0x1
 10292 0e4e 50       		.byte	0x50
 10293 0e4f C4000000 		.4byte	.LVL304
 10294 0e53 D0000000 		.4byte	.LFE109
 10295 0e57 0400     		.2byte	0x4
 10296 0e59 F3       		.byte	0xf3
 10297 0e5a 01       		.uleb128 0x1
 10298 0e5b 50       		.byte	0x50
 10299 0e5c 9F       		.byte	0x9f
 10300 0e5d 00000000 		.4byte	0
 10301 0e61 00000000 		.4byte	0
 10302              	.LLST95:
 10303 0e65 00000000 		.4byte	.LVL293
 10304 0e69 C0000000 		.4byte	.LVL302
 10305 0e6d 0200     		.2byte	0x2
 10306 0e6f 30       		.byte	0x30
 10307 0e70 9F       		.byte	0x9f
 10308 0e71 C0000000 		.4byte	.LVL302
 10309 0e75 C2000000 		.4byte	.LVL303
 10310 0e79 0100     		.2byte	0x1
 10311 0e7b 50       		.byte	0x50
 10312 0e7c C2000000 		.4byte	.LVL303
 10313 0e80 C4000000 		.4byte	.LVL304
 10314 0e84 0200     		.2byte	0x2
 10315 0e86 30       		.byte	0x30
 10316 0e87 9F       		.byte	0x9f
 10317 0e88 C4000000 		.4byte	.LVL304
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 284


 10318 0e8c D0000000 		.4byte	.LFE109
 10319 0e90 0100     		.2byte	0x1
 10320 0e92 50       		.byte	0x50
 10321 0e93 00000000 		.4byte	0
 10322 0e97 00000000 		.4byte	0
 10323              	.LLST96:
 10324 0e9b 00000000 		.4byte	.LVL305
 10325 0e9f 10000000 		.4byte	.LVL306
 10326 0ea3 0100     		.2byte	0x1
 10327 0ea5 50       		.byte	0x50
 10328 0ea6 10000000 		.4byte	.LVL306
 10329 0eaa 21000000 		.4byte	.LVL307-1
 10330 0eae 0100     		.2byte	0x1
 10331 0eb0 53       		.byte	0x53
 10332 0eb1 21000000 		.4byte	.LVL307-1
 10333 0eb5 52000000 		.4byte	.LVL308
 10334 0eb9 0100     		.2byte	0x1
 10335 0ebb 54       		.byte	0x54
 10336 0ebc 52000000 		.4byte	.LVL308
 10337 0ec0 76000000 		.4byte	.LVL310
 10338 0ec4 0300     		.2byte	0x3
 10339 0ec6 75       		.byte	0x75
 10340 0ec7 7C       		.sleb128 -4
 10341 0ec8 9F       		.byte	0x9f
 10342 0ec9 76000000 		.4byte	.LVL310
 10343 0ecd 78000000 		.4byte	.LVL311
 10344 0ed1 0100     		.2byte	0x1
 10345 0ed3 50       		.byte	0x50
 10346 0ed4 78000000 		.4byte	.LVL311
 10347 0ed8 7A000000 		.4byte	.LVL312
 10348 0edc 0400     		.2byte	0x4
 10349 0ede F3       		.byte	0xf3
 10350 0edf 01       		.uleb128 0x1
 10351 0ee0 50       		.byte	0x50
 10352 0ee1 9F       		.byte	0x9f
 10353 0ee2 7A000000 		.4byte	.LVL312
 10354 0ee6 82000000 		.4byte	.LVL315
 10355 0eea 0100     		.2byte	0x1
 10356 0eec 53       		.byte	0x53
 10357 0eed 82000000 		.4byte	.LVL315
 10358 0ef1 88000000 		.4byte	.LFE110
 10359 0ef5 0400     		.2byte	0x4
 10360 0ef7 F3       		.byte	0xf3
 10361 0ef8 01       		.uleb128 0x1
 10362 0ef9 50       		.byte	0x50
 10363 0efa 9F       		.byte	0x9f
 10364 0efb 00000000 		.4byte	0
 10365 0eff 00000000 		.4byte	0
 10366              	.LLST97:
 10367 0f03 00000000 		.4byte	.LVL305
 10368 0f07 10000000 		.4byte	.LVL306
 10369 0f0b 0100     		.2byte	0x1
 10370 0f0d 50       		.byte	0x50
 10371 0f0e 10000000 		.4byte	.LVL306
 10372 0f12 21000000 		.4byte	.LVL307-1
 10373 0f16 0100     		.2byte	0x1
 10374 0f18 53       		.byte	0x53
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 285


 10375 0f19 21000000 		.4byte	.LVL307-1
 10376 0f1d 52000000 		.4byte	.LVL308
 10377 0f21 0100     		.2byte	0x1
 10378 0f23 54       		.byte	0x54
 10379 0f24 52000000 		.4byte	.LVL308
 10380 0f28 76000000 		.4byte	.LVL310
 10381 0f2c 0300     		.2byte	0x3
 10382 0f2e 75       		.byte	0x75
 10383 0f2f 7C       		.sleb128 -4
 10384 0f30 9F       		.byte	0x9f
 10385 0f31 76000000 		.4byte	.LVL310
 10386 0f35 78000000 		.4byte	.LVL311
 10387 0f39 0100     		.2byte	0x1
 10388 0f3b 50       		.byte	0x50
 10389 0f3c 78000000 		.4byte	.LVL311
 10390 0f40 7A000000 		.4byte	.LVL312
 10391 0f44 0400     		.2byte	0x4
 10392 0f46 F3       		.byte	0xf3
 10393 0f47 01       		.uleb128 0x1
 10394 0f48 50       		.byte	0x50
 10395 0f49 9F       		.byte	0x9f
 10396 0f4a 7A000000 		.4byte	.LVL312
 10397 0f4e 82000000 		.4byte	.LVL315
 10398 0f52 0100     		.2byte	0x1
 10399 0f54 53       		.byte	0x53
 10400 0f55 82000000 		.4byte	.LVL315
 10401 0f59 88000000 		.4byte	.LFE110
 10402 0f5d 0400     		.2byte	0x4
 10403 0f5f F3       		.byte	0xf3
 10404 0f60 01       		.uleb128 0x1
 10405 0f61 50       		.byte	0x50
 10406 0f62 9F       		.byte	0x9f
 10407 0f63 00000000 		.4byte	0
 10408 0f67 00000000 		.4byte	0
 10409              	.LLST98:
 10410 0f6b 00000000 		.4byte	.LVL305
 10411 0f6f 72000000 		.4byte	.LVL309
 10412 0f73 0200     		.2byte	0x2
 10413 0f75 30       		.byte	0x30
 10414 0f76 9F       		.byte	0x9f
 10415 0f77 72000000 		.4byte	.LVL309
 10416 0f7b 76000000 		.4byte	.LVL310
 10417 0f7f 0200     		.2byte	0x2
 10418 0f81 31       		.byte	0x31
 10419 0f82 9F       		.byte	0x9f
 10420 0f83 76000000 		.4byte	.LVL310
 10421 0f87 78000000 		.4byte	.LVL311
 10422 0f8b 0200     		.2byte	0x2
 10423 0f8d 30       		.byte	0x30
 10424 0f8e 9F       		.byte	0x9f
 10425 0f8f 78000000 		.4byte	.LVL311
 10426 0f93 7A000000 		.4byte	.LVL312
 10427 0f97 0100     		.2byte	0x1
 10428 0f99 50       		.byte	0x50
 10429 0f9a 7A000000 		.4byte	.LVL312
 10430 0f9e 80000000 		.4byte	.LVL314
 10431 0fa2 0200     		.2byte	0x2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 286


 10432 0fa4 30       		.byte	0x30
 10433 0fa5 9F       		.byte	0x9f
 10434 0fa6 80000000 		.4byte	.LVL314
 10435 0faa 88000000 		.4byte	.LFE110
 10436 0fae 0100     		.2byte	0x1
 10437 0fb0 50       		.byte	0x50
 10438 0fb1 00000000 		.4byte	0
 10439 0fb5 00000000 		.4byte	0
 10440              	.LLST99:
 10441 0fb9 00000000 		.4byte	.LVL316
 10442 0fbd 18000000 		.4byte	.LVL319
 10443 0fc1 0100     		.2byte	0x1
 10444 0fc3 50       		.byte	0x50
 10445 0fc4 18000000 		.4byte	.LVL319
 10446 0fc8 4B000000 		.4byte	.LVL323-1
 10447 0fcc 0100     		.2byte	0x1
 10448 0fce 53       		.byte	0x53
 10449 0fcf 4B000000 		.4byte	.LVL323-1
 10450 0fd3 94000000 		.4byte	.LVL324
 10451 0fd7 0100     		.2byte	0x1
 10452 0fd9 54       		.byte	0x54
 10453 0fda 94000000 		.4byte	.LVL324
 10454 0fde 96000000 		.4byte	.LVL325
 10455 0fe2 0400     		.2byte	0x4
 10456 0fe4 F3       		.byte	0xf3
 10457 0fe5 01       		.uleb128 0x1
 10458 0fe6 50       		.byte	0x50
 10459 0fe7 9F       		.byte	0x9f
 10460 0fe8 96000000 		.4byte	.LVL325
 10461 0fec A0000000 		.4byte	.LFE111
 10462 0ff0 0100     		.2byte	0x1
 10463 0ff2 50       		.byte	0x50
 10464 0ff3 00000000 		.4byte	0
 10465 0ff7 00000000 		.4byte	0
 10466              	.LLST100:
 10467 0ffb 00000000 		.4byte	.LVL316
 10468 0fff 12000000 		.4byte	.LVL318
 10469 1003 0100     		.2byte	0x1
 10470 1005 51       		.byte	0x51
 10471 1006 12000000 		.4byte	.LVL318
 10472 100a 96000000 		.4byte	.LVL325
 10473 100e 0400     		.2byte	0x4
 10474 1010 F3       		.byte	0xf3
 10475 1011 01       		.uleb128 0x1
 10476 1012 51       		.byte	0x51
 10477 1013 9F       		.byte	0x9f
 10478 1014 96000000 		.4byte	.LVL325
 10479 1018 A0000000 		.4byte	.LFE111
 10480 101c 0100     		.2byte	0x1
 10481 101e 51       		.byte	0x51
 10482 101f 00000000 		.4byte	0
 10483 1023 00000000 		.4byte	0
 10484              	.LLST101:
 10485 1027 00000000 		.4byte	.LVL316
 10486 102b 18000000 		.4byte	.LVL319
 10487 102f 0100     		.2byte	0x1
 10488 1031 50       		.byte	0x50
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 287


 10489 1032 18000000 		.4byte	.LVL319
 10490 1036 4B000000 		.4byte	.LVL323-1
 10491 103a 0100     		.2byte	0x1
 10492 103c 53       		.byte	0x53
 10493 103d 4B000000 		.4byte	.LVL323-1
 10494 1041 94000000 		.4byte	.LVL324
 10495 1045 0100     		.2byte	0x1
 10496 1047 54       		.byte	0x54
 10497 1048 94000000 		.4byte	.LVL324
 10498 104c 96000000 		.4byte	.LVL325
 10499 1050 0400     		.2byte	0x4
 10500 1052 F3       		.byte	0xf3
 10501 1053 01       		.uleb128 0x1
 10502 1054 50       		.byte	0x50
 10503 1055 9F       		.byte	0x9f
 10504 1056 96000000 		.4byte	.LVL325
 10505 105a A0000000 		.4byte	.LFE111
 10506 105e 0100     		.2byte	0x1
 10507 1060 50       		.byte	0x50
 10508 1061 00000000 		.4byte	0
 10509 1065 00000000 		.4byte	0
 10510              	.LLST102:
 10511 1069 1C000000 		.4byte	.LVL320
 10512 106d 30000000 		.4byte	.LVL322
 10513 1071 0100     		.2byte	0x1
 10514 1073 51       		.byte	0x51
 10515 1074 00000000 		.4byte	0
 10516 1078 00000000 		.4byte	0
 10517              	.LLST103:
 10518 107c 10000000 		.4byte	.LVL317
 10519 1080 28000000 		.4byte	.LVL321
 10520 1084 0100     		.2byte	0x1
 10521 1086 52       		.byte	0x52
 10522 1087 28000000 		.4byte	.LVL321
 10523 108b 4B000000 		.4byte	.LVL323-1
 10524 108f 0200     		.2byte	0x2
 10525 1091 73       		.byte	0x73
 10526 1092 2C       		.sleb128 44
 10527 1093 00000000 		.4byte	0
 10528 1097 00000000 		.4byte	0
 10529              	.LLST104:
 10530 109b 00000000 		.4byte	.LVL327
 10531 109f 09000000 		.4byte	.LVL328-1
 10532 10a3 0100     		.2byte	0x1
 10533 10a5 50       		.byte	0x50
 10534 10a6 09000000 		.4byte	.LVL328-1
 10535 10aa 78000000 		.4byte	.LVL334
 10536 10ae 0100     		.2byte	0x1
 10537 10b0 55       		.byte	0x55
 10538 10b1 78000000 		.4byte	.LVL334
 10539 10b5 80000000 		.4byte	.LFE114
 10540 10b9 0400     		.2byte	0x4
 10541 10bb F3       		.byte	0xf3
 10542 10bc 01       		.uleb128 0x1
 10543 10bd 50       		.byte	0x50
 10544 10be 9F       		.byte	0x9f
 10545 10bf 00000000 		.4byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 288


 10546 10c3 00000000 		.4byte	0
 10547              	.LLST105:
 10548 10c7 00000000 		.4byte	.LVL327
 10549 10cb 09000000 		.4byte	.LVL328-1
 10550 10cf 0100     		.2byte	0x1
 10551 10d1 51       		.byte	0x51
 10552 10d2 09000000 		.4byte	.LVL328-1
 10553 10d6 4A000000 		.4byte	.LVL332
 10554 10da 0100     		.2byte	0x1
 10555 10dc 54       		.byte	0x54
 10556 10dd 4A000000 		.4byte	.LVL332
 10557 10e1 80000000 		.4byte	.LFE114
 10558 10e5 0400     		.2byte	0x4
 10559 10e7 F3       		.byte	0xf3
 10560 10e8 01       		.uleb128 0x1
 10561 10e9 51       		.byte	0x51
 10562 10ea 9F       		.byte	0x9f
 10563 10eb 00000000 		.4byte	0
 10564 10ef 00000000 		.4byte	0
 10565              	.LLST106:
 10566 10f3 4A000000 		.4byte	.LVL332
 10567 10f7 78000000 		.4byte	.LVL334
 10568 10fb 0100     		.2byte	0x1
 10569 10fd 54       		.byte	0x54
 10570 10fe 78000000 		.4byte	.LVL334
 10571 1102 80000000 		.4byte	.LFE114
 10572 1106 0100     		.2byte	0x1
 10573 1108 50       		.byte	0x50
 10574 1109 00000000 		.4byte	0
 10575 110d 00000000 		.4byte	0
 10576              	.LLST107:
 10577 1111 00000000 		.4byte	.LVL335
 10578 1115 0D000000 		.4byte	.LVL336-1
 10579 1119 0100     		.2byte	0x1
 10580 111b 50       		.byte	0x50
 10581 111c 0D000000 		.4byte	.LVL336-1
 10582 1120 9C000000 		.4byte	.LVL346
 10583 1124 0100     		.2byte	0x1
 10584 1126 57       		.byte	0x57
 10585 1127 9C000000 		.4byte	.LVL346
 10586 112b A4000000 		.4byte	.LFE115
 10587 112f 0400     		.2byte	0x4
 10588 1131 F3       		.byte	0xf3
 10589 1132 01       		.uleb128 0x1
 10590 1133 50       		.byte	0x50
 10591 1134 9F       		.byte	0x9f
 10592 1135 00000000 		.4byte	0
 10593 1139 00000000 		.4byte	0
 10594              	.LLST108:
 10595 113d 00000000 		.4byte	.LVL335
 10596 1141 0D000000 		.4byte	.LVL336-1
 10597 1145 0100     		.2byte	0x1
 10598 1147 51       		.byte	0x51
 10599 1148 0D000000 		.4byte	.LVL336-1
 10600 114c 80000000 		.4byte	.LVL340
 10601 1150 0100     		.2byte	0x1
 10602 1152 55       		.byte	0x55
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 289


 10603 1153 80000000 		.4byte	.LVL340
 10604 1157 86000000 		.4byte	.LVL343
 10605 115b 0400     		.2byte	0x4
 10606 115d F3       		.byte	0xf3
 10607 115e 01       		.uleb128 0x1
 10608 115f 51       		.byte	0x51
 10609 1160 9F       		.byte	0x9f
 10610 1161 86000000 		.4byte	.LVL343
 10611 1165 88000000 		.4byte	.LVL344
 10612 1169 0100     		.2byte	0x1
 10613 116b 55       		.byte	0x55
 10614 116c 88000000 		.4byte	.LVL344
 10615 1170 A4000000 		.4byte	.LFE115
 10616 1174 0400     		.2byte	0x4
 10617 1176 F3       		.byte	0xf3
 10618 1177 01       		.uleb128 0x1
 10619 1178 51       		.byte	0x51
 10620 1179 9F       		.byte	0x9f
 10621 117a 00000000 		.4byte	0
 10622 117e 00000000 		.4byte	0
 10623              	.LLST109:
 10624 1182 00000000 		.4byte	.LVL335
 10625 1186 0D000000 		.4byte	.LVL336-1
 10626 118a 0100     		.2byte	0x1
 10627 118c 52       		.byte	0x52
 10628 118d 0D000000 		.4byte	.LVL336-1
 10629 1191 84000000 		.4byte	.LVL342
 10630 1195 0100     		.2byte	0x1
 10631 1197 54       		.byte	0x54
 10632 1198 84000000 		.4byte	.LVL342
 10633 119c 86000000 		.4byte	.LVL343
 10634 11a0 0400     		.2byte	0x4
 10635 11a2 F3       		.byte	0xf3
 10636 11a3 01       		.uleb128 0x1
 10637 11a4 52       		.byte	0x52
 10638 11a5 9F       		.byte	0x9f
 10639 11a6 86000000 		.4byte	.LVL343
 10640 11aa 88000000 		.4byte	.LVL344
 10641 11ae 0100     		.2byte	0x1
 10642 11b0 54       		.byte	0x54
 10643 11b1 88000000 		.4byte	.LVL344
 10644 11b5 A4000000 		.4byte	.LFE115
 10645 11b9 0400     		.2byte	0x4
 10646 11bb F3       		.byte	0xf3
 10647 11bc 01       		.uleb128 0x1
 10648 11bd 52       		.byte	0x52
 10649 11be 9F       		.byte	0x9f
 10650 11bf 00000000 		.4byte	0
 10651 11c3 00000000 		.4byte	0
 10652              	.LLST110:
 10653 11c7 00000000 		.4byte	.LVL335
 10654 11cb 0D000000 		.4byte	.LVL336-1
 10655 11cf 0100     		.2byte	0x1
 10656 11d1 53       		.byte	0x53
 10657 11d2 0D000000 		.4byte	.LVL336-1
 10658 11d6 9C000000 		.4byte	.LVL346
 10659 11da 0100     		.2byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 290


 10660 11dc 56       		.byte	0x56
 10661 11dd 9C000000 		.4byte	.LVL346
 10662 11e1 A4000000 		.4byte	.LFE115
 10663 11e5 0400     		.2byte	0x4
 10664 11e7 F3       		.byte	0xf3
 10665 11e8 01       		.uleb128 0x1
 10666 11e9 53       		.byte	0x53
 10667 11ea 9F       		.byte	0x9f
 10668 11eb 00000000 		.4byte	0
 10669 11ef 00000000 		.4byte	0
 10670              	.LLST111:
 10671 11f3 82000000 		.4byte	.LVL341
 10672 11f7 86000000 		.4byte	.LVL343
 10673 11fb 0200     		.2byte	0x2
 10674 11fd 31       		.byte	0x31
 10675 11fe 9F       		.byte	0x9f
 10676 11ff 88000000 		.4byte	.LVL344
 10677 1203 9C000000 		.4byte	.LVL346
 10678 1207 0100     		.2byte	0x1
 10679 1209 54       		.byte	0x54
 10680 120a 9C000000 		.4byte	.LVL346
 10681 120e A4000000 		.4byte	.LFE115
 10682 1212 0100     		.2byte	0x1
 10683 1214 50       		.byte	0x50
 10684 1215 00000000 		.4byte	0
 10685 1219 00000000 		.4byte	0
 10686              	.LLST112:
 10687 121d 00000000 		.4byte	.LVL347
 10688 1221 0D000000 		.4byte	.LVL349-1
 10689 1225 0100     		.2byte	0x1
 10690 1227 50       		.byte	0x50
 10691 1228 0D000000 		.4byte	.LVL349-1
 10692 122c AE000000 		.4byte	.LVL358
 10693 1230 0100     		.2byte	0x1
 10694 1232 54       		.byte	0x54
 10695 1233 AE000000 		.4byte	.LVL358
 10696 1237 B8000000 		.4byte	.LFE116
 10697 123b 0400     		.2byte	0x4
 10698 123d F3       		.byte	0xf3
 10699 123e 01       		.uleb128 0x1
 10700 123f 50       		.byte	0x50
 10701 1240 9F       		.byte	0x9f
 10702 1241 00000000 		.4byte	0
 10703 1245 00000000 		.4byte	0
 10704              	.LLST113:
 10705 1249 00000000 		.4byte	.LVL347
 10706 124d 0D000000 		.4byte	.LVL349-1
 10707 1251 0100     		.2byte	0x1
 10708 1253 51       		.byte	0x51
 10709 1254 0D000000 		.4byte	.LVL349-1
 10710 1258 32000000 		.4byte	.LVL351
 10711 125c 0100     		.2byte	0x1
 10712 125e 57       		.byte	0x57
 10713 125f 32000000 		.4byte	.LVL351
 10714 1263 38000000 		.4byte	.LVL352
 10715 1267 0400     		.2byte	0x4
 10716 1269 F3       		.byte	0xf3
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 291


 10717 126a 01       		.uleb128 0x1
 10718 126b 51       		.byte	0x51
 10719 126c 9F       		.byte	0x9f
 10720 126d 38000000 		.4byte	.LVL352
 10721 1271 58000000 		.4byte	.LVL353
 10722 1275 0100     		.2byte	0x1
 10723 1277 57       		.byte	0x57
 10724 1278 58000000 		.4byte	.LVL353
 10725 127c B8000000 		.4byte	.LFE116
 10726 1280 0400     		.2byte	0x4
 10727 1282 F3       		.byte	0xf3
 10728 1283 01       		.uleb128 0x1
 10729 1284 51       		.byte	0x51
 10730 1285 9F       		.byte	0x9f
 10731 1286 00000000 		.4byte	0
 10732 128a 00000000 		.4byte	0
 10733              	.LLST114:
 10734 128e 00000000 		.4byte	.LVL347
 10735 1292 0D000000 		.4byte	.LVL349-1
 10736 1296 0100     		.2byte	0x1
 10737 1298 52       		.byte	0x52
 10738 1299 0D000000 		.4byte	.LVL349-1
 10739 129d B8000000 		.4byte	.LFE116
 10740 12a1 0400     		.2byte	0x4
 10741 12a3 F3       		.byte	0xf3
 10742 12a4 01       		.uleb128 0x1
 10743 12a5 52       		.byte	0x52
 10744 12a6 9F       		.byte	0x9f
 10745 12a7 00000000 		.4byte	0
 10746 12ab 00000000 		.4byte	0
 10747              	.LLST115:
 10748 12af 00000000 		.4byte	.LVL347
 10749 12b3 0D000000 		.4byte	.LVL349-1
 10750 12b7 0100     		.2byte	0x1
 10751 12b9 53       		.byte	0x53
 10752 12ba 0D000000 		.4byte	.LVL349-1
 10753 12be 6E000000 		.4byte	.LVL355
 10754 12c2 0100     		.2byte	0x1
 10755 12c4 56       		.byte	0x56
 10756 12c5 6E000000 		.4byte	.LVL355
 10757 12c9 B8000000 		.4byte	.LFE116
 10758 12cd 0400     		.2byte	0x4
 10759 12cf F3       		.byte	0xf3
 10760 12d0 01       		.uleb128 0x1
 10761 12d1 53       		.byte	0x53
 10762 12d2 9F       		.byte	0x9f
 10763 12d3 00000000 		.4byte	0
 10764 12d7 00000000 		.4byte	0
 10765              	.LLST116:
 10766 12db 0A000000 		.4byte	.LVL348
 10767 12df 0D000000 		.4byte	.LVL349-1
 10768 12e3 0100     		.2byte	0x1
 10769 12e5 50       		.byte	0x50
 10770 12e6 0D000000 		.4byte	.LVL349-1
 10771 12ea AE000000 		.4byte	.LVL358
 10772 12ee 0100     		.2byte	0x1
 10773 12f0 54       		.byte	0x54
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 292


 10774 12f1 AE000000 		.4byte	.LVL358
 10775 12f5 B8000000 		.4byte	.LFE116
 10776 12f9 0400     		.2byte	0x4
 10777 12fb F3       		.byte	0xf3
 10778 12fc 01       		.uleb128 0x1
 10779 12fd 50       		.byte	0x50
 10780 12fe 9F       		.byte	0x9f
 10781 12ff 00000000 		.4byte	0
 10782 1303 00000000 		.4byte	0
 10783              	.LLST117:
 10784 1307 0A000000 		.4byte	.LVL348
 10785 130b 58000000 		.4byte	.LVL353
 10786 130f 0200     		.2byte	0x2
 10787 1311 31       		.byte	0x31
 10788 1312 9F       		.byte	0x9f
 10789 1313 58000000 		.4byte	.LVL353
 10790 1317 AE000000 		.4byte	.LVL358
 10791 131b 0100     		.2byte	0x1
 10792 131d 55       		.byte	0x55
 10793 131e AE000000 		.4byte	.LVL358
 10794 1322 B8000000 		.4byte	.LFE116
 10795 1326 0100     		.2byte	0x1
 10796 1328 50       		.byte	0x50
 10797 1329 00000000 		.4byte	0
 10798 132d 00000000 		.4byte	0
 10799              	.LLST118:
 10800 1331 1A000000 		.4byte	.LVL350
 10801 1335 63000000 		.4byte	.LVL354-1
 10802 1339 0100     		.2byte	0x1
 10803 133b 53       		.byte	0x53
 10804 133c 00000000 		.4byte	0
 10805 1340 00000000 		.4byte	0
 10806              	.LLST119:
 10807 1344 00000000 		.4byte	.LVL359
 10808 1348 72000000 		.4byte	.LVL368
 10809 134c 0100     		.2byte	0x1
 10810 134e 50       		.byte	0x50
 10811 134f 72000000 		.4byte	.LVL368
 10812 1353 9C000000 		.4byte	.LVL371
 10813 1357 0100     		.2byte	0x1
 10814 1359 56       		.byte	0x56
 10815 135a 9C000000 		.4byte	.LVL371
 10816 135e A2000000 		.4byte	.LVL372
 10817 1362 0100     		.2byte	0x1
 10818 1364 50       		.byte	0x50
 10819 1365 A2000000 		.4byte	.LVL372
 10820 1369 C8000000 		.4byte	.LVL374
 10821 136d 0100     		.2byte	0x1
 10822 136f 56       		.byte	0x56
 10823 1370 C8000000 		.4byte	.LVL374
 10824 1374 D8000000 		.4byte	.LFE117
 10825 1378 0400     		.2byte	0x4
 10826 137a F3       		.byte	0xf3
 10827 137b 01       		.uleb128 0x1
 10828 137c 50       		.byte	0x50
 10829 137d 9F       		.byte	0x9f
 10830 137e 00000000 		.4byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 293


 10831 1382 00000000 		.4byte	0
 10832              	.LLST120:
 10833 1386 00000000 		.4byte	.LVL359
 10834 138a 3A000000 		.4byte	.LVL364
 10835 138e 0100     		.2byte	0x1
 10836 1390 51       		.byte	0x51
 10837 1391 3A000000 		.4byte	.LVL364
 10838 1395 40000000 		.4byte	.LVL365
 10839 1399 0400     		.2byte	0x4
 10840 139b F3       		.byte	0xf3
 10841 139c 01       		.uleb128 0x1
 10842 139d 51       		.byte	0x51
 10843 139e 9F       		.byte	0x9f
 10844 139f 40000000 		.4byte	.LVL365
 10845 13a3 60000000 		.4byte	.LVL366
 10846 13a7 0100     		.2byte	0x1
 10847 13a9 51       		.byte	0x51
 10848 13aa 60000000 		.4byte	.LVL366
 10849 13ae D8000000 		.4byte	.LFE117
 10850 13b2 0400     		.2byte	0x4
 10851 13b4 F3       		.byte	0xf3
 10852 13b5 01       		.uleb128 0x1
 10853 13b6 51       		.byte	0x51
 10854 13b7 9F       		.byte	0x9f
 10855 13b8 00000000 		.4byte	0
 10856 13bc 00000000 		.4byte	0
 10857              	.LLST121:
 10858 13c0 00000000 		.4byte	.LVL359
 10859 13c4 2A000000 		.4byte	.LVL363
 10860 13c8 0100     		.2byte	0x1
 10861 13ca 52       		.byte	0x52
 10862 13cb 2A000000 		.4byte	.LVL363
 10863 13cf D8000000 		.4byte	.LFE117
 10864 13d3 0400     		.2byte	0x4
 10865 13d5 F3       		.byte	0xf3
 10866 13d6 01       		.uleb128 0x1
 10867 13d7 52       		.byte	0x52
 10868 13d8 9F       		.byte	0x9f
 10869 13d9 00000000 		.4byte	0
 10870 13dd 00000000 		.4byte	0
 10871              	.LLST122:
 10872 13e1 00000000 		.4byte	.LVL359
 10873 13e5 20000000 		.4byte	.LVL361
 10874 13e9 0100     		.2byte	0x1
 10875 13eb 53       		.byte	0x53
 10876 13ec 20000000 		.4byte	.LVL361
 10877 13f0 D8000000 		.4byte	.LFE117
 10878 13f4 0400     		.2byte	0x4
 10879 13f6 F3       		.byte	0xf3
 10880 13f7 01       		.uleb128 0x1
 10881 13f8 53       		.byte	0x53
 10882 13f9 9F       		.byte	0x9f
 10883 13fa 00000000 		.4byte	0
 10884 13fe 00000000 		.4byte	0
 10885              	.LLST123:
 10886 1402 00000000 		.4byte	.LVL359
 10887 1406 D0000000 		.4byte	.LVL376
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 294


 10888 140a 0200     		.2byte	0x2
 10889 140c 91       		.byte	0x91
 10890 140d 00       		.sleb128 0
 10891 140e D0000000 		.4byte	.LVL376
 10892 1412 D8000000 		.4byte	.LFE117
 10893 1416 0200     		.2byte	0x2
 10894 1418 7D       		.byte	0x7d
 10895 1419 00       		.sleb128 0
 10896 141a 00000000 		.4byte	0
 10897 141e 00000000 		.4byte	0
 10898              	.LLST124:
 10899 1422 02000000 		.4byte	.LVL360
 10900 1426 72000000 		.4byte	.LVL368
 10901 142a 0100     		.2byte	0x1
 10902 142c 50       		.byte	0x50
 10903 142d 72000000 		.4byte	.LVL368
 10904 1431 9C000000 		.4byte	.LVL371
 10905 1435 0100     		.2byte	0x1
 10906 1437 56       		.byte	0x56
 10907 1438 9C000000 		.4byte	.LVL371
 10908 143c A2000000 		.4byte	.LVL372
 10909 1440 0100     		.2byte	0x1
 10910 1442 50       		.byte	0x50
 10911 1443 A2000000 		.4byte	.LVL372
 10912 1447 C8000000 		.4byte	.LVL374
 10913 144b 0100     		.2byte	0x1
 10914 144d 56       		.byte	0x56
 10915 144e C8000000 		.4byte	.LVL374
 10916 1452 D8000000 		.4byte	.LFE117
 10917 1456 0400     		.2byte	0x4
 10918 1458 F3       		.byte	0xf3
 10919 1459 01       		.uleb128 0x1
 10920 145a 50       		.byte	0x50
 10921 145b 9F       		.byte	0x9f
 10922 145c 00000000 		.4byte	0
 10923 1460 00000000 		.4byte	0
 10924              	.LLST125:
 10925 1464 22000000 		.4byte	.LVL362
 10926 1468 68000000 		.4byte	.LVL367
 10927 146c 0100     		.2byte	0x1
 10928 146e 53       		.byte	0x53
 10929 146f 00000000 		.4byte	0
 10930 1473 00000000 		.4byte	0
 10931              	.LLST126:
 10932 1477 02000000 		.4byte	.LVL360
 10933 147b 60000000 		.4byte	.LVL366
 10934 147f 0200     		.2byte	0x2
 10935 1481 31       		.byte	0x31
 10936 1482 9F       		.byte	0x9f
 10937 1483 60000000 		.4byte	.LVL366
 10938 1487 D0000000 		.4byte	.LVL376
 10939 148b 0100     		.2byte	0x1
 10940 148d 55       		.byte	0x55
 10941 148e D0000000 		.4byte	.LVL376
 10942 1492 D8000000 		.4byte	.LFE117
 10943 1496 0100     		.2byte	0x1
 10944 1498 50       		.byte	0x50
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 295


 10945 1499 00000000 		.4byte	0
 10946 149d 00000000 		.4byte	0
 10947              	.LLST127:
 10948 14a1 C8000000 		.4byte	.LVL374
 10949 14a5 CC000000 		.4byte	.LVL375
 10950 14a9 0100     		.2byte	0x1
 10951 14ab 54       		.byte	0x54
 10952 14ac 00000000 		.4byte	0
 10953 14b0 00000000 		.4byte	0
 10954              	.LLST128:
 10955 14b4 00000000 		.4byte	.LVL377
 10956 14b8 3C000000 		.4byte	.LVL381
 10957 14bc 0100     		.2byte	0x1
 10958 14be 50       		.byte	0x50
 10959 14bf 3C000000 		.4byte	.LVL381
 10960 14c3 66000000 		.4byte	.LVL384
 10961 14c7 0100     		.2byte	0x1
 10962 14c9 54       		.byte	0x54
 10963 14ca 66000000 		.4byte	.LVL384
 10964 14ce 6C000000 		.4byte	.LVL386
 10965 14d2 0100     		.2byte	0x1
 10966 14d4 50       		.byte	0x50
 10967 14d5 6C000000 		.4byte	.LVL386
 10968 14d9 8E000000 		.4byte	.LVL388
 10969 14dd 0100     		.2byte	0x1
 10970 14df 54       		.byte	0x54
 10971 14e0 8E000000 		.4byte	.LVL388
 10972 14e4 9C000000 		.4byte	.LFE118
 10973 14e8 0400     		.2byte	0x4
 10974 14ea F3       		.byte	0xf3
 10975 14eb 01       		.uleb128 0x1
 10976 14ec 50       		.byte	0x50
 10977 14ed 9F       		.byte	0x9f
 10978 14ee 00000000 		.4byte	0
 10979 14f2 00000000 		.4byte	0
 10980              	.LLST129:
 10981 14f6 00000000 		.4byte	.LVL377
 10982 14fa 3F000000 		.4byte	.LVL382-1
 10983 14fe 0100     		.2byte	0x1
 10984 1500 51       		.byte	0x51
 10985 1501 3F000000 		.4byte	.LVL382-1
 10986 1505 66000000 		.4byte	.LVL384
 10987 1509 0100     		.2byte	0x1
 10988 150b 56       		.byte	0x56
 10989 150c 66000000 		.4byte	.LVL384
 10990 1510 6A000000 		.4byte	.LVL385
 10991 1514 0100     		.2byte	0x1
 10992 1516 51       		.byte	0x51
 10993 1517 6A000000 		.4byte	.LVL385
 10994 151b 8E000000 		.4byte	.LVL388
 10995 151f 0100     		.2byte	0x1
 10996 1521 56       		.byte	0x56
 10997 1522 8E000000 		.4byte	.LVL388
 10998 1526 9C000000 		.4byte	.LFE118
 10999 152a 0400     		.2byte	0x4
 11000 152c F3       		.byte	0xf3
 11001 152d 01       		.uleb128 0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 296


 11002 152e 51       		.byte	0x51
 11003 152f 9F       		.byte	0x9f
 11004 1530 00000000 		.4byte	0
 11005 1534 00000000 		.4byte	0
 11006              	.LLST130:
 11007 1538 02000000 		.4byte	.LVL378
 11008 153c 3C000000 		.4byte	.LVL381
 11009 1540 0100     		.2byte	0x1
 11010 1542 50       		.byte	0x50
 11011 1543 3C000000 		.4byte	.LVL381
 11012 1547 66000000 		.4byte	.LVL384
 11013 154b 0100     		.2byte	0x1
 11014 154d 54       		.byte	0x54
 11015 154e 66000000 		.4byte	.LVL384
 11016 1552 6C000000 		.4byte	.LVL386
 11017 1556 0100     		.2byte	0x1
 11018 1558 50       		.byte	0x50
 11019 1559 6C000000 		.4byte	.LVL386
 11020 155d 8E000000 		.4byte	.LVL388
 11021 1561 0100     		.2byte	0x1
 11022 1563 54       		.byte	0x54
 11023 1564 8E000000 		.4byte	.LVL388
 11024 1568 9C000000 		.4byte	.LFE118
 11025 156c 0400     		.2byte	0x4
 11026 156e F3       		.byte	0xf3
 11027 156f 01       		.uleb128 0x1
 11028 1570 50       		.byte	0x50
 11029 1571 9F       		.byte	0x9f
 11030 1572 00000000 		.4byte	0
 11031 1576 00000000 		.4byte	0
 11032              	.LLST131:
 11033 157a 1C000000 		.4byte	.LVL379
 11034 157e 32000000 		.4byte	.LVL380
 11035 1582 0100     		.2byte	0x1
 11036 1584 53       		.byte	0x53
 11037 1585 00000000 		.4byte	0
 11038 1589 00000000 		.4byte	0
 11039              	.LLST132:
 11040 158d 8E000000 		.4byte	.LVL388
 11041 1591 92000000 		.4byte	.LVL389
 11042 1595 0100     		.2byte	0x1
 11043 1597 55       		.byte	0x55
 11044 1598 00000000 		.4byte	0
 11045 159c 00000000 		.4byte	0
 11046              	.LLST133:
 11047 15a0 00000000 		.4byte	.LVL390
 11048 15a4 0C000000 		.4byte	.LVL391
 11049 15a8 0100     		.2byte	0x1
 11050 15aa 50       		.byte	0x50
 11051 15ab 00000000 		.4byte	0
 11052 15af 00000000 		.4byte	0
 11053              	.LLST134:
 11054 15b3 0C000000 		.4byte	.LVL391
 11055 15b7 22000000 		.4byte	.LVL394
 11056 15bb 0100     		.2byte	0x1
 11057 15bd 54       		.byte	0x54
 11058 15be 24000000 		.4byte	.LVL395
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 297


 11059 15c2 26000000 		.4byte	.LVL396
 11060 15c6 0100     		.2byte	0x1
 11061 15c8 54       		.byte	0x54
 11062 15c9 00000000 		.4byte	0
 11063 15cd 00000000 		.4byte	0
 11064              	.LLST135:
 11065 15d1 20000000 		.4byte	.LVL393
 11066 15d5 24000000 		.4byte	.LVL395
 11067 15d9 0200     		.2byte	0x2
 11068 15db 31       		.byte	0x31
 11069 15dc 9F       		.byte	0x9f
 11070 15dd 26000000 		.4byte	.LVL396
 11071 15e1 2E000000 		.4byte	.LVL398
 11072 15e5 0100     		.2byte	0x1
 11073 15e7 54       		.byte	0x54
 11074 15e8 2E000000 		.4byte	.LVL398
 11075 15ec 34000000 		.4byte	.LFE119
 11076 15f0 0100     		.2byte	0x1
 11077 15f2 50       		.byte	0x50
 11078 15f3 00000000 		.4byte	0
 11079 15f7 00000000 		.4byte	0
 11080              		.section	.debug_aranges,"",%progbits
 11081 0000 B4010000 		.4byte	0x1b4
 11082 0004 0200     		.2byte	0x2
 11083 0006 00000000 		.4byte	.Ldebug_info0
 11084 000a 04       		.byte	0x4
 11085 000b 00       		.byte	0
 11086 000c 0000     		.2byte	0
 11087 000e 0000     		.2byte	0
 11088 0010 00000000 		.4byte	.LFB80
 11089 0014 38000000 		.4byte	.LFE80-.LFB80
 11090 0018 00000000 		.4byte	.LFB104
 11091 001c 14000000 		.4byte	.LFE104-.LFB104
 11092 0020 00000000 		.4byte	.LFB107
 11093 0024 2C000000 		.4byte	.LFE107-.LFB107
 11094 0028 00000000 		.4byte	.LFB106
 11095 002c 12000000 		.4byte	.LFE106-.LFB106
 11096 0030 00000000 		.4byte	.LFB70
 11097 0034 90000000 		.4byte	.LFE70-.LFB70
 11098 0038 00000000 		.4byte	.LFB102
 11099 003c 58000000 		.4byte	.LFE102-.LFB102
 11100 0040 00000000 		.4byte	.LFB71
 11101 0044 AC000000 		.4byte	.LFE71-.LFB71
 11102 0048 00000000 		.4byte	.LFB103
 11103 004c 44000000 		.4byte	.LFE103-.LFB103
 11104 0050 00000000 		.4byte	.LFB101
 11105 0054 08000000 		.4byte	.LFE101-.LFB101
 11106 0058 00000000 		.4byte	.LFB120
 11107 005c 84000000 		.4byte	.LFE120-.LFB120
 11108 0060 00000000 		.4byte	.LFB69
 11109 0064 62000000 		.4byte	.LFE69-.LFB69
 11110 0068 00000000 		.4byte	.LFB72
 11111 006c BC000000 		.4byte	.LFE72-.LFB72
 11112 0070 00000000 		.4byte	.LFB75
 11113 0074 64000000 		.4byte	.LFE75-.LFB75
 11114 0078 00000000 		.4byte	.LFB76
 11115 007c 20000000 		.4byte	.LFE76-.LFB76
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 298


 11116 0080 00000000 		.4byte	.LFB77
 11117 0084 28000000 		.4byte	.LFE77-.LFB77
 11118 0088 00000000 		.4byte	.LFB78
 11119 008c E8000000 		.4byte	.LFE78-.LFB78
 11120 0090 00000000 		.4byte	.LFB81
 11121 0094 78000000 		.4byte	.LFE81-.LFB81
 11122 0098 00000000 		.4byte	.LFB82
 11123 009c 88000000 		.4byte	.LFE82-.LFB82
 11124 00a0 00000000 		.4byte	.LFB83
 11125 00a4 58000000 		.4byte	.LFE83-.LFB83
 11126 00a8 00000000 		.4byte	.LFB84
 11127 00ac 24000000 		.4byte	.LFE84-.LFB84
 11128 00b0 00000000 		.4byte	.LFB85
 11129 00b4 14000000 		.4byte	.LFE85-.LFB85
 11130 00b8 00000000 		.4byte	.LFB87
 11131 00bc 0C000000 		.4byte	.LFE87-.LFB87
 11132 00c0 00000000 		.4byte	.LFB88
 11133 00c4 0C000000 		.4byte	.LFE88-.LFB88
 11134 00c8 00000000 		.4byte	.LFB89
 11135 00cc 0C000000 		.4byte	.LFE89-.LFB89
 11136 00d0 00000000 		.4byte	.LFB90
 11137 00d4 14000000 		.4byte	.LFE90-.LFB90
 11138 00d8 00000000 		.4byte	.LFB91
 11139 00dc 08010000 		.4byte	.LFE91-.LFB91
 11140 00e0 00000000 		.4byte	.LFB86
 11141 00e4 D8000000 		.4byte	.LFE86-.LFB86
 11142 00e8 00000000 		.4byte	.LFB73
 11143 00ec 6C000000 		.4byte	.LFE73-.LFB73
 11144 00f0 00000000 		.4byte	.LFB74
 11145 00f4 34000000 		.4byte	.LFE74-.LFB74
 11146 00f8 00000000 		.4byte	.LFB92
 11147 00fc 70000000 		.4byte	.LFE92-.LFB92
 11148 0100 00000000 		.4byte	.LFB79
 11149 0104 C0000000 		.4byte	.LFE79-.LFB79
 11150 0108 00000000 		.4byte	.LFB93
 11151 010c 20000000 		.4byte	.LFE93-.LFB93
 11152 0110 00000000 		.4byte	.LFB94
 11153 0114 28000000 		.4byte	.LFE94-.LFB94
 11154 0118 00000000 		.4byte	.LFB95
 11155 011c 74000000 		.4byte	.LFE95-.LFB95
 11156 0120 00000000 		.4byte	.LFB96
 11157 0124 54000000 		.4byte	.LFE96-.LFB96
 11158 0128 00000000 		.4byte	.LFB97
 11159 012c 20000000 		.4byte	.LFE97-.LFB97
 11160 0130 00000000 		.4byte	.LFB98
 11161 0134 14000000 		.4byte	.LFE98-.LFB98
 11162 0138 00000000 		.4byte	.LFB99
 11163 013c 58000000 		.4byte	.LFE99-.LFB99
 11164 0140 00000000 		.4byte	.LFB100
 11165 0144 10000000 		.4byte	.LFE100-.LFB100
 11166 0148 00000000 		.4byte	.LFB105
 11167 014c 18000000 		.4byte	.LFE105-.LFB105
 11168 0150 00000000 		.4byte	.LFB108
 11169 0154 0C000000 		.4byte	.LFE108-.LFB108
 11170 0158 00000000 		.4byte	.LFB109
 11171 015c D0000000 		.4byte	.LFE109-.LFB109
 11172 0160 00000000 		.4byte	.LFB110
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 299


 11173 0164 88000000 		.4byte	.LFE110-.LFB110
 11174 0168 00000000 		.4byte	.LFB111
 11175 016c A0000000 		.4byte	.LFE111-.LFB111
 11176 0170 00000000 		.4byte	.LFB112
 11177 0174 20000000 		.4byte	.LFE112-.LFB112
 11178 0178 00000000 		.4byte	.LFB113
 11179 017c 20000000 		.4byte	.LFE113-.LFB113
 11180 0180 00000000 		.4byte	.LFB114
 11181 0184 80000000 		.4byte	.LFE114-.LFB114
 11182 0188 00000000 		.4byte	.LFB115
 11183 018c A4000000 		.4byte	.LFE115-.LFB115
 11184 0190 00000000 		.4byte	.LFB116
 11185 0194 B8000000 		.4byte	.LFE116-.LFB116
 11186 0198 00000000 		.4byte	.LFB117
 11187 019c D8000000 		.4byte	.LFE117-.LFB117
 11188 01a0 00000000 		.4byte	.LFB118
 11189 01a4 9C000000 		.4byte	.LFE118-.LFB118
 11190 01a8 00000000 		.4byte	.LFB119
 11191 01ac 34000000 		.4byte	.LFE119-.LFB119
 11192 01b0 00000000 		.4byte	0
 11193 01b4 00000000 		.4byte	0
 11194              		.section	.debug_ranges,"",%progbits
 11195              	.Ldebug_ranges0:
 11196 0000 0E000000 		.4byte	.LBB40
 11197 0004 3E000000 		.4byte	.LBE40
 11198 0008 44000000 		.4byte	.LBB42
 11199 000c DC000000 		.4byte	.LBE42
 11200 0010 EE000000 		.4byte	.LBB43
 11201 0014 F2000000 		.4byte	.LBE43
 11202 0018 00000000 		.4byte	0
 11203 001c 00000000 		.4byte	0
 11204 0020 0A000000 		.4byte	.LBB45
 11205 0024 20000000 		.4byte	.LBE45
 11206 0028 24000000 		.4byte	.LBB46
 11207 002c 2C000000 		.4byte	.LBE46
 11208 0030 34000000 		.4byte	.LBB47
 11209 0034 4A000000 		.4byte	.LBE47
 11210 0038 00000000 		.4byte	0
 11211 003c 00000000 		.4byte	0
 11212 0040 00000000 		.4byte	.LFB80
 11213 0044 38000000 		.4byte	.LFE80
 11214 0048 00000000 		.4byte	.LFB104
 11215 004c 14000000 		.4byte	.LFE104
 11216 0050 00000000 		.4byte	.LFB107
 11217 0054 2C000000 		.4byte	.LFE107
 11218 0058 00000000 		.4byte	.LFB106
 11219 005c 12000000 		.4byte	.LFE106
 11220 0060 00000000 		.4byte	.LFB70
 11221 0064 90000000 		.4byte	.LFE70
 11222 0068 00000000 		.4byte	.LFB102
 11223 006c 58000000 		.4byte	.LFE102
 11224 0070 00000000 		.4byte	.LFB71
 11225 0074 AC000000 		.4byte	.LFE71
 11226 0078 00000000 		.4byte	.LFB103
 11227 007c 44000000 		.4byte	.LFE103
 11228 0080 00000000 		.4byte	.LFB101
 11229 0084 08000000 		.4byte	.LFE101
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 300


 11230 0088 00000000 		.4byte	.LFB120
 11231 008c 84000000 		.4byte	.LFE120
 11232 0090 00000000 		.4byte	.LFB69
 11233 0094 62000000 		.4byte	.LFE69
 11234 0098 00000000 		.4byte	.LFB72
 11235 009c BC000000 		.4byte	.LFE72
 11236 00a0 00000000 		.4byte	.LFB75
 11237 00a4 64000000 		.4byte	.LFE75
 11238 00a8 00000000 		.4byte	.LFB76
 11239 00ac 20000000 		.4byte	.LFE76
 11240 00b0 00000000 		.4byte	.LFB77
 11241 00b4 28000000 		.4byte	.LFE77
 11242 00b8 00000000 		.4byte	.LFB78
 11243 00bc E8000000 		.4byte	.LFE78
 11244 00c0 00000000 		.4byte	.LFB81
 11245 00c4 78000000 		.4byte	.LFE81
 11246 00c8 00000000 		.4byte	.LFB82
 11247 00cc 88000000 		.4byte	.LFE82
 11248 00d0 00000000 		.4byte	.LFB83
 11249 00d4 58000000 		.4byte	.LFE83
 11250 00d8 00000000 		.4byte	.LFB84
 11251 00dc 24000000 		.4byte	.LFE84
 11252 00e0 00000000 		.4byte	.LFB85
 11253 00e4 14000000 		.4byte	.LFE85
 11254 00e8 00000000 		.4byte	.LFB87
 11255 00ec 0C000000 		.4byte	.LFE87
 11256 00f0 00000000 		.4byte	.LFB88
 11257 00f4 0C000000 		.4byte	.LFE88
 11258 00f8 00000000 		.4byte	.LFB89
 11259 00fc 0C000000 		.4byte	.LFE89
 11260 0100 00000000 		.4byte	.LFB90
 11261 0104 14000000 		.4byte	.LFE90
 11262 0108 00000000 		.4byte	.LFB91
 11263 010c 08010000 		.4byte	.LFE91
 11264 0110 00000000 		.4byte	.LFB86
 11265 0114 D8000000 		.4byte	.LFE86
 11266 0118 00000000 		.4byte	.LFB73
 11267 011c 6C000000 		.4byte	.LFE73
 11268 0120 00000000 		.4byte	.LFB74
 11269 0124 34000000 		.4byte	.LFE74
 11270 0128 00000000 		.4byte	.LFB92
 11271 012c 70000000 		.4byte	.LFE92
 11272 0130 00000000 		.4byte	.LFB79
 11273 0134 C0000000 		.4byte	.LFE79
 11274 0138 00000000 		.4byte	.LFB93
 11275 013c 20000000 		.4byte	.LFE93
 11276 0140 00000000 		.4byte	.LFB94
 11277 0144 28000000 		.4byte	.LFE94
 11278 0148 00000000 		.4byte	.LFB95
 11279 014c 74000000 		.4byte	.LFE95
 11280 0150 00000000 		.4byte	.LFB96
 11281 0154 54000000 		.4byte	.LFE96
 11282 0158 00000000 		.4byte	.LFB97
 11283 015c 20000000 		.4byte	.LFE97
 11284 0160 00000000 		.4byte	.LFB98
 11285 0164 14000000 		.4byte	.LFE98
 11286 0168 00000000 		.4byte	.LFB99
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 301


 11287 016c 58000000 		.4byte	.LFE99
 11288 0170 00000000 		.4byte	.LFB100
 11289 0174 10000000 		.4byte	.LFE100
 11290 0178 00000000 		.4byte	.LFB105
 11291 017c 18000000 		.4byte	.LFE105
 11292 0180 00000000 		.4byte	.LFB108
 11293 0184 0C000000 		.4byte	.LFE108
 11294 0188 00000000 		.4byte	.LFB109
 11295 018c D0000000 		.4byte	.LFE109
 11296 0190 00000000 		.4byte	.LFB110
 11297 0194 88000000 		.4byte	.LFE110
 11298 0198 00000000 		.4byte	.LFB111
 11299 019c A0000000 		.4byte	.LFE111
 11300 01a0 00000000 		.4byte	.LFB112
 11301 01a4 20000000 		.4byte	.LFE112
 11302 01a8 00000000 		.4byte	.LFB113
 11303 01ac 20000000 		.4byte	.LFE113
 11304 01b0 00000000 		.4byte	.LFB114
 11305 01b4 80000000 		.4byte	.LFE114
 11306 01b8 00000000 		.4byte	.LFB115
 11307 01bc A4000000 		.4byte	.LFE115
 11308 01c0 00000000 		.4byte	.LFB116
 11309 01c4 B8000000 		.4byte	.LFE116
 11310 01c8 00000000 		.4byte	.LFB117
 11311 01cc D8000000 		.4byte	.LFE117
 11312 01d0 00000000 		.4byte	.LFB118
 11313 01d4 9C000000 		.4byte	.LFE118
 11314 01d8 00000000 		.4byte	.LFB119
 11315 01dc 34000000 		.4byte	.LFE119
 11316 01e0 00000000 		.4byte	0
 11317 01e4 00000000 		.4byte	0
 11318              		.section	.debug_line,"",%progbits
 11319              	.Ldebug_line0:
 11320 0000 CC0A0000 		.section	.debug_str,"MS",%progbits,1
 11320      0200B602 
 11320      00000201 
 11320      FB0E0D00 
 11320      01010101 
 11321              	.LASF46:
 11322 0000 65537573 		.ascii	"eSuspended\000"
 11322      70656E64 
 11322      656400
 11323              	.LASF110:
 11324 000b 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11324      426C6F63 
 11324      6B496E64 
 11324      6566696E 
 11324      6974656C 
 11325              	.LASF86:
 11326 0021 75635265 		.ascii	"ucReturn\000"
 11326      7475726E 
 11326      00
 11327              	.LASF78:
 11328 002a 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11328      6967696E 
 11328      616C4241 
 11328      53455052 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 302


 11328      4900
 11329              	.LASF136:
 11330 003c 78546963 		.ascii	"xTicks\000"
 11330      6B7300
 11331              	.LASF155:
 11332 0043 76546173 		.ascii	"vTaskSuspend\000"
 11332      6B537573 
 11332      70656E64 
 11332      00
 11333              	.LASF4:
 11334 0050 73697A65 		.ascii	"size_t\000"
 11334      5F7400
 11335              	.LASF36:
 11336 0057 4D696E69 		.ascii	"MiniListItem_t\000"
 11336      4C697374 
 11336      4974656D 
 11336      5F7400
 11337              	.LASF59:
 11338 0066 54696D65 		.ascii	"TimeOut_t\000"
 11338      4F75745F 
 11338      7400
 11339              	.LASF212:
 11340 0070 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11340      7272656E 
 11340      744E756D 
 11340      6265724F 
 11340      66546173 
 11341              	.LASF195:
 11342 0087 756C5661 		.ascii	"ulValue\000"
 11342      6C756500 
 11343              	.LASF183:
 11344 008f 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11344      736B5265 
 11344      73657445 
 11344      76656E74 
 11344      4974656D 
 11345              	.LASF217:
 11346 00a9 78596965 		.ascii	"xYieldPending\000"
 11346      6C645065 
 11346      6E64696E 
 11346      6700
 11347              	.LASF5:
 11348 00b7 5F5F7569 		.ascii	"__uint8_t\000"
 11348      6E74385F 
 11348      7400
 11349              	.LASF199:
 11350 00c1 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11350      6B47656E 
 11350      65726963 
 11350      4E6F7469 
 11350      66794672 
 11351              	.LASF211:
 11352 00db 78537573 		.ascii	"xSuspendedTaskList\000"
 11352      70656E64 
 11352      65645461 
 11352      736B4C69 
 11352      737400
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 303


 11353              	.LASF150:
 11354 00ee 76546173 		.ascii	"vTaskDelay\000"
 11354      6B44656C 
 11354      617900
 11355              	.LASF202:
 11356 00f9 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11356      6B4E6F74 
 11356      69667953 
 11356      74617465 
 11356      436C6561 
 11357              	.LASF79:
 11358 010f 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11358      77424153 
 11358      45505249 
 11358      00
 11359              	.LASF45:
 11360 011c 65426C6F 		.ascii	"eBlocked\000"
 11360      636B6564 
 11360      00
 11361              	.LASF111:
 11362 0125 7854696D 		.ascii	"xTimeToWake\000"
 11362      65546F57 
 11362      616B6500 
 11363              	.LASF144:
 11364 0131 78416C72 		.ascii	"xAlreadyYielded\000"
 11364      65616479 
 11364      5969656C 
 11364      64656400 
 11365              	.LASF165:
 11366 0141 70785469 		.ascii	"pxTimeOut\000"
 11366      6D654F75 
 11366      7400
 11367              	.LASF40:
 11368 014b 784C6973 		.ascii	"xListEnd\000"
 11368      74456E64 
 11368      00
 11369              	.LASF223:
 11370 0154 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11370      52784275 
 11370      66666572 
 11370      00
 11371              	.LASF56:
 11372 0161 7854494D 		.ascii	"xTIME_OUT\000"
 11372      455F4F55 
 11372      5400
 11373              	.LASF35:
 11374 016b 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11374      495F4C49 
 11374      53545F49 
 11374      54454D00 
 11375              	.LASF177:
 11376 017b 70784D75 		.ascii	"pxMutexHolderTCB\000"
 11376      74657848 
 11376      6F6C6465 
 11376      72544342 
 11376      00
 11377              	.LASF1:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 304


 11378 018c 6C6F6E67 		.ascii	"long long int\000"
 11378      206C6F6E 
 11378      6720696E 
 11378      7400
 11379              	.LASF3:
 11380 019a 7369676E 		.ascii	"signed char\000"
 11380      65642063 
 11380      68617200 
 11381              	.LASF171:
 11382 01a6 76546173 		.ascii	"vTaskMissedYield\000"
 11382      6B4D6973 
 11382      73656459 
 11382      69656C64 
 11382      00
 11383              	.LASF127:
 11384 01b7 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11384      696F7269 
 11384      74795573 
 11384      65644F6E 
 11384      456E7472 
 11385              	.LASF109:
 11386 01cd 78546963 		.ascii	"xTicksToWait\000"
 11386      6B73546F 
 11386      57616974 
 11386      00
 11387              	.LASF220:
 11388 01da 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11388      74546173 
 11388      6B556E62 
 11388      6C6F636B 
 11388      54696D65 
 11389              	.LASF187:
 11390 01ef 78436C65 		.ascii	"xClearCountOnExit\000"
 11390      6172436F 
 11390      756E744F 
 11390      6E457869 
 11390      7400
 11391              	.LASF14:
 11392 0201 6C6F6E67 		.ascii	"long long unsigned int\000"
 11392      206C6F6E 
 11392      6720756E 
 11392      7369676E 
 11392      65642069 
 11393              	.LASF67:
 11394 0218 78537461 		.ascii	"xStateListItem\000"
 11394      74654C69 
 11394      73744974 
 11394      656D00
 11395              	.LASF196:
 11396 0227 65416374 		.ascii	"eAction\000"
 11396      696F6E00 
 11397              	.LASF141:
 11398 022f 78537769 		.ascii	"xSwitchRequired\000"
 11398      74636852 
 11398      65717569 
 11398      72656400 
 11399              	.LASF11:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 305


 11400 023f 6C6F6E67 		.ascii	"long int\000"
 11400      20696E74 
 11400      00
 11401              	.LASF65:
 11402 0248 74736B54 		.ascii	"tskTaskControlBlock\000"
 11402      61736B43 
 11402      6F6E7472 
 11402      6F6C426C 
 11402      6F636B00 
 11403              	.LASF209:
 11404 025c 78546173 		.ascii	"xTasksWaitingTermination\000"
 11404      6B735761 
 11404      6974696E 
 11404      67546572 
 11404      6D696E61 
 11405              	.LASF102:
 11406 0275 70784E65 		.ascii	"pxNewTCB\000"
 11406      77544342 
 11406      00
 11407              	.LASF51:
 11408 027e 65536574 		.ascii	"eSetBits\000"
 11408      42697473 
 11408      00
 11409              	.LASF198:
 11410 0287 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11410      6967696E 
 11410      616C4E6F 
 11410      74696679 
 11410      53746174 
 11411              	.LASF137:
 11412 029d 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11412      6B476574 
 11412      5469636B 
 11412      436F756E 
 11412      7446726F 
 11413              	.LASF42:
 11414 02b6 5461736B 		.ascii	"TaskHandle_t\000"
 11414      48616E64 
 11414      6C655F74 
 11414      00
 11415              	.LASF27:
 11416 02c3 5469636B 		.ascii	"TickType_t\000"
 11416      54797065 
 11416      5F7400
 11417              	.LASF7:
 11418 02ce 73686F72 		.ascii	"short int\000"
 11418      7420696E 
 11418      7400
 11419              	.LASF64:
 11420 02d8 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11420      72795265 
 11420      67696F6E 
 11420      5F7400
 11421              	.LASF140:
 11422 02e7 78546173 		.ascii	"xTaskIncrementTick\000"
 11422      6B496E63 
 11422      72656D65 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 306


 11422      6E745469 
 11422      636B00
 11423              	.LASF18:
 11424 02fa 75696E74 		.ascii	"uint16_t\000"
 11424      31365F74 
 11424      00
 11425              	.LASF173:
 11426 0303 70756345 		.ascii	"pucEndOfStack\000"
 11426      6E644F66 
 11426      53746163 
 11426      6B00
 11427              	.LASF25:
 11428 0311 42617365 		.ascii	"BaseType_t\000"
 11428      54797065 
 11428      5F7400
 11429              	.LASF117:
 11430 031c 65526574 		.ascii	"eReturn\000"
 11430      75726E00 
 11431              	.LASF231:
 11432 0324 764C6973 		.ascii	"vListInsertEnd\000"
 11432      74496E73 
 11432      65727445 
 11432      6E6400
 11433              	.LASF197:
 11434 0333 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11434      72657669 
 11434      6F75734E 
 11434      6F746966 
 11434      69636174 
 11435              	.LASF118:
 11436 0350 70785374 		.ascii	"pxStateList\000"
 11436      6174654C 
 11436      69737400 
 11437              	.LASF94:
 11438 035c 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11438      65736574 
 11438      4E657874 
 11438      5461736B 
 11438      556E626C 
 11439              	.LASF8:
 11440 0378 5F5F7569 		.ascii	"__uint16_t\000"
 11440      6E743136 
 11440      5F7400
 11441              	.LASF113:
 11442 0383 75735374 		.ascii	"usStackDepth\000"
 11442      61636B44 
 11442      65707468 
 11442      00
 11443              	.LASF139:
 11444 0390 78546173 		.ascii	"xTaskToQuery\000"
 11444      6B546F51 
 11444      75657279 
 11444      00
 11445              	.LASF124:
 11446 039d 76546173 		.ascii	"vTaskPrioritySet\000"
 11446      6B507269 
 11446      6F726974 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 307


 11446      79536574 
 11446      00
 11447              	.LASF57:
 11448 03ae 784F7665 		.ascii	"xOverflowCount\000"
 11448      72666C6F 
 11448      77436F75 
 11448      6E7400
 11449              	.LASF133:
 11450 03bd 76546173 		.ascii	"vTaskStartScheduler\000"
 11450      6B537461 
 11450      72745363 
 11450      68656475 
 11450      6C657200 
 11451              	.LASF235:
 11452 03d1 7076506F 		.ascii	"pvPortMalloc\000"
 11452      72744D61 
 11452      6C6C6F63 
 11452      00
 11453              	.LASF157:
 11454 03de 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11454      6B506C61 
 11454      63654F6E 
 11454      4576656E 
 11454      744C6973 
 11455              	.LASF75:
 11456 03f4 75634E6F 		.ascii	"ucNotifyState\000"
 11456      74696679 
 11456      53746174 
 11456      6500
 11457              	.LASF99:
 11458 0402 756C5374 		.ascii	"ulStackDepth\000"
 11458      61636B44 
 11458      65707468 
 11458      00
 11459              	.LASF12:
 11460 040f 5F5F7569 		.ascii	"__uint32_t\000"
 11460      6E743332 
 11460      5F7400
 11461              	.LASF222:
 11462 041a 75785363 		.ascii	"uxSchedulerSuspended\000"
 11462      68656475 
 11462      6C657253 
 11462      75737065 
 11462      6E646564 
 11463              	.LASF131:
 11464 042f 78546173 		.ascii	"xTaskResumeFromISR\000"
 11464      6B526573 
 11464      756D6546 
 11464      726F6D49 
 11464      535200
 11465              	.LASF0:
 11466 0442 756E7369 		.ascii	"unsigned int\000"
 11466      676E6564 
 11466      20696E74 
 11466      00
 11467              	.LASF87:
 11468 044f 78526574 		.ascii	"xReturn\000"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 308


 11468      75726E00 
 11469              	.LASF112:
 11470 0457 78436F6E 		.ascii	"xConstTickCount\000"
 11470      73745469 
 11470      636B436F 
 11470      756E7400 
 11471              	.LASF58:
 11472 0467 7854696D 		.ascii	"xTimeOnEntering\000"
 11472      654F6E45 
 11472      6E746572 
 11472      696E6700 
 11473              	.LASF159:
 11474 0477 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11474      6B506C61 
 11474      63654F6E 
 11474      556E6F72 
 11474      64657265 
 11475              	.LASF101:
 11476 0496 70784372 		.ascii	"pxCreatedTask\000"
 11476      65617465 
 11476      64546173 
 11476      6B00
 11477              	.LASF38:
 11478 04a4 75784E75 		.ascii	"uxNumberOfItems\000"
 11478      6D626572 
 11478      4F664974 
 11478      656D7300 
 11479              	.LASF13:
 11480 04b4 6C6F6E67 		.ascii	"long unsigned int\000"
 11480      20756E73 
 11480      69676E65 
 11480      6420696E 
 11480      7400
 11481              	.LASF44:
 11482 04c6 65526561 		.ascii	"eReady\000"
 11482      647900
 11483              	.LASF194:
 11484 04cd 78546173 		.ascii	"xTaskToNotify\000"
 11484      6B546F4E 
 11484      6F746966 
 11484      7900
 11485              	.LASF66:
 11486 04db 7078546F 		.ascii	"pxTopOfStack\000"
 11486      704F6653 
 11486      7461636B 
 11486      00
 11487              	.LASF100:
 11488 04e8 70765061 		.ascii	"pvParameters\000"
 11488      72616D65 
 11488      74657273 
 11488      00
 11489              	.LASF200:
 11490 04f5 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11490      67686572 
 11490      5072696F 
 11490      72697479 
 11490      5461736B 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 309


 11491              	.LASF76:
 11492 050f 74736B54 		.ascii	"tskTCB\000"
 11492      434200
 11493              	.LASF154:
 11494 0516 7078436F 		.ascii	"pxConstList\000"
 11494      6E73744C 
 11494      69737400 
 11495              	.LASF9:
 11496 0522 73686F72 		.ascii	"short unsigned int\000"
 11496      7420756E 
 11496      7369676E 
 11496      65642069 
 11496      6E7400
 11497              	.LASF24:
 11498 0535 53746163 		.ascii	"StackType_t\000"
 11498      6B547970 
 11498      655F7400 
 11499              	.LASF88:
 11500 0541 70785443 		.ascii	"pxTCB\000"
 11500      4200
 11501              	.LASF128:
 11502 0547 78596965 		.ascii	"xYieldRequired\000"
 11502      6C645265 
 11502      71756972 
 11502      656400
 11503              	.LASF190:
 11504 0556 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11504      7473546F 
 11504      436C6561 
 11504      724F6E45 
 11504      6E747279 
 11505              	.LASF105:
 11506 056b 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11506      64644E65 
 11506      77546173 
 11506      6B546F52 
 11506      65616479 
 11507              	.LASF129:
 11508 0584 76546173 		.ascii	"vTaskResume\000"
 11508      6B526573 
 11508      756D6500 
 11509              	.LASF224:
 11510 0590 70784375 		.ascii	"pxCurrentTCB\000"
 11510      7272656E 
 11510      74544342 
 11510      00
 11511              	.LASF120:
 11512 059d 75785265 		.ascii	"uxReturn\000"
 11512      7475726E 
 11512      00
 11513              	.LASF104:
 11514 05a6 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11514      6E697469 
 11514      616C6973 
 11514      65546173 
 11514      6B4C6973 
 11515              	.LASF206:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 310


 11516 05bd 70784465 		.ascii	"pxDelayedTaskList\000"
 11516      6C617965 
 11516      64546173 
 11516      6B4C6973 
 11516      7400
 11517              	.LASF135:
 11518 05cf 78546173 		.ascii	"xTaskGetTickCount\000"
 11518      6B476574 
 11518      5469636B 
 11518      436F756E 
 11518      7400
 11519              	.LASF158:
 11520 05e1 70784576 		.ascii	"pxEventList\000"
 11520      656E744C 
 11520      69737400 
 11521              	.LASF81:
 11522 05ed 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11522      74526169 
 11522      73654241 
 11522      53455052 
 11522      4900
 11523              	.LASF41:
 11524 05ff 4C697374 		.ascii	"List_t\000"
 11524      5F7400
 11525              	.LASF92:
 11526 0606 70756353 		.ascii	"pucStackByte\000"
 11526      7461636B 
 11526      42797465 
 11526      00
 11527              	.LASF95:
 11528 0613 70727644 		.ascii	"prvDeleteTCB\000"
 11528      656C6574 
 11528      65544342 
 11528      00
 11529              	.LASF107:
 11530 0620 70727649 		.ascii	"prvIdleTask\000"
 11530      646C6554 
 11530      61736B00 
 11531              	.LASF169:
 11532 062c 78456C61 		.ascii	"xElapsedTime\000"
 11532      70736564 
 11532      54696D65 
 11532      00
 11533              	.LASF152:
 11534 0639 76546173 		.ascii	"vTaskSwitchContext\000"
 11534      6B537769 
 11534      74636843 
 11534      6F6E7465 
 11534      787400
 11535              	.LASF52:
 11536 064c 65496E63 		.ascii	"eIncrement\000"
 11536      72656D65 
 11536      6E7400
 11537              	.LASF176:
 11538 0657 70784D75 		.ascii	"pxMutexHolder\000"
 11538      74657848 
 11538      6F6C6465 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 311


 11538      7200
 11539              	.LASF70:
 11540 0665 70785374 		.ascii	"pxStack\000"
 11540      61636B00 
 11541              	.LASF227:
 11542 066d 764C6973 		.ascii	"vListInitialiseItem\000"
 11542      74496E69 
 11542      7469616C 
 11542      69736549 
 11542      74656D00 
 11543              	.LASF239:
 11544 0681 2E2E5C46 		.ascii	"..\\FreeRTOS\\tasks.c\000"
 11544      72656552 
 11544      544F535C 
 11544      7461736B 
 11544      732E6300 
 11545              	.LASF207:
 11546 0695 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11546      6572666C 
 11546      6F774465 
 11546      6C617965 
 11546      64546173 
 11547              	.LASF15:
 11548 06af 73697A65 		.ascii	"sizetype\000"
 11548      74797065 
 11548      00
 11549              	.LASF180:
 11550 06b8 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 11550      67686573 
 11550      74507269 
 11550      6F726974 
 11550      79576169 
 11551              	.LASF2:
 11552 06d5 6C6F6E67 		.ascii	"long double\000"
 11552      20646F75 
 11552      626C6500 
 11553              	.LASF103:
 11554 06e1 78526567 		.ascii	"xRegions\000"
 11554      696F6E73 
 11554      00
 11555              	.LASF201:
 11556 06ea 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11556      6B4E6F74 
 11556      69667947 
 11556      69766546 
 11556      726F6D49 
 11557              	.LASF208:
 11558 0701 7850656E 		.ascii	"xPendingReadyList\000"
 11558      64696E67 
 11558      52656164 
 11558      794C6973 
 11558      7400
 11559              	.LASF115:
 11560 0713 78546173 		.ascii	"xTaskCreate\000"
 11560      6B437265 
 11560      61746500 
 11561              	.LASF156:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 312


 11562 071f 78546173 		.ascii	"xTaskToSuspend\000"
 11562      6B546F53 
 11562      75737065 
 11562      6E6400
 11563              	.LASF174:
 11564 072e 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11564      6B476574 
 11564      43757272 
 11564      656E7454 
 11564      61736B48 
 11565              	.LASF97:
 11566 0748 70785461 		.ascii	"pxTaskCode\000"
 11566      736B436F 
 11566      646500
 11567              	.LASF236:
 11568 0753 78506F72 		.ascii	"xPortStartScheduler\000"
 11568      74537461 
 11568      72745363 
 11568      68656475 
 11568      6C657200 
 11569              	.LASF82:
 11570 0767 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11570      72745261 
 11570      69736542 
 11570      41534550 
 11570      524900
 11571              	.LASF68:
 11572 077a 78457665 		.ascii	"xEventListItem\000"
 11572      6E744C69 
 11572      73744974 
 11572      656D00
 11573              	.LASF93:
 11574 0789 756C436F 		.ascii	"ulCount\000"
 11574      756E7400 
 11575              	.LASF53:
 11576 0791 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11576      56616C75 
 11576      65576974 
 11576      684F7665 
 11576      72777269 
 11577              	.LASF237:
 11578 07a8 76506F72 		.ascii	"vPortEndScheduler\000"
 11578      74456E64 
 11578      53636865 
 11578      64756C65 
 11578      7200
 11579              	.LASF214:
 11580 07ba 7578546F 		.ascii	"uxTopReadyPriority\000"
 11580      70526561 
 11580      64795072 
 11580      696F7269 
 11580      747900
 11581              	.LASF147:
 11582 07cd 70785072 		.ascii	"pxPreviousWakeTime\000"
 11582      6576696F 
 11582      75735761 
 11582      6B655469 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 313


 11582      6D6500
 11583              	.LASF62:
 11584 07e0 756C4C65 		.ascii	"ulLengthInBytes\000"
 11584      6E677468 
 11584      496E4279 
 11584      74657300 
 11585              	.LASF80:
 11586 07f0 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11586      74536574 
 11586      42415345 
 11586      50524900 
 11587              	.LASF33:
 11588 0800 4C697374 		.ascii	"ListItem_t\000"
 11588      4974656D 
 11588      5F7400
 11589              	.LASF179:
 11590 080b 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11590      6B507269 
 11590      6F726974 
 11590      79446973 
 11590      696E6865 
 11591              	.LASF153:
 11592 082f 7578546F 		.ascii	"uxTopPriority\000"
 11592      70507269 
 11592      6F726974 
 11592      7900
 11593              	.LASF192:
 11594 083d 70756C4E 		.ascii	"pulNotificationValue\000"
 11594      6F746966 
 11594      69636174 
 11594      696F6E56 
 11594      616C7565 
 11595              	.LASF30:
 11596 0852 70785072 		.ascii	"pxPrevious\000"
 11596      6576696F 
 11596      757300
 11597              	.LASF114:
 11598 085d 78546173 		.ascii	"xTaskToDelete\000"
 11598      6B546F44 
 11598      656C6574 
 11598      6500
 11599              	.LASF125:
 11600 086b 75784E65 		.ascii	"uxNewPriority\000"
 11600      77507269 
 11600      6F726974 
 11600      7900
 11601              	.LASF21:
 11602 0879 666C6F61 		.ascii	"float\000"
 11602      7400
 11603              	.LASF39:
 11604 087f 7078496E 		.ascii	"pxIndex\000"
 11604      64657800 
 11605              	.LASF32:
 11606 0887 7076436F 		.ascii	"pvContainer\000"
 11606      6E746169 
 11606      6E657200 
 11607              	.LASF47:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 314


 11608 0893 6544656C 		.ascii	"eDeleted\000"
 11608      65746564 
 11608      00
 11609              	.LASF116:
 11610 089c 65546173 		.ascii	"eTaskGetState\000"
 11610      6B476574 
 11610      53746174 
 11610      6500
 11611              	.LASF60:
 11612 08aa 784D454D 		.ascii	"xMEMORY_REGION\000"
 11612      4F52595F 
 11612      52454749 
 11612      4F4E00
 11613              	.LASF146:
 11614 08b9 76546173 		.ascii	"vTaskDelayUntil\000"
 11614      6B44656C 
 11614      6179556E 
 11614      74696C00 
 11615              	.LASF90:
 11616 08c9 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11616      61736B43 
 11616      6865636B 
 11616      46726565 
 11616      53746163 
 11617              	.LASF19:
 11618 08e4 696E7433 		.ascii	"int32_t\000"
 11618      325F7400 
 11619              	.LASF6:
 11620 08ec 756E7369 		.ascii	"unsigned char\000"
 11620      676E6564 
 11620      20636861 
 11620      7200
 11621              	.LASF74:
 11622 08fa 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11622      74696669 
 11622      65645661 
 11622      6C756500 
 11623              	.LASF126:
 11624 090a 75784375 		.ascii	"uxCurrentBasePriority\000"
 11624      7272656E 
 11624      74426173 
 11624      65507269 
 11624      6F726974 
 11625              	.LASF77:
 11626 0920 5443425F 		.ascii	"TCB_t\000"
 11626      7400
 11627              	.LASF161:
 11628 0926 7078556E 		.ascii	"pxUnblockedTCB\000"
 11628      626C6F63 
 11628      6B656454 
 11628      434200
 11629              	.LASF85:
 11630 0935 756C4269 		.ascii	"ulBitmap\000"
 11630      746D6170 
 11630      00
 11631              	.LASF215:
 11632 093e 78536368 		.ascii	"xSchedulerRunning\000"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 315


 11632      6564756C 
 11632      65725275 
 11632      6E6E696E 
 11632      6700
 11633              	.LASF134:
 11634 0950 76546173 		.ascii	"vTaskEndScheduler\000"
 11634      6B456E64 
 11634      53636865 
 11634      64756C65 
 11634      7200
 11635              	.LASF145:
 11636 0962 75785065 		.ascii	"uxPendedCounts\000"
 11636      6E646564 
 11636      436F756E 
 11636      747300
 11637              	.LASF130:
 11638 0971 78546173 		.ascii	"xTaskToResume\000"
 11638      6B546F52 
 11638      6573756D 
 11638      6500
 11639              	.LASF143:
 11640 097f 78546173 		.ascii	"xTaskResumeAll\000"
 11640      6B526573 
 11640      756D6541 
 11640      6C6C00
 11641              	.LASF23:
 11642 098e 5461736B 		.ascii	"TaskFunction_t\000"
 11642      46756E63 
 11642      74696F6E 
 11642      5F7400
 11643              	.LASF37:
 11644 099d 784C4953 		.ascii	"xLIST\000"
 11644      5400
 11645              	.LASF121:
 11646 09a3 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11646      736B5072 
 11646      696F7269 
 11646      74794765 
 11646      7446726F 
 11647              	.LASF238:
 11648 09bc 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11648      43313120 
 11648      352E342E 
 11648      31203230 
 11648      31363036 
 11649 09ef 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11649      20726576 
 11649      6973696F 
 11649      6E203233 
 11649      37373135 
 11650 0a22 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11650      66756E63 
 11650      74696F6E 
 11650      2D736563 
 11650      74696F6E 
 11651              	.LASF72:
 11652 0a4a 75784261 		.ascii	"uxBasePriority\000"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 316


 11652      73655072 
 11652      696F7269 
 11652      747900
 11653              	.LASF182:
 11654 0a59 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11654      6C794F6E 
 11654      654D7574 
 11654      65784865 
 11654      6C6400
 11655              	.LASF96:
 11656 0a6c 70727649 		.ascii	"prvInitialiseNewTask\000"
 11656      6E697469 
 11656      616C6973 
 11656      654E6577 
 11656      5461736B 
 11657              	.LASF225:
 11658 0a81 76506F72 		.ascii	"vPortFree\000"
 11658      74467265 
 11658      6500
 11659              	.LASF132:
 11660 0a8b 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11660      76656449 
 11660      6E746572 
 11660      72757074 
 11660      53746174 
 11661              	.LASF149:
 11662 0aa2 7853686F 		.ascii	"xShouldDelay\000"
 11662      756C6444 
 11662      656C6179 
 11662      00
 11663              	.LASF43:
 11664 0aaf 6552756E 		.ascii	"eRunning\000"
 11664      6E696E67 
 11664      00
 11665              	.LASF106:
 11666 0ab8 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11666      6865636B 
 11666      5461736B 
 11666      73576169 
 11666      74696E67 
 11667              	.LASF91:
 11668 0ad8 78546173 		.ascii	"xTask\000"
 11668      6B00
 11669              	.LASF63:
 11670 0ade 756C5061 		.ascii	"ulParameters\000"
 11670      72616D65 
 11670      74657273 
 11670      00
 11671              	.LASF234:
 11672 0aeb 764C6973 		.ascii	"vListInsert\000"
 11672      74496E73 
 11672      65727400 
 11673              	.LASF170:
 11674 0af7 76546173 		.ascii	"vTaskSuspendAll\000"
 11674      6B537573 
 11674      70656E64 
 11674      416C6C00 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 317


 11675              	.LASF73:
 11676 0b07 75784D75 		.ascii	"uxMutexesHeld\000"
 11676      74657865 
 11676      7348656C 
 11676      6400
 11677              	.LASF84:
 11678 0b15 756C4E65 		.ascii	"ulNewMaskValue\000"
 11678      774D6173 
 11678      6B56616C 
 11678      756500
 11679              	.LASF108:
 11680 0b24 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11680      64644375 
 11680      7272656E 
 11680      74546173 
 11680      6B546F44 
 11681              	.LASF16:
 11682 0b43 63686172 		.ascii	"char\000"
 11682      00
 11683              	.LASF138:
 11684 0b48 70635461 		.ascii	"pcTaskGetName\000"
 11684      736B4765 
 11684      744E616D 
 11684      6500
 11685              	.LASF232:
 11686 0b56 76506F72 		.ascii	"vPortExitCritical\000"
 11686      74457869 
 11686      74437269 
 11686      74696361 
 11686      6C00
 11687              	.LASF160:
 11688 0b68 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11688      6B52656D 
 11688      6F766546 
 11688      726F6D45 
 11688      76656E74 
 11689              	.LASF185:
 11690 0b81 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11690      736B496E 
 11690      6372656D 
 11690      656E744D 
 11690      75746578 
 11691              	.LASF240:
 11692 0b9f 433A5C55 		.ascii	"C:\\Users\\Tri94\\Documents\\PSoC Creator\\EE4450\\"
 11692      73657273 
 11692      5C547269 
 11692      39345C44 
 11692      6F63756D 
 11693 0bcc 52544F53 		.ascii	"RTOS_Mutex.cydsn\000"
 11693      5F4D7574 
 11693      65782E63 
 11693      7964736E 
 11693      00
 11694              	.LASF123:
 11695 0bdd 76546173 		.ascii	"vTaskDelete\000"
 11695      6B44656C 
 11695      65746500 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 318


 11696              	.LASF210:
 11697 0be9 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11697      6C657465 
 11697      64546173 
 11697      6B735761 
 11697      6974696E 
 11698              	.LASF122:
 11699 0c06 75785361 		.ascii	"uxSavedInterruptState\000"
 11699      76656449 
 11699      6E746572 
 11699      72757074 
 11699      53746174 
 11700              	.LASF10:
 11701 0c1c 5F5F696E 		.ascii	"__int32_t\000"
 11701      7433325F 
 11701      7400
 11702              	.LASF167:
 11703 0c26 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11703      6B436865 
 11703      636B466F 
 11703      7254696D 
 11703      654F7574 
 11704              	.LASF233:
 11705 0c3b 75784C69 		.ascii	"uxListRemove\000"
 11705      73745265 
 11705      6D6F7665 
 11705      00
 11706              	.LASF163:
 11707 0c48 70784576 		.ascii	"pxEventListItem\000"
 11707      656E744C 
 11707      69737449 
 11707      74656D00 
 11708              	.LASF219:
 11709 0c58 75785461 		.ascii	"uxTaskNumber\000"
 11709      736B4E75 
 11709      6D626572 
 11709      00
 11710              	.LASF142:
 11711 0c65 70785465 		.ascii	"pxTemp\000"
 11711      6D7000
 11712              	.LASF175:
 11713 0c6c 78546173 		.ascii	"xTaskPriorityInherit\000"
 11713      6B507269 
 11713      6F726974 
 11713      79496E68 
 11713      65726974 
 11714              	.LASF221:
 11715 0c81 7849646C 		.ascii	"xIdleTaskHandle\000"
 11715      65546173 
 11715      6B48616E 
 11715      646C6500 
 11716              	.LASF34:
 11717 0c91 784C4953 		.ascii	"xLIST_ITEM\000"
 11717      545F4954 
 11717      454D00
 11718              	.LASF203:
 11719 0c9c 70785265 		.ascii	"pxReadyTasksLists\000"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 319


 11719      61647954 
 11719      61736B73 
 11719      4C697374 
 11719      7300
 11720              	.LASF184:
 11721 0cae 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11721      736B4765 
 11721      744E756D 
 11721      6265724F 
 11721      66546173 
 11722              	.LASF230:
 11723 0cc5 76506F72 		.ascii	"vPortEnterCritical\000"
 11723      74456E74 
 11723      65724372 
 11723      69746963 
 11723      616C00
 11724              	.LASF204:
 11725 0cd8 7844656C 		.ascii	"xDelayedTaskList1\000"
 11725      61796564 
 11725      5461736B 
 11725      4C697374 
 11725      3100
 11726              	.LASF205:
 11727 0cea 7844656C 		.ascii	"xDelayedTaskList2\000"
 11727      61796564 
 11727      5461736B 
 11727      4C697374 
 11727      3200
 11728              	.LASF218:
 11729 0cfc 784E756D 		.ascii	"xNumOfOverflows\000"
 11729      4F664F76 
 11729      6572666C 
 11729      6F777300 
 11730              	.LASF193:
 11731 0d0c 78546173 		.ascii	"xTaskGenericNotify\000"
 11731      6B47656E 
 11731      65726963 
 11731      4E6F7469 
 11731      667900
 11732              	.LASF213:
 11733 0d1f 78546963 		.ascii	"xTickCount\000"
 11733      6B436F75 
 11733      6E7400
 11734              	.LASF166:
 11735 0d2a 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11735      6B496E74 
 11735      65726E61 
 11735      6C536574 
 11735      54696D65 
 11736              	.LASF31:
 11737 0d47 70764F77 		.ascii	"pvOwner\000"
 11737      6E657200 
 11738              	.LASF28:
 11739 0d4f 78497465 		.ascii	"xItemValue\000"
 11739      6D56616C 
 11739      756500
 11740              	.LASF226:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 320


 11741 0d5a 6D656D73 		.ascii	"memset\000"
 11741      657400
 11742              	.LASF83:
 11743 0d61 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 11743      7274436F 
 11743      756E744C 
 11743      65616469 
 11743      6E675A65 
 11744              	.LASF151:
 11745 0d79 78546963 		.ascii	"xTicksToDelay\000"
 11745      6B73546F 
 11745      44656C61 
 11745      7900
 11746              	.LASF228:
 11747 0d87 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11747      7274496E 
 11747      69746961 
 11747      6C697365 
 11747      53746163 
 11748              	.LASF148:
 11749 0d9d 7854696D 		.ascii	"xTimeIncrement\000"
 11749      65496E63 
 11749      72656D65 
 11749      6E7400
 11750              	.LASF54:
 11751 0dac 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11751      56616C75 
 11751      65576974 
 11751      686F7574 
 11751      4F766572 
 11752              	.LASF48:
 11753 0dc6 65496E76 		.ascii	"eInvalid\000"
 11753      616C6964 
 11753      00
 11754              	.LASF71:
 11755 0dcf 70635461 		.ascii	"pcTaskName\000"
 11755      736B4E61 
 11755      6D6500
 11756              	.LASF17:
 11757 0dda 75696E74 		.ascii	"uint8_t\000"
 11757      385F7400 
 11758              	.LASF168:
 11759 0de2 70785469 		.ascii	"pxTicksToWait\000"
 11759      636B7354 
 11759      6F576169 
 11759      7400
 11760              	.LASF89:
 11761 0df0 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11761      61736B49 
 11761      73546173 
 11761      6B537573 
 11761      70656E64 
 11762              	.LASF50:
 11763 0e07 654E6F41 		.ascii	"eNoAction\000"
 11763      6374696F 
 11763      6E00
 11764              	.LASF29:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 321


 11765 0e11 70784E65 		.ascii	"pxNext\000"
 11765      787400
 11766              	.LASF49:
 11767 0e18 65546173 		.ascii	"eTaskState\000"
 11767      6B537461 
 11767      746500
 11768              	.LASF229:
 11769 0e23 764C6973 		.ascii	"vListInitialise\000"
 11769      74496E69 
 11769      7469616C 
 11769      69736500 
 11770              	.LASF55:
 11771 0e33 654E6F74 		.ascii	"eNotifyAction\000"
 11771      69667941 
 11771      6374696F 
 11771      6E00
 11772              	.LASF189:
 11773 0e41 78546173 		.ascii	"xTaskNotifyWait\000"
 11773      6B4E6F74 
 11773      69667957 
 11773      61697400 
 11774              	.LASF188:
 11775 0e51 756C5265 		.ascii	"ulReturn\000"
 11775      7475726E 
 11775      00
 11776              	.LASF186:
 11777 0e5a 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11777      736B4E6F 
 11777      74696679 
 11777      54616B65 
 11777      00
 11778              	.LASF178:
 11779 0e6b 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11779      6B507269 
 11779      6F726974 
 11779      79446973 
 11779      696E6865 
 11780              	.LASF69:
 11781 0e83 75785072 		.ascii	"uxPriority\000"
 11781      696F7269 
 11781      747900
 11782              	.LASF172:
 11783 0e8e 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11783      736B4765 
 11783      74537461 
 11783      636B4869 
 11783      67685761 
 11784              	.LASF181:
 11785 0eaa 75785072 		.ascii	"uxPriorityToUse\000"
 11785      696F7269 
 11785      7479546F 
 11785      55736500 
 11786              	.LASF98:
 11787 0eba 70634E61 		.ascii	"pcName\000"
 11787      6D6500
 11788              	.LASF119:
 11789 0ec1 75785461 		.ascii	"uxTaskPriorityGet\000"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccOxqurW.s 			page 322


 11789      736B5072 
 11789      696F7269 
 11789      74794765 
 11789      7400
 11790              	.LASF164:
 11791 0ed3 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11791      6B536574 
 11791      54696D65 
 11791      4F757453 
 11791      74617465 
 11792              	.LASF191:
 11793 0ee8 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11793      7473546F 
 11793      436C6561 
 11793      724F6E45 
 11793      78697400 
 11794              	.LASF26:
 11795 0efc 55426173 		.ascii	"UBaseType_t\000"
 11795      65547970 
 11795      655F7400 
 11796              	.LASF22:
 11797 0f08 646F7562 		.ascii	"double\000"
 11797      6C6500
 11798              	.LASF20:
 11799 0f0f 75696E74 		.ascii	"uint32_t\000"
 11799      33325F74 
 11799      00
 11800              	.LASF162:
 11801 0f18 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 11801      6B52656D 
 11801      6F766546 
 11801      726F6D55 
 11801      6E6F7264 
 11802              	.LASF61:
 11803 0f3a 70764261 		.ascii	"pvBaseAddress\000"
 11803      73654164 
 11803      64726573 
 11803      7300
 11804              	.LASF216:
 11805 0f48 75785065 		.ascii	"uxPendedTicks\000"
 11805      6E646564 
 11805      5469636B 
 11805      7300
 11806              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
