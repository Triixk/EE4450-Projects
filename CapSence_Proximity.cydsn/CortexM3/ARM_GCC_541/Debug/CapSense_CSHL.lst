ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CapSense_BaseInit,"ax",%progbits
  20              		.align	2
  21              		.global	CapSense_BaseInit
  22              		.thumb
  23              		.thumb_func
  24              		.type	CapSense_BaseInit, %function
  25              	CapSense_BaseInit:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC5\\CapSense_CSHL.c"
   1:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/CapSense_CSHL.c **** * File Name: CapSense_CSHL.c
   3:Generated_Source\PSoC5/CapSense_CSHL.c **** * Version 3.50
   4:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   5:Generated_Source\PSoC5/CapSense_CSHL.c **** * Description:
   6:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC5/CapSense_CSHL.c **** *
   9:Generated_Source\PSoC5/CapSense_CSHL.c **** * Note:
  10:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  11:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC5/CapSense_CSHL.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC5/CapSense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC5/CapSense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC5/CapSense_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  18:Generated_Source\PSoC5/CapSense_CSHL.c **** #include "CapSense_CSHL.h"
  19:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  20:Generated_Source\PSoC5/CapSense_CSHL.c **** /* Storage of filters data */
  21:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
  22:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  23:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  24:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  25:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
  26:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  27:Generated_Source\PSoC5/CapSense_CSHL.c **** #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   | \
  28:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   | \
  29:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) | \
  30:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   | \
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 2


  31:Generated_Source\PSoC5/CapSense_CSHL.c ****         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
  32:Generated_Source\PSoC5/CapSense_CSHL.c ****         
  33:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  34:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  35:Generated_Source\PSoC5/CapSense_CSHL.c **** #else
  36:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* No Raw filters */
  37:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  38:Generated_Source\PSoC5/CapSense_CSHL.c ****         *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  39:Generated_Source\PSoC5/CapSense_CSHL.c ****         */
  40:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  41:Generated_Source\PSoC5/CapSense_CSHL.c **** uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT];
  42:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT];
  43:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT];
  44:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_sensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  46:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  48:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_fingerThreshold[] = {
  49:Generated_Source\PSoC5/CapSense_CSHL.c ****     100u, 
  50:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  51:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  52:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_noiseThreshold[] = {
  53:Generated_Source\PSoC5/CapSense_CSHL.c ****     20u, 
  54:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  55:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  56:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_hysteresis[] = {
  57:Generated_Source\PSoC5/CapSense_CSHL.c ****     10u, 
  58:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  59:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  60:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounce[] = {
  61:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, 
  62:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  63:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  64:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_debounceCounter[] = {
  65:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, 0u, 
  66:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  67:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  68:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_rawDataIndex[] = {
  69:Generated_Source\PSoC5/CapSense_CSHL.c ****     0u, /* ProximitySensor0__PROX */
  70:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  71:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  72:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  73:Generated_Source\PSoC5/CapSense_CSHL.c **** const uint8 CYCODE CapSense_numberOfSensors[] = {
  74:Generated_Source\PSoC5/CapSense_CSHL.c ****     1u, /* ProximitySensor0__PROX */
  75:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  76:Generated_Source\PSoC5/CapSense_CSHL.c **** };
  77:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  78:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  79:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  80:Generated_Source\PSoC5/CapSense_CSHL.c **** 
  81:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
  82:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_BaseInit
  83:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
  84:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  85:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
  86:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
  87:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal to raw count value. 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 3


  88:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
  89:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[sensor] array element.
  90:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads CapSense_debounceCounter[sensor] array element with initial 
  91:Generated_Source\PSoC5/CapSense_CSHL.c **** *  value equal CapSense_debounce[].
  92:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_rawFilterData2[sensor] and 
  93:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[sensor] array element with an 
  94:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value which is equal raw count value if raw data filter is enabled.
  95:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  96:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
  97:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
  98:Generated_Source\PSoC5/CapSense_CSHL.c **** *
  99:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 100:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 101:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 102:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 103:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 104:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 105:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 106:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 107:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 108:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 109:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 110:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 111:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 112:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 113:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 114:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 115:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 116:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 117:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 118:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 119:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 120:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 121:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_BaseInit(uint8 sensor) 
 122:Generated_Source\PSoC5/CapSense_CSHL.c **** {
  28              		.loc 1 122 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 10B4     		push	{r4}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 4, -4
 123:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 124:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_TOTAL_GENERICS_COUNT))
 125:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 widget = CapSense_widgetNumber[sensor];
  37              		.loc 1 125 0
  38 0002 0B4B     		ldr	r3, .L3
  39 0004 1A5C     		ldrb	r2, [r3, r0]	@ zero_extendqisi2
  40              	.LVL1:
 126:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 127:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 128:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
 129:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 debounceIndex;
 130:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 131:Generated_Source\PSoC5/CapSense_CSHL.c ****     
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 4


 132:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 133:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 134:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 135:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 136:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 137:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 138:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Initialize Baseline */
 139:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
  41              		.loc 1 139 0
  42 0006 0B4B     		ldr	r3, .L3+4
  43 0008 33F81030 		ldrh	r3, [r3, r0, lsl #1]
  44 000c 0A49     		ldr	r1, .L3+8
  45 000e 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
 140:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorBaselineLow[sensor] = 0u;
  46              		.loc 1 140 0
  47 0012 0021     		movs	r1, #0
  48 0014 094C     		ldr	r4, .L3+12
  49 0016 2154     		strb	r1, [r4, r0]
 141:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = 0u;
  50              		.loc 1 141 0
  51 0018 094C     		ldr	r4, .L3+16
  52 001a 2154     		strb	r1, [r4, r0]
 142:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 143:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_debounceCounter[widget] =  CapSense_debounce[widget];
  53              		.loc 1 143 0
  54 001c 0949     		ldr	r1, .L3+20
  55 001e 8C5C     		ldrb	r4, [r1, r2]	@ zero_extendqisi2
  56 0020 0949     		ldr	r1, .L3+24
  57 0022 8C54     		strb	r4, [r1, r2]
 144:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 145:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 146:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) |\
 147:Generated_Source\PSoC5/CapSense_CSHL.c ****          (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 148:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 149:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 150:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
 151:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 152:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) |\
 153:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) |\
 154:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) |\
 155:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) |\
 156:Generated_Source\PSoC5/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
 157:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 158:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
  58              		.loc 1 158 0
  59 0024 094A     		ldr	r2, .L3+28
  60              	.LVL2:
  61 0026 22F81030 		strh	r3, [r2, r0, lsl #1]	@ movhi
 159:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 160:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 161:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 162:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
 163:Generated_Source\PSoC5/CapSense_CSHL.c ****             *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 164:Generated_Source\PSoC5/CapSense_CSHL.c ****             */
 165:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 166:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 167:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 5


 168:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 169:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 170:Generated_Source\PSoC5/CapSense_CSHL.c **** }
  62              		.loc 1 170 0
  63 002a 10BC     		pop	{r4}
  64              		.cfi_restore 4
  65              		.cfi_def_cfa_offset 0
  66 002c 7047     		bx	lr
  67              	.L4:
  68 002e 00BF     		.align	2
  69              	.L3:
  70 0030 00000000 		.word	CapSense_widgetNumber
  71 0034 00000000 		.word	CapSense_sensorRaw
  72 0038 00000000 		.word	CapSense_sensorBaseline
  73 003c 00000000 		.word	CapSense_sensorBaselineLow
  74 0040 00000000 		.word	CapSense_sensorSignal
  75 0044 00000000 		.word	.LANCHOR0
  76 0048 00000000 		.word	.LANCHOR1
  77 004c 00000000 		.word	CapSense_rawFilterData1
  78              		.cfi_endproc
  79              	.LFE0:
  80              		.size	CapSense_BaseInit, .-CapSense_BaseInit
  81              		.section	.text.CapSense_InitializeSensorBaseline,"ax",%progbits
  82              		.align	2
  83              		.global	CapSense_InitializeSensorBaseline
  84              		.thumb
  85              		.thumb_func
  86              		.type	CapSense_InitializeSensorBaseline, %function
  87              	CapSense_InitializeSensorBaseline:
  88              	.LFB1:
 171:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 172:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 173:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 174:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeSensorBaseline
 175:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 176:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 177:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 178:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 179:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or pair 
 180:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
 181:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 182:Generated_Source\PSoC5/CapSense_CSHL.c **** *  enabled.
 183:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 184:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 185:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 186:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 187:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 188:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 189:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 190:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 191:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 192:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 193:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 194:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeSensorBaseline(uint8 sensor)
 195:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 196:Generated_Source\PSoC5/CapSense_CSHL.c **** {
  89              		.loc 1 196 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 6


  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              	.LVL3:
  94 0000 10B5     		push	{r4, lr}
  95              		.cfi_def_cfa_offset 8
  96              		.cfi_offset 4, -8
  97              		.cfi_offset 14, -4
  98 0002 0446     		mov	r4, r0
 197:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Scan sensor */
 198:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanSensor(sensor);
  99              		.loc 1 198 0
 100 0004 FFF7FEFF 		bl	CapSense_ScanSensor
 101              	.LVL4:
 102              	.L6:
 199:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 103              		.loc 1 199 0 discriminator 1
 104 0008 FFF7FEFF 		bl	CapSense_IsBusy
 105              	.LVL5:
 106 000c 0028     		cmp	r0, #0
 107 000e FBD1     		bne	.L6
 200:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 201:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 202:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 203:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 204:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 205:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize Baseline, Signal and debounce counters */       
 206:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(sensor);
 108              		.loc 1 206 0
 109 0010 2046     		mov	r0, r4
 110 0012 FFF7FEFF 		bl	CapSense_BaseInit
 111              	.LVL6:
 112 0016 10BD     		pop	{r4, pc}
 113              		.cfi_endproc
 114              	.LFE1:
 115              		.size	CapSense_InitializeSensorBaseline, .-CapSense_InitializeSensorBaseline
 116              		.section	.text.CapSense_InitializeAllBaselines,"ax",%progbits
 117              		.align	2
 118              		.global	CapSense_InitializeAllBaselines
 119              		.thumb
 120              		.thumb_func
 121              		.type	CapSense_InitializeAllBaselines, %function
 122              	CapSense_InitializeAllBaselines:
 123              	.LFB2:
 207:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 208:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 209:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 210:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
 211:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 212:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */ 
 213:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 214:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 215:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 216:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
 217:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 218:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */
 219:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 7


 220:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 221:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 222:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 223:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 224:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 225:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 226:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 227:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeAllBaselines
 228:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 229:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 230:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 231:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 232:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] array with an initial values by scanning 
 233:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw count values are copied into the baseline array for 
 234:Generated_Source\PSoC5/CapSense_CSHL.c **** *  all sensors. The raw data filters are initialized if enabled.
 235:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 236:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 237:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 238:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 239:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 240:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 241:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 242:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 243:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 244:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 245:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 246:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeAllBaselines(void)
 247:Generated_Source\PSoC5/CapSense_CSHL.c ****                           
 248:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 124              		.loc 1 248 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128 0000 10B5     		push	{r4, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 4, -8
 131              		.cfi_offset 14, -4
 132              	.LVL7:
 249:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 250:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 251:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* The baseline initialize by sensor of sensor pair */
 252:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 133              		.loc 1 252 0
 134 0002 0024     		movs	r4, #0
 135 0004 04E0     		b	.L9
 136              	.LVL8:
 137              	.L10:
 253:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 254:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_InitializeSensorBaseline(i);
 138              		.loc 1 254 0 discriminator 3
 139 0006 2046     		mov	r0, r4
 140 0008 FFF7FEFF 		bl	CapSense_InitializeSensorBaseline
 141              	.LVL9:
 252:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 142              		.loc 1 252 0 discriminator 3
 143 000c 0134     		adds	r4, r4, #1
 144              	.LVL10:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 8


 145 000e E4B2     		uxtb	r4, r4
 146              	.LVL11:
 147              	.L9:
 252:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 148              		.loc 1 252 0 is_stmt 0 discriminator 1
 149 0010 002C     		cmp	r4, #0
 150 0012 F8D0     		beq	.L10
 255:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 256:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 151              		.loc 1 256 0 is_stmt 1
 152 0014 10BD     		pop	{r4, pc}
 153              		.cfi_endproc
 154              	.LFE2:
 155              		.size	CapSense_InitializeAllBaselines, .-CapSense_InitializeAllBaselines
 156 0016 00BF     		.section	.text.CapSense_InitializeEnabledBaselines,"ax",%progbits
 157              		.align	2
 158              		.global	CapSense_InitializeEnabledBaselines
 159              		.thumb
 160              		.thumb_func
 161              		.type	CapSense_InitializeEnabledBaselines, %function
 162              	CapSense_InitializeEnabledBaselines:
 163              	.LFB3:
 257:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 258:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 259:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 260:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_InitializeEnabledBaselines
 261:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 262:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 263:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 264:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Scans all enabled widgets and the raw count values are copied into the 
 265:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline array for all sensors enabled in scanning process. Baselines 
 266:Generated_Source\PSoC5/CapSense_CSHL.c **** *  initialize with zero values for sensors disabled from scanning process. 
 267:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The raw data filters are initialized if enabled.
 268:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 269:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 270:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 271:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 272:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 273:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 274:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 275:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 276:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 277:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 278:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 279:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_InitializeEnabledBaselines(void)
 280:Generated_Source\PSoC5/CapSense_CSHL.c ****                              
 281:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 164              		.loc 1 281 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 10B5     		push	{r4, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 4, -8
 171              		.cfi_offset 14, -4
 282:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 283:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 9


 284:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 285:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 286:Generated_Source\PSoC5/CapSense_CSHL.c ****     CapSense_ScanEnabledWidgets();
 172              		.loc 1 286 0
 173 0002 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
 174              	.LVL12:
 175              	.L13:
 287:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 176              		.loc 1 287 0 discriminator 1
 177 0006 FFF7FEFF 		bl	CapSense_IsBusy
 178              	.LVL13:
 179 000a 0028     		cmp	r0, #0
 180 000c FBD1     		bne	.L13
 181 000e 0024     		movs	r4, #0
 182 0010 11E0     		b	.L14
 183              	.LVL14:
 184              	.L16:
 288:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 289:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Wait while busy */
 290:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 291:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 292:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 293:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 294:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 185              		.loc 1 294 0
 186 0012 E208     		lsrs	r2, r4, #3
 295:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (i & 0x07u);
 187              		.loc 1 295 0
 188 0014 04F00701 		and	r1, r4, #7
 189 0018 0123     		movs	r3, #1
 190 001a 8B40     		lsls	r3, r3, r1
 191              	.LVL15:
 296:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 297:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 298:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) == 0u)
 192              		.loc 1 298 0
 193 001c 0749     		ldr	r1, .L18
 194 001e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 195 0020 1342     		tst	r3, r2
 196 0022 03D1     		bne	.L15
 299:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 300:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorRaw[i] = 0u;
 197              		.loc 1 300 0
 198 0024 0022     		movs	r2, #0
 199 0026 064B     		ldr	r3, .L18+4
 200              	.LVL16:
 201 0028 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 202              	.L15:
 301:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 302:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 303:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Initialize baselines */
 304:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_BaseInit(i);
 203              		.loc 1 304 0 discriminator 2
 204 002c 2046     		mov	r0, r4
 205 002e FFF7FEFF 		bl	CapSense_BaseInit
 206              	.LVL17:
 292:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 10


 207              		.loc 1 292 0 discriminator 2
 208 0032 0134     		adds	r4, r4, #1
 209              	.LVL18:
 210 0034 E4B2     		uxtb	r4, r4
 211              	.LVL19:
 212              	.L14:
 292:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 213              		.loc 1 292 0 is_stmt 0 discriminator 1
 214 0036 002C     		cmp	r4, #0
 215 0038 EBD0     		beq	.L16
 305:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 306:Generated_Source\PSoC5/CapSense_CSHL.c **** }  
 216              		.loc 1 306 0 is_stmt 1
 217 003a 10BD     		pop	{r4, pc}
 218              	.LVL20:
 219              	.L19:
 220              		.align	2
 221              	.L18:
 222 003c 00000000 		.word	CapSense_sensorEnableMask
 223 0040 00000000 		.word	CapSense_sensorRaw
 224              		.cfi_endproc
 225              	.LFE3:
 226              		.size	CapSense_InitializeEnabledBaselines, .-CapSense_InitializeEnabledBaselines
 227              		.section	.text.CapSense_CheckIsSensorActive,"ax",%progbits
 228              		.align	2
 229              		.global	CapSense_CheckIsSensorActive
 230              		.thumb
 231              		.thumb_func
 232              		.type	CapSense_CheckIsSensorActive, %function
 233              	CapSense_CheckIsSensorActive:
 234              	.LFB6:
 307:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 308:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 309:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 310:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateSensorBaseline
 311:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 312:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 313:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 314:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 315:Generated_Source\PSoC5/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 316:Generated_Source\PSoC5/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 317:Generated_Source\PSoC5/CapSense_CSHL.c **** *  it in CapSense_SensorSignal[sensor]. 
 318:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is enabled the baseline updated regards noise threshold. 
 319:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If auto reset option is disabled the baseline stops updating if signal is 
 320:Generated_Source\PSoC5/CapSense_CSHL.c **** *  greater that zero and baseline loads with raw count value if signal is less 
 321:Generated_Source\PSoC5/CapSense_CSHL.c **** *  that noise threshold.
 322:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 323:Generated_Source\PSoC5/CapSense_CSHL.c **** *  calculation.
 324:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 325:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 326:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 327:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 328:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 329:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 330:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 331:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 332:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 11


 333:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 334:Generated_Source\PSoC5/CapSense_CSHL.c **** *  baseline value.
 335:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 336:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 337:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 338:Generated_Source\PSoC5/CapSense_CSHL.c **** *  any enabled raw data filter.
 339:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 340:Generated_Source\PSoC5/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 341:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 342:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 343:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 344:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 345:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 346:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateSensorBaseline(uint8 sensor)
 347:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 348:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 349:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint32 calc;
 350:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 tempRaw;
 351:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 filteredRawData;
 352:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 353:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 354:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 355:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 356:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 357:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 358:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 359:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 360:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 361:Generated_Source\PSoC5/CapSense_CSHL.c ****     filteredRawData = CapSense_sensorRaw[sensor];
 362:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 363:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
 364:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 365:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
 366:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                         CapSense_rawFilterData2[sensor]);
 367:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 368:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 369:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 370:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
 371:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData;
 372:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor]
 373:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                            CapSense_rawFilterData2[sensor]);
 374:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 375:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = tempRaw;
 376:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 377:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
 378:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 379:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 380:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 381:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
 382:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 383:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 384:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 385:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
 386:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
 387:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 388:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 389:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 12


 390:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 391:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 392:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 393:Generated_Source\PSoC5/CapSense_CSHL.c ****     #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
 394:Generated_Source\PSoC5/CapSense_CSHL.c ****         filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 395:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 396:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 397:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else
 398:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* No Raw filters */
 399:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 400:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 401:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
 402:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_CalculateThresholds(sensor);
 403:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 404:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 405:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 406:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Baseline calculation */
 407:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 408:Generated_Source\PSoC5/CapSense_CSHL.c ****     if(filteredRawData >= CapSense_sensorBaseline[sensor])
 409:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 410:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 411:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
 412:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 413:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 414:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 415:Generated_Source\PSoC5/CapSense_CSHL.c ****         tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 416:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 417:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 418:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 419:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 420:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 422:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 423:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 424:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 425:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 426:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 427:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 428:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor]++;
 429:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 430:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 431:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 432:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 433:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 434:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Update Baseline if lower that noiseThreshold */
 435:Generated_Source\PSoC5/CapSense_CSHL.c ****             if ( (tempRaw <= (uint16) noiseThreshold) || 
 436:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****                    && (widget == 0u)))
 438:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 439:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 440:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make full Baseline 23 bits */
 441:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 442:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 443:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 444:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Add Raw Data to Baseline */
 445:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc += filteredRawData;
 446:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 13


 447:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Sub the high Baseline */
 448:Generated_Source\PSoC5/CapSense_CSHL.c ****                 calc -= CapSense_sensorBaseline[sensor];
 449:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 450:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 451:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 452:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 453:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 454:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_lowBaselineResetCnt[sensor] = 0u;
 455:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 456:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 457:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 458:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 459:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 460:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Calculate Signal if possitive difference > noiseThreshold */
 461:Generated_Source\PSoC5/CapSense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 462:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 463:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 464:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Over flow defence for uint8 */
 465:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 466:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 467:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = 0xFFu;
 468:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 469:Generated_Source\PSoC5/CapSense_CSHL.c ****             else 
 470:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 471:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 472:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 473:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 474:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
 475:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 476:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 477:Generated_Source\PSoC5/CapSense_CSHL.c ****     else
 478:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 479:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Signal is zero */
 480:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorSignal[sensor] = 0u;
 481:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 482:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 483:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 484:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Exclude generic widget */
 485:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 486:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 487:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 488:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 489:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 490:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 491:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_UpdateEnabledBaselines
 492:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 493:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 494:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 495:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 496:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 497:Generated_Source\PSoC5/CapSense_CSHL.c **** *  for enabled sensors.
 498:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 499:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 500:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 501:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 502:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 503:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 14


 504:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 505:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 506:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 507:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 508:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 509:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 510:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 511:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 512:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 513:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 514:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 515:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 516:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 517:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 518:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 519:Generated_Source\PSoC5/CapSense_CSHL.c ****  void CapSense_UpdateEnabledBaselines(void)
 520:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 521:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 522:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 523:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 524:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 525:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 526:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 527:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 528:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (i >> 3u);
 529:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 530:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 531:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 532:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 533:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 534:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 535:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 536:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 537:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 538:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 539:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsSensorActive
 540:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 541:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 542:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 543:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares the CapSense_SensorSignal[sensor] array element to finger
 544:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 545:Generated_Source\PSoC5/CapSense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
 546:Generated_Source\PSoC5/CapSense_CSHL.c **** *  based on whether the sensor is currently active. 
 547:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 548:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 549:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The debounce counter added to the sensor active transition.
 550:Generated_Source\PSoC5/CapSense_CSHL.c **** *  This function updates CapSense_SensorOnMask[] array element.
 551:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 552:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 553:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensor:  Sensor number.
 554:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 555:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 556:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
 557:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 558:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 559:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store diffence between 
 560:Generated_Source\PSoC5/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 15


 561:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store current debounce 
 562:Generated_Source\PSoC5/CapSense_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 563:Generated_Source\PSoC5/CapSense_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 564:Generated_Source\PSoC5/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 565:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] - used to store sensors on/off state.
 566:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
 567:Generated_Source\PSoC5/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 568:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 569:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 570:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor is inactive.
 571:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor is active.
 572:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 573:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 574:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 575:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 576:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 577:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 578:Generated_Source\PSoC5/CapSense_CSHL.c ****                                   
 579:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 235              		.loc 1 579 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL21:
 240 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 241              		.cfi_def_cfa_offset 20
 242              		.cfi_offset 4, -20
 243              		.cfi_offset 5, -16
 244              		.cfi_offset 6, -12
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 580:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounceIndex;
 581:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Get On/Off mask */
 582:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos = (sensor >> 3u);
 247              		.loc 1 582 0
 248 0002 C408     		lsrs	r4, r0, #3
 249              	.LVL22:
 583:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 onMask = 0x01u << (sensor & 0x07u);
 250              		.loc 1 583 0
 251 0004 00F00702 		and	r2, r0, #7
 252 0008 0123     		movs	r3, #1
 253 000a 9340     		lsls	r3, r3, r2
 254 000c DBB2     		uxtb	r3, r3
 255              	.LVL23:
 584:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Prepare to find debounce counter index */
 585:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 256              		.loc 1 585 0
 257 000e 194A     		ldr	r2, .L27
 258 0010 125C     		ldrb	r2, [r2, r0]	@ zero_extendqisi2
 586:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 fingerThreshold = CapSense_fingerThreshold[widget];
 259              		.loc 1 586 0
 260 0012 194D     		ldr	r5, .L27+4
 261 0014 AE18     		adds	r6, r5, r2
 262 0016 3779     		ldrb	r7, [r6, #4]	@ zero_extendqisi2
 263              	.LVL24:
 587:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 hysteresis = CapSense_hysteresis[widget];
 264              		.loc 1 587 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 16


 265 0018 317A     		ldrb	r1, [r6, #8]	@ zero_extendqisi2
 266              	.LVL25:
 588:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 debounce = CapSense_debounce[widget];
 267              		.loc 1 588 0
 268 001a AE5C     		ldrb	r6, [r5, r2]	@ zero_extendqisi2
 269              	.LVL26:
 589:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 590:Generated_Source\PSoC5/CapSense_CSHL.c ****     debounceIndex = widget;
 591:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 592:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 593:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Was on */
 594:Generated_Source\PSoC5/CapSense_CSHL.c ****     if (0u != (CapSense_sensorOnMask[pos] & onMask))
 270              		.loc 1 594 0
 271 001c 174D     		ldr	r5, .L27+8
 272 001e 2D5D     		ldrb	r5, [r5, r4]	@ zero_extendqisi2
 273 0020 2B42     		tst	r3, r5
 274 0022 0DD0     		beq	.L21
 595:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 596:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis minus */
 597:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 275              		.loc 1 597 0
 276 0024 DFF85CE0 		ldr	lr, .L27+16
 277 0028 1EF80000 		ldrb	r0, [lr, r0]	@ zero_extendqisi2
 278              	.LVL27:
 279 002c 791A     		subs	r1, r7, r1
 280              	.LVL28:
 281 002e 8842     		cmp	r0, r1
 282 0030 1ADA     		bge	.L22
 598:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 599:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_sensorOnMask[pos] &= (uint8)~onMask;
 283              		.loc 1 599 0
 284 0032 25EA0305 		bic	r5, r5, r3
 285 0036 1149     		ldr	r1, .L27+8
 286 0038 0D55     		strb	r5, [r1, r4]
 600:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce; 
 287              		.loc 1 600 0
 288 003a 1149     		ldr	r1, .L27+12
 289 003c 8E54     		strb	r6, [r1, r2]
 290 003e 13E0     		b	.L22
 291              	.LVL29:
 292              	.L21:
 601:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 602:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 603:Generated_Source\PSoC5/CapSense_CSHL.c ****     else    /* Was off */
 604:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 605:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Hysteresis plus */
 606:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 293              		.loc 1 606 0
 294 0040 DFF840E0 		ldr	lr, .L27+16
 295 0044 1EF80000 		ldrb	r0, [lr, r0]	@ zero_extendqisi2
 296              	.LVL30:
 297 0048 3944     		add	r1, r1, r7
 298              	.LVL31:
 299 004a 8842     		cmp	r0, r1
 300 004c 0ADD     		ble	.L23
 607:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 608:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor active, decrement debounce counter */
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 17


 609:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (CapSense_debounceCounter[debounceIndex] <= 1u)
 301              		.loc 1 609 0
 302 004e 0C49     		ldr	r1, .L27+12
 303 0050 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 304 0052 0129     		cmp	r1, #1
 305 0054 02D8     		bhi	.L24
 610:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 611:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorOnMask[pos] |= onMask; 
 306              		.loc 1 611 0
 307 0056 1D43     		orrs	r5, r5, r3
 308 0058 0848     		ldr	r0, .L27+8
 309 005a 0555     		strb	r5, [r0, r4]
 310              	.L24:
 612:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 613:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex]--;
 311              		.loc 1 613 0
 312 005c 0139     		subs	r1, r1, #1
 313 005e 0848     		ldr	r0, .L27+12
 314 0060 8154     		strb	r1, [r0, r2]
 315 0062 01E0     		b	.L22
 316              	.L23:
 614:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 615:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
 616:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 617:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
 618:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 317              		.loc 1 618 0
 318 0064 0649     		ldr	r1, .L27+12
 319 0066 8E54     		strb	r6, [r1, r2]
 320              	.L22:
 619:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 620:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 621:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 622:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (((CapSense_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 321              		.loc 1 622 0
 322 0068 044A     		ldr	r2, .L27+8
 323              	.LVL32:
 324 006a 105D     		ldrb	r0, [r2, r4]	@ zero_extendqisi2
 325 006c 1840     		ands	r0, r3, r0
 326 006e 00D0     		beq	.L25
 327 0070 0120     		movs	r0, #1
 328              	.L25:
 623:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 329              		.loc 1 623 0 discriminator 4
 330 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 331              	.LVL33:
 332              	.L28:
 333              		.align	2
 334              	.L27:
 335 0074 00000000 		.word	CapSense_widgetNumber
 336 0078 00000000 		.word	.LANCHOR0
 337 007c 00000000 		.word	CapSense_sensorOnMask
 338 0080 00000000 		.word	.LANCHOR1
 339 0084 00000000 		.word	CapSense_sensorSignal
 340              		.cfi_endproc
 341              	.LFE6:
 342              		.size	CapSense_CheckIsSensorActive, .-CapSense_CheckIsSensorActive
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 18


 343              		.section	.text.CapSense_CheckIsWidgetActive,"ax",%progbits
 344              		.align	2
 345              		.global	CapSense_CheckIsWidgetActive
 346              		.thumb
 347              		.thumb_func
 348              		.type	CapSense_CheckIsWidgetActive, %function
 349              	CapSense_CheckIsWidgetActive:
 350              	.LFB7:
 624:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 625:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 626:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 627:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsWidgetActive
 628:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 629:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 630:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 631:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Use function CapSense_CheckIsSensorActive() to update 
 632:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] for all sensors within the widget.
 633:Generated_Source\PSoC5/CapSense_CSHL.c **** *  If one of sensors within widget is active the function return that widget is 
 634:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active.
 635:Generated_Source\PSoC5/CapSense_CSHL.c **** *  The touch pad and matrix buttons widgets need to have active sensor within 
 636:Generated_Source\PSoC5/CapSense_CSHL.c **** *  col and row to return widget active status.
 637:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 638:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 639:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 640:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 641:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 642:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 643:Generated_Source\PSoC5/CapSense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
 644:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 645:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 646:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 647:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 648:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 649:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 650:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 651:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 351              		.loc 1 651 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              	.LVL34:
 356 0000 08B5     		push	{r3, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 3, -8
 359              		.cfi_offset 14, -4
 360              	.LVL35:
 652:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 653:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 654:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 655:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 656:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Check all sensors of the widget */
 657:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 658:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 659:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 361              		.loc 1 659 0
 362 0002 0020     		movs	r0, #0
 363              	.LVL36:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 19


 364 0004 FFF7FEFF 		bl	CapSense_CheckIsSensorActive
 365              	.LVL37:
 366 0008 00B1     		cbz	r0, .L30
 660:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 661:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_SENSOR_1_IS_ACTIVE;
 367              		.loc 1 661 0
 368 000a 0120     		movs	r0, #1
 369              	.L30:
 370              	.LVL38:
 662:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 663:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 664:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 665:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 666:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 667:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 668:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 669:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 670:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 371              		.loc 1 670 0
 372 000c 08BD     		pop	{r3, pc}
 373              		.cfi_endproc
 374              	.LFE7:
 375              		.size	CapSense_CheckIsWidgetActive, .-CapSense_CheckIsWidgetActive
 376 000e 00BF     		.section	.text.CapSense_CheckIsAnyWidgetActive,"ax",%progbits
 377              		.align	2
 378              		.global	CapSense_CheckIsAnyWidgetActive
 379              		.thumb
 380              		.thumb_func
 381              		.type	CapSense_CheckIsAnyWidgetActive, %function
 382              	CapSense_CheckIsAnyWidgetActive:
 383              	.LFB8:
 671:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 672:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 673:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 674:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsAnyWidgetActive
 675:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 676:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 677:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 678:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Compares all sensors of the CapSense_signal[] array to their finger 
 679:Generated_Source\PSoC5/CapSense_CSHL.c **** *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 680:Generated_Source\PSoC5/CapSense_CSHL.c **** *  the CapSense_SensorOnMask[] array is up to date after calling this 
 681:Generated_Source\PSoC5/CapSense_CSHL.c **** *  function.
 682:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 683:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 684:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 685:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 686:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 687:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
 688:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 689:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 690:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 691:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 692:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 693:Generated_Source\PSoC5/CapSense_CSHL.c **** uint8 CapSense_CheckIsAnyWidgetActive(void)
 694:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  
 695:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 384              		.loc 1 695 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 20


 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388 0000 38B5     		push	{r3, r4, r5, lr}
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 3, -16
 391              		.cfi_offset 4, -12
 392              		.cfi_offset 5, -8
 393              		.cfi_offset 14, -4
 394              	.LVL39:
 696:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 697:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 state = 0u;
 395              		.loc 1 697 0
 396 0002 0025     		movs	r5, #0
 698:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 699:Generated_Source\PSoC5/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 397              		.loc 1 699 0
 398 0004 2C46     		mov	r4, r5
 399 0006 06E0     		b	.L34
 400              	.LVL40:
 401              	.L36:
 700:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 701:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(i) != 0u)
 402              		.loc 1 701 0
 403 0008 2046     		mov	r0, r4
 404 000a FFF7FEFF 		bl	CapSense_CheckIsWidgetActive
 405              	.LVL41:
 406 000e 00B1     		cbz	r0, .L35
 702:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 703:Generated_Source\PSoC5/CapSense_CSHL.c ****             state = CapSense_WIDGET_IS_ACTIVE;
 407              		.loc 1 703 0
 408 0010 0125     		movs	r5, #1
 409              	.LVL42:
 410              	.L35:
 699:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 411              		.loc 1 699 0 discriminator 2
 412 0012 0134     		adds	r4, r4, #1
 413              	.LVL43:
 414 0014 E4B2     		uxtb	r4, r4
 415              	.LVL44:
 416              	.L34:
 699:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 417              		.loc 1 699 0 is_stmt 0 discriminator 1
 418 0016 002C     		cmp	r4, #0
 419 0018 F6D0     		beq	.L36
 704:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 705:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 706:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 707:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 708:Generated_Source\PSoC5/CapSense_CSHL.c ****     return (state);
 709:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 420              		.loc 1 709 0 is_stmt 1
 421 001a 2846     		mov	r0, r5
 422 001c 38BD     		pop	{r3, r4, r5, pc}
 423              		.cfi_endproc
 424              	.LFE8:
 425              		.size	CapSense_CheckIsAnyWidgetActive, .-CapSense_CheckIsAnyWidgetActive
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 21


 426 001e 00BF     		.section	.text.CapSense_EnableWidget,"ax",%progbits
 427              		.align	2
 428              		.global	CapSense_EnableWidget
 429              		.thumb
 430              		.thumb_func
 431              		.type	CapSense_EnableWidget, %function
 432              	CapSense_EnableWidget:
 433              	.LFB9:
 710:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 711:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 712:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 713:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_EnableWidget
 714:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 715:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 716:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 717:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Enable all widget elements (sensors) to scanning process.
 718:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 719:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 720:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 721:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 722:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 723:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 724:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 725:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 726:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 727:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 728:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 729:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 730:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 731:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 732:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 733:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 734:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 735:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 736:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 737:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 738:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 739:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_EnableWidget(uint8 widget)
 740:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    
 741:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 434              		.loc 1 741 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL45:
 742:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 743:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 744:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 745:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 746:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 747:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Enable all sensors of the widget */
 748:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 749:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 750:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 751:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 752:Generated_Source\PSoC5/CapSense_CSHL.c ****         
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 22


 753:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] |= enMask;
 440              		.loc 1 753 0
 441 0000 024A     		ldr	r2, .L40
 442 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 443 0004 43F00103 		orr	r3, r3, #1
 444 0008 1370     		strb	r3, [r2]
 445              	.LVL46:
 446 000a 7047     		bx	lr
 447              	.L41:
 448              		.align	2
 449              	.L40:
 450 000c 00000000 		.word	CapSense_sensorEnableMask
 451              		.cfi_endproc
 452              	.LFE9:
 453              		.size	CapSense_EnableWidget, .-CapSense_EnableWidget
 454              		.section	.text.CapSense_DisableWidget,"ax",%progbits
 455              		.align	2
 456              		.global	CapSense_DisableWidget
 457              		.thumb
 458              		.thumb_func
 459              		.type	CapSense_DisableWidget, %function
 460              	CapSense_DisableWidget:
 461              	.LFB10:
 754:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 755:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 756:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 757:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 758:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 759:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 760:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 761:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 762:Generated_Source\PSoC5/CapSense_CSHL.c **** /*******************************************************************************
 763:Generated_Source\PSoC5/CapSense_CSHL.c **** * Function Name: CapSense_DisableWidget
 764:Generated_Source\PSoC5/CapSense_CSHL.c **** ********************************************************************************
 765:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 766:Generated_Source\PSoC5/CapSense_CSHL.c **** * Summary:
 767:Generated_Source\PSoC5/CapSense_CSHL.c **** *  Disable all widget elements (sensors) from scanning process.
 768:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 769:Generated_Source\PSoC5/CapSense_CSHL.c **** * Parameters:
 770:Generated_Source\PSoC5/CapSense_CSHL.c **** *  widget:  widget number.
 771:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 772:Generated_Source\PSoC5/CapSense_CSHL.c **** * Return:
 773:Generated_Source\PSoC5/CapSense_CSHL.c **** *  None
 774:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 775:Generated_Source\PSoC5/CapSense_CSHL.c **** * Global Variables:
 776:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 777:Generated_Source\PSoC5/CapSense_CSHL.c **** *  state.
 778:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 779:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 780:Generated_Source\PSoC5/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 781:Generated_Source\PSoC5/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 782:Generated_Source\PSoC5/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 783:Generated_Source\PSoC5/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 784:Generated_Source\PSoC5/CapSense_CSHL.c **** *
 785:Generated_Source\PSoC5/CapSense_CSHL.c **** * Reentrant:
 786:Generated_Source\PSoC5/CapSense_CSHL.c **** *  No
 787:Generated_Source\PSoC5/CapSense_CSHL.c **** *
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 23


 788:Generated_Source\PSoC5/CapSense_CSHL.c **** *******************************************************************************/
 789:Generated_Source\PSoC5/CapSense_CSHL.c **** void CapSense_DisableWidget(uint8 widget)
 790:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
 791:Generated_Source\PSoC5/CapSense_CSHL.c **** {
 462              		.loc 1 791 0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 0
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466              		@ link register save eliminated.
 467              	.LVL47:
 792:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 pos;
 793:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 enMask;
 794:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
 795:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 796:Generated_Source\PSoC5/CapSense_CSHL.c ****    
 797:Generated_Source\PSoC5/CapSense_CSHL.c ****     /* Disable all sensors of the widget */
 798:Generated_Source\PSoC5/CapSense_CSHL.c ****     do
 799:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 800:Generated_Source\PSoC5/CapSense_CSHL.c ****         pos = (rawIndex >> 3u);
 801:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 802:Generated_Source\PSoC5/CapSense_CSHL.c ****         
 803:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_sensorEnableMask[pos] &= (uint8)~enMask;
 468              		.loc 1 803 0
 469 0000 024A     		ldr	r2, .L43
 470 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 471 0004 23F00103 		bic	r3, r3, #1
 472 0008 1370     		strb	r3, [r2]
 473              	.LVL48:
 474 000a 7047     		bx	lr
 475              	.L44:
 476              		.align	2
 477              	.L43:
 478 000c 00000000 		.word	CapSense_sensorEnableMask
 479              		.cfi_endproc
 480              	.LFE10:
 481              		.size	CapSense_DisableWidget, .-CapSense_DisableWidget
 482              		.section	.text.CapSense_IIR4Filter,"ax",%progbits
 483              		.align	2
 484              		.global	CapSense_IIR4Filter
 485              		.thumb
 486              		.thumb_func
 487              		.type	CapSense_IIR4Filter, %function
 488              	CapSense_IIR4Filter:
 489              	.LFB11:
 804:Generated_Source\PSoC5/CapSense_CSHL.c ****         rawIndex++;
 805:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 806:Generated_Source\PSoC5/CapSense_CSHL.c ****     while(rawIndex < numberOfSensors);
 807:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 808:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 809:Generated_Source\PSoC5/CapSense_CSHL.c **** }
 810:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_CENTROIDS_COUNT)
 811:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 812:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_FindMaximum
 813:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 814:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 815:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 816:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Finds index of maximum element within defined centroid. Checks 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 24


 817:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense_SensorSignal[] within defined cenrtoid and 
 818:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  returns index of maximum element. The values below finger threshold are 
 819:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  ignored.
 820:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The centrod defines by offset of first element and number of elements - count.
 821:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The diplexed centroid requires at least consecutive two elements above
 822:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  FingerThreshold to find index of maximum element.
 823:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 824:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
 825:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:  Start index of cetroid in CapSense_sensorSignal[] array.
 826:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:   number of elements within centroid.
 827:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  fingerThreshold:  Finger threshould.
 828:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:   pointer to diplex table.
 829:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 830:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
 831:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns index of maximum element within defined centroid.
 832:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If index of maximum element doesn't find the 0xFF returns.
 833:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 834:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
 835:Generated_Source\PSoC5/CapSense_CSHL.c ****     #if (CapSense_IS_DIPLEX_SLIDER)
 836:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 CY
 837:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 838:Generated_Source\PSoC5/CapSense_CSHL.c ****     #else 
 839:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
 840:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
 841:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 842:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 843:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 i;
 844:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 845:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curPos = 0u;
 846:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* No centroid at the Start */
 847:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCntrdSize = 0u;
 848:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 curCtrdStartPos = 0xFFu;
 849:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The biggset centroid is zero */
 850:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
 851:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
 852:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 853:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum = 0xFFu;
 854:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 temp = 0u;
 855:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 *startOfSlider = &CapSense_sensorSignal[offset]; 
 856:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 857:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
 858:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(diplex != 0u)
 859:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 860:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Initialize */
 861:Generated_Source\PSoC5/CapSense_CSHL.c ****                 i = 0u;
 862:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
 863:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Make slider x2 as Diplexed */
 864:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count <<= 1u;
 865:Generated_Source\PSoC5/CapSense_CSHL.c ****                 while(1u)
 866:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
 867:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
 868:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 869:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (curCtrdStartPos == 0xFFu)
 870:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 871:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Start of centroid */
 872:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = i;
 873:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 25


 874:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 875:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
 876:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 877:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize++;
 878:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 879:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 880:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else   /* Select the bigest and indicate zero start */
 881:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {          
 882:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(curCntrdSize > 0u)
 883:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 884:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* We are in the end of current */
 885:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
 886:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 887:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
 888:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
 889:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 890:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
 891:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCntrdSize = 0u;
 892:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curCtrdStartPos = 0xFFu;
 893:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 894:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 895:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 896:Generated_Source\PSoC5/CapSense_CSHL.c ****                     i++; 
 897:Generated_Source\PSoC5/CapSense_CSHL.c ****                     curPos = diplex[i];
 898:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(i == count)
 899:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 900:Generated_Source\PSoC5/CapSense_CSHL.c ****                         break;
 901:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }            
 902:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 903:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
 904:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Find the biggest centroid if two are the same size, last one wins
 905:Generated_Source\PSoC5/CapSense_CSHL.c ****                        We are in the end of current */
 906:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
 907:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 908:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
 909:Generated_Source\PSoC5/CapSense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
 910:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 911:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 912:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
 913:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 914:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Without diplexing */ 
 915:Generated_Source\PSoC5/CapSense_CSHL.c ****                 biggestCtrdSize = count;
 916:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 917:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
 918:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 919:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Check centroid size */
 920:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_NON_DIPLEX_SLIDER)
 921:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
 922:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else                    
 923:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
 924:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
 925:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 926:Generated_Source\PSoC5/CapSense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
 927:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 928:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
 929:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (diplex == 0u)
 930:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 26


 931:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = i;
 932:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 933:Generated_Source\PSoC5/CapSense_CSHL.c ****                             else
 934:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 935:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 curPos = diplex[i];
 936:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                    
 937:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #elif (CapSense_IS_DIPLEX_SLIDER)                    
 938:Generated_Source\PSoC5/CapSense_CSHL.c ****                             curPos = diplex[i];                    
 939:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
 940:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Looking for the grater element within centroid */
 941:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
 942:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
 943:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
 944:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
 945:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 maximum = i;
 946:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 temp = startOfSlider[curPos];
 947:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
 948:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
 949:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 950:Generated_Source\PSoC5/CapSense_CSHL.c ****                 } 
 951:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
 952:Generated_Source\PSoC5/CapSense_CSHL.c ****             for (i = 0u; i < count; i++)
 953:Generated_Source\PSoC5/CapSense_CSHL.c ****             {                      
 954:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Looking for the grater element within centroid */
 955:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
 956:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
 957:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(startOfSlider[i] > temp)
 958:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
 959:Generated_Source\PSoC5/CapSense_CSHL.c ****                         maximum = i;
 960:Generated_Source\PSoC5/CapSense_CSHL.c ****                         temp = startOfSlider[i];
 961:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
 962:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
 963:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 964:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 965:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (maximum);
 966:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 967:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 968:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 969:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
 970:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_CalcCentroid
 971:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
 972:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 973:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
 974:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value calculated accoring index of maximum element and API
 975:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution.
 976:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 977:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
 978:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  type:  widget type.
 979:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  diplex:  pointer to diplex table.
 980:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
 981:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
 982:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  count:    Number of elements within centroid.
 983:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
 984:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  API resolution.
 985:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  noiseThreshold:  Noise threshould.
 986:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 987:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 27


 988:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the slider.
 989:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
 990:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 991:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
 992:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
 993:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
 994:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
 995:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
 996:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         uint8 count, uint16 resolution, uint8 noiseThreshold)
 997:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
 998:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 999:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1000:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posPrev = 0u;
1001:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posNext = 0u;
1002:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT>0u)
1003:Generated_Source\PSoC5/CapSense_CSHL.c ****                
1004:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)                
1005:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 pos;
1006:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1007:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1008:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Helps while centroid calulation */
1009:Generated_Source\PSoC5/CapSense_CSHL.c ****         static uint8 CapSense_centroid[3u];
1010:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1011:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 position;
1012:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 numerator;
1013:Generated_Source\PSoC5/CapSense_CSHL.c ****         int32 denominator;
1014:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 *startOfSlider = &CapSense_sensorSignal[offset];
1015:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1016:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1017:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(type == CapSense_TYPE_RADIAL_SLIDER)
1018:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1019:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1020:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1021:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1022:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1023:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1024:Generated_Source\PSoC5/CapSense_CSHL.c ****                  
1025:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1026:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1027:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1028:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
1029:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
1030:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1031:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1032:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1033:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1034:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
1035:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1036:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1037:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1038:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1039:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
1040:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1041:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1042:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1043:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1044:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 28


1045:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1046:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1047:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1048:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1049:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0
1050:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                   
1051:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1052:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if(diplex == 0u)
1053:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1054:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = maximum;
1055:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1056:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = maximum + 1u; 
1057:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1058:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1059:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1060:Generated_Source\PSoC5/CapSense_CSHL.c ****                         pos     = diplex[maximum];
1061:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1062:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1063:Generated_Source\PSoC5/CapSense_CSHL.c ****                         count <<= 1u;
1064:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }                    
1065:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #elif (CapSense_IS_DIPLEX_SLIDER)
1066:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1067:Generated_Source\PSoC5/CapSense_CSHL.c ****                     pos     = diplex[maximum];
1068:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1069:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = diplex[maximum + 1u];
1070:Generated_Source\PSoC5/CapSense_CSHL.c ****                     count <<= 1u;                    
1071:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else                    
1072:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1073:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (maximum >= 1u)
1074:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1075:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1076:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1077:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posNext = maximum + 1u; 
1078:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1079:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1080:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Copy Signal for found centriod */
1081:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER)
1082:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[pos];
1083:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #else
1084:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1085:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1086:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1087:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1088:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1089:Generated_Source\PSoC5/CapSense_CSHL.c ****                 { 
1090:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = 0u;
1091:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1092:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1093:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1094:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1095:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1096:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = 0u;
1097:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1098:Generated_Source\PSoC5/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1099:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1100:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1101:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 29


1102:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1103:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_COUNT>0
1104:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1105:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1106:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1107:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1108:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1109:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1110:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1111:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1112:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1113:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1114:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1115:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1116:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] = 0u;
1117:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1118:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1119:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1120:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_centroid[CapSense_POS] -= noiseThreshold;
1121:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1122:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1123:Generated_Source\PSoC5/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1124:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1125:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1126:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1127:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1128:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1129:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] = 0u;
1130:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1131:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1132:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1133:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 - Si-1 */
1134:Generated_Source\PSoC5/CapSense_CSHL.c ****         numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1135:Generated_Source\PSoC5/CapSense_CSHL.c ****                     (uint32) CapSense_centroid[CapSense_POS_PREV];
1136:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1137:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1138:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1139:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS] + 
1140:Generated_Source\PSoC5/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS_NEXT];
1141:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1142:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* (numerator/denominator) + maximum */
1143:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1144:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1145:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1146:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Only required for RADIAL Slider */
1147:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(denominator < 0)
1148:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1149:Generated_Source\PSoC5/CapSense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1150:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1151:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1152:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1153:Generated_Source\PSoC5/CapSense_CSHL.c ****         denominator *= (int16)resolution;
1154:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1155:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Round the relust and put it to uint8 */
1156:Generated_Source\PSoC5/CapSense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1157:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1158:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 30


1159:Generated_Source\PSoC5/CapSense_CSHL.c ****     }    
1160:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_CENTROIDS_COUNT) */
1161:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1162:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1163:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1164:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1165:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetCentroidPos
1166:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1167:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1168:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1169:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1170:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1171:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1172:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1173:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1174:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1175:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1176:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1177:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_LS__"widget_name"            5
1178:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1179:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1180:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the linear slider.
1181:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1182:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1183:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1184:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1185:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1186:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1187:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1188:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1189:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1190:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1191:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1192:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1193:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1194:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1195:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1196:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1197:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1198:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1199:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1200:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_GetCentroidPos(uint8 widget) 
1201:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1202:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1203:Generated_Source\PSoC5/CapSense_CSHL.c ****             const uint8 CYCODE *diplex;
1204:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1205:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1206:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1207:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1208:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1209:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
1210:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1211:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1212:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1213:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1214:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1215:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 31


1216:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1217:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1218:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1219:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1220:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1221:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1222:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1223:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1224:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1225:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1226:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1227:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maximum = CapSense_diplexTable[widget];
1228:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = &CapSense_diplexTable[maximum];
1229:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1230:Generated_Source\PSoC5/CapSense_CSHL.c ****             else
1231:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1232:Generated_Source\PSoC5/CapSense_CSHL.c ****                 diplex = 0u;
1233:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1234:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1235:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1236:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */      
1237:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1238:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex)
1239:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1240:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1241:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1242:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1243:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1244:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1245:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1246:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1247:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1248:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1249:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1250:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1251:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1252:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1253:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1254:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1255:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1256:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1257:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1258:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1259:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1260:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1261:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1262:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1263:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1264:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1265:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1266:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1267:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1268:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1269:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1270:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1271:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1272:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 32


1273:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1274:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1275:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1276:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1277:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1278:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1279:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1280:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1281:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1282:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1283:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1284:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1285:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1286:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1287:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1288:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] =
1289:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1290:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1291:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1292:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /*(0u != (CapSense_MEDIAN_FILTER &
1293:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1294:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1295:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1296:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1297:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
1298:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1299:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1300:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position,
1301:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1302:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1303:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posInd
1304:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1305:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1306:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1307:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1308:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1309:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1310:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1311:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
1312:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1313:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1314:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1315:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1316:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1317:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & \
1318:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1319:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1320:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1321:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1322:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1323:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1324:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1325:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1326:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1327:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }                                
1328:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & \
1329:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 33


1330:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1331:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1332:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1333:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1334:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1335:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position,
1336:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1337:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1338:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1339:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER & \
1340:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1341:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1342:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1343:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1344:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1345:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1346:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1347:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1348:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1349:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum wasn't found */
1350:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1351:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1352:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1353:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1354:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1355:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1356:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1357:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1358:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1359:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1360:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1361:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1362:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1363:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1364:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1365:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1366:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1367:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1368:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1369:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetRadialCentroidPos
1370:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1371:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1372:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1373:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1374:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1375:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1376:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result if enabled.
1377:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1378:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1379:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number.
1380:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1381:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_RS_"widget_name"            5
1382:Generated_Source\PSoC5/CapSense_CSHL.c ****     * 
1383:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1384:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns position value of the radial slider.
1385:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1386:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 34


1387:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1388:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1389:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1390:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1391:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1392:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1393:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Note:
1394:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1395:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1396:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1397:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1398:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1399:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1400:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1401:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1402:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1403:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1404:Generated_Source\PSoC5/CapSense_CSHL.c ****      uint16 CapSense_GetRadialCentroidPos(uint8 widget)
1405:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                       
1406:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1407:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1408:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posIndex;
1409:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1410:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
1411:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1412:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1413:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1414:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1415:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 tempPos;
1416:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1417:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1418:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1419:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1420:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maximum;
1421:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 position;
1422:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1423:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1424:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1425:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within centroid */        
1426:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1427:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1428:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1429:Generated_Source\PSoC5/CapSense_CSHL.c ****             maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1430:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1431:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1432:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1433:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1434:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Calculate centroid */
1435:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1436:Generated_Source\PSoC5/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1437:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1438:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1439:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1440:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1441:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1442:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Caluclate position to store filters data */
1443:Generated_Source\PSoC5/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 35


1444:Generated_Source\PSoC5/CapSense_CSHL.c ****                     
1445:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1446:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1447:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Init filters */
1448:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1449:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1450:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1451:Generated_Source\PSoC5/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1452:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1453:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1454:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
1455:Generated_Source\PSoC5/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1456:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1457:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1458:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1459:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1460:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1461:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1462:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1463:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1464:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1465:Generated_Source\PSoC5/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1466:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1467:Generated_Source\PSoC5/CapSense_CSHL.c ****                     else
1468:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1469:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Do filtering */
1470:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1471:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1472:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1473:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1474:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1475:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1476:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
1477:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = 
1478:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                               CapSense_posFiltersDa
1479:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1480:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1481:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_MEDIAN_FILTER & 
1482:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1483:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1484:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1485:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_AVERAGING_FILTER & \
1486:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1487:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1488:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1489:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1490:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position, 
1491:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1492:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
1493:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIn
1494:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1495:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1496:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1497:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1498:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1499:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1500:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 36


1501:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1502:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1503:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1504:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1505:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1506:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1507:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & 
1508:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1509:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1510:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1511:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
1512:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1513:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1514:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1515:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1516:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1517:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1518:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & 
1519:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1520:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1521:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1522:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
1523:Generated_Source\PSoC5/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1524:Generated_Source\PSoC5/CapSense_CSHL.c ****                             {
1525:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position, 
1526:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                          CapSense_posFiltersData[po
1527:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1528:Generated_Source\PSoC5/CapSense_CSHL.c ****                             }
1529:Generated_Source\PSoC5/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER &
1530:Generated_Source\PSoC5/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
1531:Generated_Source\PSoC5/CapSense_CSHL.c ****                                */
1532:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1533:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1534:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1535:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1536:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1537:Generated_Source\PSoC5/CapSense_CSHL.c ****         else
1538:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1539:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* The maximum didn't find */
1540:Generated_Source\PSoC5/CapSense_CSHL.c ****             position = 0xFFFFu;
1541:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1542:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1543:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1544:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1545:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1546:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1547:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1548:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1549:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1550:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1551:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (position);
1552:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1553:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif
1554:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1555:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1556:Generated_Source\PSoC5/CapSense_CSHL.c **** #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
1557:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 37


1558:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_GetTouchCentroidPos
1559:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1560:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1561:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1562:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  If a finger is present on touch pad, this function calculates the X and Y
1563:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  position of the finger by calculating the centroids within touch pad specified
1564:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  range. The X and Y positions are calculated to the API resolutions set in the
1565:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
1566:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The position filter is applied to the result if enabled.
1567:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
1568:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  customizer.
1569:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1570:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1571:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  widget:  Widget number. 
1572:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
1573:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  #define CapSense_TP_"widget_name"            5
1574:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1575:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
1576:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  result of calculation of X and Y position are stored.
1577:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[0u]  - position of X
1578:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  pos[1u]  - position of Y
1579:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1580:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1581:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
1582:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1583:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Side Effects:
1584:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   There are no checks of widget type argument provided to this function.
1585:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
1586:Generated_Source\PSoC5/CapSense_CSHL.c ****     *   calculations.
1587:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1588:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Reentrant:
1589:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  No.
1590:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1591:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1592:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
1593:Generated_Source\PSoC5/CapSense_CSHL.c **** 	                                    
1594:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1595:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1596:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posXIndex;
1597:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posYIndex;
1598:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1599:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];
1600:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1601:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1602:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1603:Generated_Source\PSoC5/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1604:Generated_Source\PSoC5/CapSense_CSHL.c ****             uint16 tempPos;
1605:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1606:Generated_Source\PSoC5/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1607:Generated_Source\PSoC5/CapSense_CSHL.c ****                */
1608:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1609:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxX;
1610:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 maxY;
1611:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posX;
1612:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 posY;
1613:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 touch = 0u;
1614:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 38


1615:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1616:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1617:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* Find Maximum within X centroid */
1618:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1619:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
1620:Generated_Source\PSoC5/CapSense_CSHL.c ****         #else
1621:Generated_Source\PSoC5/CapSense_CSHL.c ****             maxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1622:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1623:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1624:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (maxX != 0xFFu)
1625:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1626:Generated_Source\PSoC5/CapSense_CSHL.c ****             offset = CapSense_rawDataIndex[widget + 1u];
1627:Generated_Source\PSoC5/CapSense_CSHL.c ****             count = CapSense_numberOfSensors[widget + 1u];
1628:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1629:Generated_Source\PSoC5/CapSense_CSHL.c ****             /* Find Maximum within Y centroid */
1630:Generated_Source\PSoC5/CapSense_CSHL.c ****             #if (CapSense_IS_DIPLEX_SLIDER)
1631:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0
1632:Generated_Source\PSoC5/CapSense_CSHL.c ****             #else
1633:Generated_Source\PSoC5/CapSense_CSHL.c ****                 maxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
1634:Generated_Source\PSoC5/CapSense_CSHL.c ****             #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1635:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1636:Generated_Source\PSoC5/CapSense_CSHL.c ****             if (maxY != 0xFFu)
1637:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1638:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* X and Y maximums are found = true touch */
1639:Generated_Source\PSoC5/CapSense_CSHL.c ****                 touch = 1u;
1640:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1641:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate Y centroid */
1642:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posY = CapSense_CalcCentroid(maxY, offset, count, 
1643:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u
1644:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1645:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Calculate X centroid */
1646:Generated_Source\PSoC5/CapSense_CSHL.c ****                 offset = CapSense_rawDataIndex[widget];
1647:Generated_Source\PSoC5/CapSense_CSHL.c ****                 count = CapSense_numberOfSensors[widget];
1648:Generated_Source\PSoC5/CapSense_CSHL.c ****                 
1649:Generated_Source\PSoC5/CapSense_CSHL.c ****                 posX = CapSense_CalcCentroid(maxX, offset, count, 
1650:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
1651:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1652:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1653:Generated_Source\PSoC5/CapSense_CSHL.c ****                     /* Check if this TP has enabled filters */
1654:Generated_Source\PSoC5/CapSense_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1655:Generated_Source\PSoC5/CapSense_CSHL.c ****                     {
1656:Generated_Source\PSoC5/CapSense_CSHL.c ****                         /* Caluclate position to store filters data */
1657:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
1658:Generated_Source\PSoC5/CapSense_CSHL.c ****                         posYIndex  = CapSense_posFiltersData[widget + 1u];
1659:Generated_Source\PSoC5/CapSense_CSHL.c ****                         
1660:Generated_Source\PSoC5/CapSense_CSHL.c ****                         if (0u == CapSense_posFiltersData[firstTimeIndex])
1661:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1662:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Init filters */
1663:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posXIndex] = posX;
1664:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[posYIndex] = posY;
1665:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1666:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if((0u != (CapSense_MEDIAN_FILTER & \
1667:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
1668:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 (0u != (CapSense_AVERAGING_FILTER & \
1669:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1670:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1671:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 39


1672:Generated_Source\PSoC5/CapSense_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1673:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1674:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = posX;
1675:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = posY;
1676:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1677:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1678:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
1679:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *    (0u != (CapSense_AVERAGING_FILTER & \
1680:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
1681:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1682:Generated_Source\PSoC5/CapSense_CSHL.c ****                             
1683:Generated_Source\PSoC5/CapSense_CSHL.c ****                             CapSense_posFiltersData[firstTimeIndex] = 1u;
1684:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1685:Generated_Source\PSoC5/CapSense_CSHL.c ****                         else
1686:Generated_Source\PSoC5/CapSense_CSHL.c ****                         {
1687:Generated_Source\PSoC5/CapSense_CSHL.c ****                             /* Do filtering */
1688:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1689:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1690:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1691:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1692:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_MedianFilter(posX,
1693:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1694:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
1695:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1696:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1697:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1698:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1699:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1700:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_MedianFilter(posY,
1701:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1702:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
1703:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1704:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1705:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1706:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1707:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1708:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_MEDIAN_FILTER & \
1709:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1710:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1711:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1712:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_M
1713:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
1714:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1715:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posX;
1716:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_AveragingFilter(posX,
1717:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1718:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
1719:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
1720:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1721:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
1722:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1723:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     tempPos = posY;
1724:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_AveragingFilter(posY, 
1725:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1726:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
1727:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
1728:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 40


1729:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
1730:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1731:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1732:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1733:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1734:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1735:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1736:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1737:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
1738:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1739:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR2Filter(posX, 
1740:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                            CapSense_posFiltersData[
1741:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1742:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     
1743:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR2Filter(posY, 
1744:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1745:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1746:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1747:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1748:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR2_FILTER & \
1749:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1750:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1751:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1752:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
1753:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1754:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 {
1755:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR4Filter((uint16)posX,
1756:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1757:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
1758:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1759:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR4Filter((uint16)posY,
1760:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1761:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
1762:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 }
1763:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 
1764:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR4_FILTER & \
1765:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1766:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1767:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1768:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
1769:Generated_Source\PSoC5/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1770:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     {
1771:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posX = (uint8) CapSense_JitterFilter(posX, 
1772:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1773:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posXIndex] = posX;
1774:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         
1775:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         posY = (uint8) CapSense_JitterFilter(posY, 
1776:Generated_Source\PSoC5/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
1777:Generated_Source\PSoC5/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posYIndex] = posY;
1778:Generated_Source\PSoC5/CapSense_CSHL.c ****                                     }
1779:Generated_Source\PSoC5/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_JITTER_FILTER & \
1780:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
1781:Generated_Source\PSoC5/CapSense_CSHL.c ****                                    */
1782:Generated_Source\PSoC5/CapSense_CSHL.c ****                         }
1783:Generated_Source\PSoC5/CapSense_CSHL.c ****                     }
1784:Generated_Source\PSoC5/CapSense_CSHL.c ****                 #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1785:Generated_Source\PSoC5/CapSense_CSHL.c **** 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 41


1786:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Save positions */
1787:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[0u] = posX;
1788:Generated_Source\PSoC5/CapSense_CSHL.c ****                 pos[1u] = posY;
1789:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1790:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1791:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1792:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
1793:Generated_Source\PSoC5/CapSense_CSHL.c ****             if(touch == 0u)
1794:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
1795:Generated_Source\PSoC5/CapSense_CSHL.c ****                 /* Reset the filters */
1796:Generated_Source\PSoC5/CapSense_CSHL.c ****                 if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
1797:Generated_Source\PSoC5/CapSense_CSHL.c ****                 {
1798:Generated_Source\PSoC5/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1799:Generated_Source\PSoC5/CapSense_CSHL.c ****                 }
1800:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
1801:Generated_Source\PSoC5/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
1802:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1803:Generated_Source\PSoC5/CapSense_CSHL.c ****         return (touch);
1804:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1805:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u) */
1806:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1807:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1808:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1809:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1810:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1811:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_MedianFilter
1812:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1813:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1814:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1815:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Median filter function. 
1816:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
1817:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  median value.
1818:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1819:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1820:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1821:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1822:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1823:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1824:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1825:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1826:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1827:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1828:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
1829:Generated_Source\PSoC5/CapSense_CSHL.c ****                                          
1830:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1831:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint16 tmp;
1832:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1833:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x1 > x2)
1834:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1835:Generated_Source\PSoC5/CapSense_CSHL.c ****             tmp = x2;
1836:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x1;
1837:Generated_Source\PSoC5/CapSense_CSHL.c ****             x1 = tmp;
1838:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1839:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1840:Generated_Source\PSoC5/CapSense_CSHL.c ****         if (x2 > x3)
1841:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
1842:Generated_Source\PSoC5/CapSense_CSHL.c ****             x2 = x3;
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 42


1843:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
1844:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1845:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
1846:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1847:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) | \
1848:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
1849:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1850:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1851:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1852:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1853:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1854:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1855:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_AveragingFilter
1856:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1857:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1858:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1859:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Averaging filter function.
1860:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of position and
1861:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  reports the averaging value.
1862:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1863:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1864:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1865:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1866:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x3:  Before previous value.
1867:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1868:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1869:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1870:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1871:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1872:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
1873:Generated_Source\PSoC5/CapSense_CSHL.c ****                                             
1874:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1875:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
1876:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1877:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1878:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1879:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) | \
1880:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
1881:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1882:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1883:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1884:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1885:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1886:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1887:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR2Filter
1888:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1889:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1890:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1891:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
1892:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1893:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1894:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1895:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1896:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1897:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1898:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1899:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 43


1900:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1901:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
1902:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1903:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
1904:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1905:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1906:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
1907:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
1908:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 1u;
1909:Generated_Source\PSoC5/CapSense_CSHL.c ****     
1910:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
1911:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
1912:Generated_Source\PSoC5/CapSense_CSHL.c **** #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) | \
1913:Generated_Source\PSoC5/CapSense_CSHL.c ****        *    (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
1914:Generated_Source\PSoC5/CapSense_CSHL.c ****        */
1915:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1916:Generated_Source\PSoC5/CapSense_CSHL.c **** 
1917:Generated_Source\PSoC5/CapSense_CSHL.c **** #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) | \
1918:Generated_Source\PSoC5/CapSense_CSHL.c ****       (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
1919:Generated_Source\PSoC5/CapSense_CSHL.c ****     /*******************************************************************************
1920:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Function Name: CapSense_IIR4Filter
1921:Generated_Source\PSoC5/CapSense_CSHL.c ****     ********************************************************************************
1922:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1923:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Summary:
1924:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
1925:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1926:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Parameters:
1927:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x1:  Current value.
1928:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  x2:  Previous value.
1929:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1930:Generated_Source\PSoC5/CapSense_CSHL.c ****     * Return:
1931:Generated_Source\PSoC5/CapSense_CSHL.c ****     *  Returns filtered value.
1932:Generated_Source\PSoC5/CapSense_CSHL.c ****     *
1933:Generated_Source\PSoC5/CapSense_CSHL.c ****     *******************************************************************************/
1934:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
1935:Generated_Source\PSoC5/CapSense_CSHL.c ****                                        
1936:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 490              		.loc 1 1936 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL49:
1937:Generated_Source\PSoC5/CapSense_CSHL.c ****         uint32 tmp;
1938:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1939:Generated_Source\PSoC5/CapSense_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
1940:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 496              		.loc 1 1940 0
 497 0000 0844     		add	r0, r0, r1
 498              	.LVL50:
1941:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 499              		.loc 1 1941 0
 500 0002 00EB4100 		add	r0, r0, r1, lsl #1
 501              	.LVL51:
1942:Generated_Source\PSoC5/CapSense_CSHL.c ****         tmp >>= 2u;
1943:Generated_Source\PSoC5/CapSense_CSHL.c ****         
1944:Generated_Source\PSoC5/CapSense_CSHL.c ****         return ((uint16) tmp);
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 44


1945:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 502              		.loc 1 1945 0
 503 0006 C0F38F00 		ubfx	r0, r0, #2, #16
 504              	.LVL52:
 505 000a 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE11:
 508              		.size	CapSense_IIR4Filter, .-CapSense_IIR4Filter
 509              		.section	.text.CapSense_UpdateSensorBaseline,"ax",%progbits
 510              		.align	2
 511              		.global	CapSense_UpdateSensorBaseline
 512              		.thumb
 513              		.thumb_func
 514              		.type	CapSense_UpdateSensorBaseline, %function
 515              	CapSense_UpdateSensorBaseline:
 516              	.LFB4:
 348:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint32 calc;
 517              		.loc 1 348 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL53:
 522 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 523              		.cfi_def_cfa_offset 24
 524              		.cfi_offset 4, -24
 525              		.cfi_offset 5, -20
 526              		.cfi_offset 6, -16
 527              		.cfi_offset 7, -12
 528              		.cfi_offset 8, -8
 529              		.cfi_offset 14, -4
 530 0004 0446     		mov	r4, r0
 352:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 531              		.loc 1 352 0
 532 0006 314B     		ldr	r3, .L57
 533 0008 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 534              	.LVL54:
 353:Generated_Source\PSoC5/CapSense_CSHL.c ****     
 535              		.loc 1 353 0
 536 000a 314A     		ldr	r2, .L57+4
 537 000c 1344     		add	r3, r3, r2
 538              	.LVL55:
 539 000e 1E7B     		ldrb	r6, [r3, #12]	@ zero_extendqisi2
 540              	.LVL56:
 382:Generated_Source\PSoC5/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = filteredRawData;
 541              		.loc 1 382 0
 542 0010 304D     		ldr	r5, .L57+8
 543 0012 35F81010 		ldrh	r1, [r5, r0, lsl #1]
 544 0016 304B     		ldr	r3, .L57+12
 545              	.LVL57:
 546 0018 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 547              	.LVL58:
 548 001c FFF7FEFF 		bl	CapSense_IIR4Filter
 549              	.LVL59:
 550 0020 0746     		mov	r7, r0
 551              	.LVL60:
 383:Generated_Source\PSoC5/CapSense_CSHL.c ****             
 552              		.loc 1 383 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 45


 553 0022 25F81400 		strh	r0, [r5, r4, lsl #1]	@ movhi
 402:Generated_Source\PSoC5/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 554              		.loc 1 402 0
 555 0026 2046     		mov	r0, r4
 556              	.LVL61:
 557 0028 FFF7FEFF 		bl	CapSense_CalculateThresholds
 558              	.LVL62:
 408:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 559              		.loc 1 408 0
 560 002c 2B4B     		ldr	r3, .L57+16
 561 002e 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 562 0032 9742     		cmp	r7, r2
 563 0034 04D3     		bcc	.L47
 410:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
 564              		.loc 1 410 0
 565 0036 BD1A     		subs	r5, r7, r2
 566 0038 ADB2     		uxth	r5, r5
 567              	.LVL63:
 411:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 568              		.loc 1 411 0
 569 003a 4FF00108 		mov	r8, #1
 570 003e 03E0     		b	.L48
 571              	.LVL64:
 572              	.L47:
 415:Generated_Source\PSoC5/CapSense_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 573              		.loc 1 415 0
 574 0040 D51B     		subs	r5, r2, r7
 575 0042 ADB2     		uxth	r5, r5
 576              	.LVL65:
 416:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 577              		.loc 1 416 0
 578 0044 4FF00008 		mov	r8, #0
 579              	.LVL66:
 580              	.L48:
 419:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 581              		.loc 1 419 0
 582 0048 B8F1000F 		cmp	r8, #0
 583 004c 10D1     		bne	.L49
 419:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 584              		.loc 1 419 0 is_stmt 0 discriminator 1
 585 004e 142D     		cmp	r5, #20
 586 0050 0ED9     		bls	.L49
 421:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 587              		.loc 1 421 0 is_stmt 1
 588 0052 234B     		ldr	r3, .L57+20
 589 0054 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 590 0056 042B     		cmp	r3, #4
 591 0058 06D9     		bls	.L50
 423:Generated_Source\PSoC5/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 592              		.loc 1 423 0
 593 005a 2046     		mov	r0, r4
 594 005c FFF7FEFF 		bl	CapSense_BaseInit
 595              	.LVL67:
 424:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 596              		.loc 1 424 0
 597 0060 0022     		movs	r2, #0
 598 0062 1F4B     		ldr	r3, .L57+20
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 46


 599 0064 1A55     		strb	r2, [r3, r4]
 600 0066 1AE0     		b	.L51
 601              	.L50:
 428:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 602              		.loc 1 428 0
 603 0068 0133     		adds	r3, r3, #1
 604 006a 1D4A     		ldr	r2, .L57+20
 605 006c 1355     		strb	r3, [r2, r4]
 606 006e 16E0     		b	.L51
 607              	.L49:
 435:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 608              		.loc 1 435 0
 609 0070 B3B2     		uxth	r3, r6
 610 0072 9D42     		cmp	r5, r3
 611 0074 04D9     		bls	.L52
 435:Generated_Source\PSoC5/CapSense_CSHL.c ****                  ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 612              		.loc 1 435 0 is_stmt 0 discriminator 1
 613 0076 132D     		cmp	r5, #19
 614 0078 11D8     		bhi	.L51
 437:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 615              		.loc 1 437 0 is_stmt 1
 616 007a B8F1000F 		cmp	r8, #0
 617 007e 0ED1     		bne	.L51
 618              	.L52:
 619              	.LVL68:
 442:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 620              		.loc 1 442 0
 621 0080 1849     		ldr	r1, .L57+24
 622 0082 0B5D     		ldrb	r3, [r1, r4]	@ zero_extendqisi2
 623 0084 43EA0223 		orr	r3, r3, r2, lsl #8
 624              	.LVL69:
 445:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 625              		.loc 1 445 0
 626 0088 1F44     		add	r7, r7, r3
 627              	.LVL70:
 448:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 628              		.loc 1 448 0
 629 008a BF1A     		subs	r7, r7, r2
 630              	.LVL71:
 451:Generated_Source\PSoC5/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 631              		.loc 1 451 0
 632 008c C7F30F22 		ubfx	r2, r7, #8, #16
 633 0090 124B     		ldr	r3, .L57+16
 634 0092 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 452:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 635              		.loc 1 452 0
 636 0096 0F55     		strb	r7, [r1, r4]
 454:Generated_Source\PSoC5/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 637              		.loc 1 454 0
 638 0098 0022     		movs	r2, #0
 639 009a 114B     		ldr	r3, .L57+20
 640 009c 1A55     		strb	r2, [r3, r4]
 641              	.LVL72:
 642              	.L51:
 461:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 643              		.loc 1 461 0
 644 009e B6B2     		uxth	r6, r6
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 47


 645              	.LVL73:
 646 00a0 B542     		cmp	r5, r6
 647 00a2 0DD9     		bls	.L53
 461:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 648              		.loc 1 461 0 is_stmt 0 discriminator 1
 649 00a4 B8F1000F 		cmp	r8, #0
 650 00a8 0AD0     		beq	.L53
 465:Generated_Source\PSoC5/CapSense_CSHL.c ****             {
 651              		.loc 1 465 0 is_stmt 1
 652 00aa FF2D     		cmp	r5, #255
 653 00ac 04D9     		bls	.L54
 467:Generated_Source\PSoC5/CapSense_CSHL.c ****             }    
 654              		.loc 1 467 0
 655 00ae FF22     		movs	r2, #255
 656 00b0 0D4B     		ldr	r3, .L57+28
 657 00b2 1A55     		strb	r2, [r3, r4]
 658 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 659              	.LVL74:
 660              	.L54:
 471:Generated_Source\PSoC5/CapSense_CSHL.c ****             }
 661              		.loc 1 471 0
 662 00b8 0B4B     		ldr	r3, .L57+28
 663 00ba 1D55     		strb	r5, [r3, r4]
 664 00bc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 665              	.LVL75:
 666              	.L53:
 480:Generated_Source\PSoC5/CapSense_CSHL.c ****     }
 667              		.loc 1 480 0
 668 00c0 0022     		movs	r2, #0
 669 00c2 094B     		ldr	r3, .L57+28
 670 00c4 1A55     		strb	r2, [r3, r4]
 671 00c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 672              	.LVL76:
 673              	.L58:
 674 00ca 00BF     		.align	2
 675              	.L57:
 676 00cc 00000000 		.word	CapSense_widgetNumber
 677 00d0 00000000 		.word	.LANCHOR0
 678 00d4 00000000 		.word	CapSense_rawFilterData1
 679 00d8 00000000 		.word	CapSense_sensorRaw
 680 00dc 00000000 		.word	CapSense_sensorBaseline
 681 00e0 00000000 		.word	CapSense_lowBaselineResetCnt
 682 00e4 00000000 		.word	CapSense_sensorBaselineLow
 683 00e8 00000000 		.word	CapSense_sensorSignal
 684              		.cfi_endproc
 685              	.LFE4:
 686              		.size	CapSense_UpdateSensorBaseline, .-CapSense_UpdateSensorBaseline
 687              		.section	.text.CapSense_UpdateEnabledBaselines,"ax",%progbits
 688              		.align	2
 689              		.global	CapSense_UpdateEnabledBaselines
 690              		.thumb
 691              		.thumb_func
 692              		.type	CapSense_UpdateEnabledBaselines, %function
 693              	CapSense_UpdateEnabledBaselines:
 694              	.LFB5:
 521:Generated_Source\PSoC5/CapSense_CSHL.c ****     uint8 i;
 695              		.loc 1 521 0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 48


 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699 0000 10B5     		push	{r4, lr}
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 4, -8
 702              		.cfi_offset 14, -4
 703              	.LVL77:
 526:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 704              		.loc 1 526 0
 705 0002 0024     		movs	r4, #0
 706 0004 0DE0     		b	.L60
 707              	.LVL78:
 708              	.L62:
 528:Generated_Source\PSoC5/CapSense_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 709              		.loc 1 528 0
 710 0006 E208     		lsrs	r2, r4, #3
 529:Generated_Source\PSoC5/CapSense_CSHL.c ****         if((CapSense_sensorEnableMask[pos] & enMask) != 0u)
 711              		.loc 1 529 0
 712 0008 04F00701 		and	r1, r4, #7
 713 000c 0123     		movs	r3, #1
 714 000e 8B40     		lsls	r3, r3, r1
 715              	.LVL79:
 530:Generated_Source\PSoC5/CapSense_CSHL.c ****         {
 716              		.loc 1 530 0
 717 0010 0549     		ldr	r1, .L64
 718 0012 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 719 0014 1342     		tst	r3, r2
 720 0016 02D0     		beq	.L61
 532:Generated_Source\PSoC5/CapSense_CSHL.c ****         }
 721              		.loc 1 532 0
 722 0018 2046     		mov	r0, r4
 723 001a FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 724              	.LVL80:
 725              	.L61:
 526:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 726              		.loc 1 526 0 discriminator 2
 727 001e 0134     		adds	r4, r4, #1
 728              	.LVL81:
 729 0020 E4B2     		uxtb	r4, r4
 730              	.LVL82:
 731              	.L60:
 526:Generated_Source\PSoC5/CapSense_CSHL.c ****     {
 732              		.loc 1 526 0 is_stmt 0 discriminator 1
 733 0022 002C     		cmp	r4, #0
 734 0024 EFD0     		beq	.L62
 535:Generated_Source\PSoC5/CapSense_CSHL.c **** 
 735              		.loc 1 535 0 is_stmt 1
 736 0026 10BD     		pop	{r4, pc}
 737              	.LVL83:
 738              	.L65:
 739              		.align	2
 740              	.L64:
 741 0028 00000000 		.word	CapSense_sensorEnableMask
 742              		.cfi_endproc
 743              	.LFE5:
 744              		.size	CapSense_UpdateEnabledBaselines, .-CapSense_UpdateEnabledBaselines
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 49


 745              		.global	CapSense_numberOfSensors
 746              		.global	CapSense_rawDataIndex
 747              		.global	CapSense_debounceCounter
 748              		.global	CapSense_debounce
 749              		.global	CapSense_hysteresis
 750              		.global	CapSense_noiseThreshold
 751              		.global	CapSense_fingerThreshold
 752              		.comm	CapSense_lowBaselineResetCnt,1,4
 753              		.comm	CapSense_sensorOnMask,1,4
 754              		.comm	CapSense_sensorSignal,1,4
 755              		.comm	CapSense_sensorBaselineLow,1,4
 756              		.comm	CapSense_sensorBaseline,2,4
 757              		.comm	CapSense_rawFilterData1,2,4
 758              		.section	.rodata
 759              		.align	2
 760              		.type	CapSense_numberOfSensors, %object
 761              		.size	CapSense_numberOfSensors, 1
 762              	CapSense_numberOfSensors:
 763 0000 01       		.byte	1
 764 0001 000000   		.space	3
 765              		.type	CapSense_rawDataIndex, %object
 766              		.size	CapSense_rawDataIndex, 1
 767              	CapSense_rawDataIndex:
 768 0004 00       		.space	1
 769              		.data
 770              		.align	2
 771              		.set	.LANCHOR0,. + 0
 772              		.type	CapSense_debounce, %object
 773              		.size	CapSense_debounce, 1
 774              	CapSense_debounce:
 775 0000 01       		.byte	1
 776 0001 000000   		.space	3
 777              		.type	CapSense_fingerThreshold, %object
 778              		.size	CapSense_fingerThreshold, 1
 779              	CapSense_fingerThreshold:
 780 0004 64       		.byte	100
 781 0005 000000   		.space	3
 782              		.type	CapSense_hysteresis, %object
 783              		.size	CapSense_hysteresis, 1
 784              	CapSense_hysteresis:
 785 0008 0A       		.byte	10
 786 0009 000000   		.space	3
 787              		.type	CapSense_noiseThreshold, %object
 788              		.size	CapSense_noiseThreshold, 1
 789              	CapSense_noiseThreshold:
 790 000c 14       		.byte	20
 791              		.bss
 792              		.align	2
 793              		.set	.LANCHOR1,. + 0
 794              		.type	CapSense_debounceCounter, %object
 795              		.size	CapSense_debounceCounter, 2
 796              	CapSense_debounceCounter:
 797 0000 0000     		.space	2
 798              		.text
 799              	.Letext0:
 800              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 801              		.file 3 "Generated_Source\\PSoC5\\CapSense.h"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 50


 802              		.file 4 "Generated_Source\\PSoC5\\CapSense_CSHL.h"
 803              		.section	.debug_info,"",%progbits
 804              	.Ldebug_info0:
 805 0000 83060000 		.4byte	0x683
 806 0004 0400     		.2byte	0x4
 807 0006 00000000 		.4byte	.Ldebug_abbrev0
 808 000a 04       		.byte	0x4
 809 000b 01       		.uleb128 0x1
 810 000c DD030000 		.4byte	.LASF64
 811 0010 0C       		.byte	0xc
 812 0011 D7040000 		.4byte	.LASF65
 813 0015 25030000 		.4byte	.LASF66
 814 0019 00000000 		.4byte	.Ldebug_ranges0+0
 815 001d 00000000 		.4byte	0
 816 0021 00000000 		.4byte	.Ldebug_line0
 817 0025 02       		.uleb128 0x2
 818 0026 01       		.byte	0x1
 819 0027 06       		.byte	0x6
 820 0028 D0000000 		.4byte	.LASF0
 821 002c 02       		.uleb128 0x2
 822 002d 01       		.byte	0x1
 823 002e 08       		.byte	0x8
 824 002f 88030000 		.4byte	.LASF1
 825 0033 02       		.uleb128 0x2
 826 0034 02       		.byte	0x2
 827 0035 05       		.byte	0x5
 828 0036 C5030000 		.4byte	.LASF2
 829 003a 02       		.uleb128 0x2
 830 003b 02       		.byte	0x2
 831 003c 07       		.byte	0x7
 832 003d E8010000 		.4byte	.LASF3
 833 0041 02       		.uleb128 0x2
 834 0042 04       		.byte	0x4
 835 0043 05       		.byte	0x5
 836 0044 12010000 		.4byte	.LASF4
 837 0048 02       		.uleb128 0x2
 838 0049 04       		.byte	0x4
 839 004a 07       		.byte	0x7
 840 004b A5010000 		.4byte	.LASF5
 841 004f 02       		.uleb128 0x2
 842 0050 08       		.byte	0x8
 843 0051 05       		.byte	0x5
 844 0052 C2000000 		.4byte	.LASF6
 845 0056 02       		.uleb128 0x2
 846 0057 08       		.byte	0x8
 847 0058 07       		.byte	0x7
 848 0059 51000000 		.4byte	.LASF7
 849 005d 03       		.uleb128 0x3
 850 005e 04       		.byte	0x4
 851 005f 05       		.byte	0x5
 852 0060 696E7400 		.ascii	"int\000"
 853 0064 02       		.uleb128 0x2
 854 0065 04       		.byte	0x4
 855 0066 07       		.byte	0x7
 856 0067 98010000 		.4byte	.LASF8
 857 006b 04       		.uleb128 0x4
 858 006c 3B010000 		.4byte	.LASF9
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 51


 859 0070 02       		.byte	0x2
 860 0071 E401     		.2byte	0x1e4
 861 0073 2C000000 		.4byte	0x2c
 862 0077 04       		.uleb128 0x4
 863 0078 00000000 		.4byte	.LASF10
 864 007c 02       		.byte	0x2
 865 007d E501     		.2byte	0x1e5
 866 007f 3A000000 		.4byte	0x3a
 867 0083 04       		.uleb128 0x4
 868 0084 5E010000 		.4byte	.LASF11
 869 0088 02       		.byte	0x2
 870 0089 E601     		.2byte	0x1e6
 871 008b 48000000 		.4byte	0x48
 872 008f 02       		.uleb128 0x2
 873 0090 04       		.byte	0x4
 874 0091 04       		.byte	0x4
 875 0092 1F030000 		.4byte	.LASF12
 876 0096 02       		.uleb128 0x2
 877 0097 08       		.byte	0x8
 878 0098 04       		.byte	0x4
 879 0099 41010000 		.4byte	.LASF13
 880 009d 02       		.uleb128 0x2
 881 009e 01       		.byte	0x1
 882 009f 08       		.byte	0x8
 883 00a0 C4040000 		.4byte	.LASF14
 884 00a4 02       		.uleb128 0x2
 885 00a5 08       		.byte	0x8
 886 00a6 04       		.byte	0x4
 887 00a7 84020000 		.4byte	.LASF15
 888 00ab 02       		.uleb128 0x2
 889 00ac 04       		.byte	0x4
 890 00ad 07       		.byte	0x7
 891 00ae 65020000 		.4byte	.LASF16
 892 00b2 05       		.uleb128 0x5
 893 00b3 6B040000 		.4byte	.LASF17
 894 00b7 01       		.byte	0x1
 895 00b8 79       		.byte	0x79
 896 00b9 00000000 		.4byte	.LFB0
 897 00bd 50000000 		.4byte	.LFE0-.LFB0
 898 00c1 01       		.uleb128 0x1
 899 00c2 9C       		.byte	0x9c
 900 00c3 E4000000 		.4byte	0xe4
 901 00c7 06       		.uleb128 0x6
 902 00c8 FB010000 		.4byte	.LASF19
 903 00cc 01       		.byte	0x1
 904 00cd 79       		.byte	0x79
 905 00ce 6B000000 		.4byte	0x6b
 906 00d2 01       		.uleb128 0x1
 907 00d3 50       		.byte	0x50
 908 00d4 07       		.uleb128 0x7
 909 00d5 CF030000 		.4byte	.LASF21
 910 00d9 01       		.byte	0x1
 911 00da 7D       		.byte	0x7d
 912 00db 6B000000 		.4byte	0x6b
 913 00df 00000000 		.4byte	.LLST0
 914 00e3 00       		.byte	0
 915 00e4 05       		.uleb128 0x5
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 52


 916 00e5 90020000 		.4byte	.LASF18
 917 00e9 01       		.byte	0x1
 918 00ea C2       		.byte	0xc2
 919 00eb 00000000 		.4byte	.LFB1
 920 00ef 18000000 		.4byte	.LFE1-.LFB1
 921 00f3 01       		.uleb128 0x1
 922 00f4 9C       		.byte	0x9c
 923 00f5 36010000 		.4byte	0x136
 924 00f9 08       		.uleb128 0x8
 925 00fa FB010000 		.4byte	.LASF19
 926 00fe 01       		.byte	0x1
 927 00ff C2       		.byte	0xc2
 928 0100 6B000000 		.4byte	0x6b
 929 0104 13000000 		.4byte	.LLST1
 930 0108 09       		.uleb128 0x9
 931 0109 08000000 		.4byte	.LVL4
 932 010d 5A060000 		.4byte	0x65a
 933 0111 1C010000 		.4byte	0x11c
 934 0115 0A       		.uleb128 0xa
 935 0116 01       		.uleb128 0x1
 936 0117 50       		.byte	0x50
 937 0118 02       		.uleb128 0x2
 938 0119 74       		.byte	0x74
 939 011a 00       		.sleb128 0
 940 011b 00       		.byte	0
 941 011c 0B       		.uleb128 0xb
 942 011d 0C000000 		.4byte	.LVL5
 943 0121 65060000 		.4byte	0x665
 944 0125 0C       		.uleb128 0xc
 945 0126 16000000 		.4byte	.LVL6
 946 012a B2000000 		.4byte	0xb2
 947 012e 0A       		.uleb128 0xa
 948 012f 01       		.uleb128 0x1
 949 0130 50       		.byte	0x50
 950 0131 02       		.uleb128 0x2
 951 0132 74       		.byte	0x74
 952 0133 00       		.sleb128 0
 953 0134 00       		.byte	0
 954 0135 00       		.byte	0
 955 0136 05       		.uleb128 0x5
 956 0137 96030000 		.4byte	.LASF20
 957 013b 01       		.byte	0x1
 958 013c F6       		.byte	0xf6
 959 013d 00000000 		.4byte	.LFB2
 960 0141 16000000 		.4byte	.LFE2-.LFB2
 961 0145 01       		.uleb128 0x1
 962 0146 9C       		.byte	0x9c
 963 0147 69010000 		.4byte	0x169
 964 014b 0D       		.uleb128 0xd
 965 014c 6900     		.ascii	"i\000"
 966 014e 01       		.byte	0x1
 967 014f F9       		.byte	0xf9
 968 0150 6B000000 		.4byte	0x6b
 969 0154 34000000 		.4byte	.LLST2
 970 0158 0C       		.uleb128 0xc
 971 0159 0C000000 		.4byte	.LVL9
 972 015d E4000000 		.4byte	0xe4
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 53


 973 0161 0A       		.uleb128 0xa
 974 0162 01       		.uleb128 0x1
 975 0163 50       		.byte	0x50
 976 0164 02       		.uleb128 0x2
 977 0165 74       		.byte	0x74
 978 0166 00       		.sleb128 0
 979 0167 00       		.byte	0
 980 0168 00       		.byte	0
 981 0169 0E       		.uleb128 0xe
 982 016a 7E000000 		.4byte	.LASF22
 983 016e 01       		.byte	0x1
 984 016f 1701     		.2byte	0x117
 985 0171 00000000 		.4byte	.LFB3
 986 0175 44000000 		.4byte	.LFE3-.LFB3
 987 0179 01       		.uleb128 0x1
 988 017a 9C       		.byte	0x9c
 989 017b CE010000 		.4byte	0x1ce
 990 017f 0F       		.uleb128 0xf
 991 0180 6900     		.ascii	"i\000"
 992 0182 01       		.byte	0x1
 993 0183 1A01     		.2byte	0x11a
 994 0185 6B000000 		.4byte	0x6b
 995 0189 5E000000 		.4byte	.LLST3
 996 018d 10       		.uleb128 0x10
 997 018e 706F7300 		.ascii	"pos\000"
 998 0192 01       		.byte	0x1
 999 0193 1B01     		.2byte	0x11b
 1000 0195 6B000000 		.4byte	0x6b
 1001 0199 01       		.uleb128 0x1
 1002 019a 52       		.byte	0x52
 1003 019b 11       		.uleb128 0x11
 1004 019c CF020000 		.4byte	.LASF23
 1005 01a0 01       		.byte	0x1
 1006 01a1 1C01     		.2byte	0x11c
 1007 01a3 6B000000 		.4byte	0x6b
 1008 01a7 7C000000 		.4byte	.LLST4
 1009 01ab 0B       		.uleb128 0xb
 1010 01ac 06000000 		.4byte	.LVL12
 1011 01b0 70060000 		.4byte	0x670
 1012 01b4 0B       		.uleb128 0xb
 1013 01b5 0A000000 		.4byte	.LVL13
 1014 01b9 65060000 		.4byte	0x665
 1015 01bd 0C       		.uleb128 0xc
 1016 01be 32000000 		.4byte	.LVL17
 1017 01c2 B2000000 		.4byte	0xb2
 1018 01c6 0A       		.uleb128 0xa
 1019 01c7 01       		.uleb128 0x1
 1020 01c8 50       		.byte	0x50
 1021 01c9 02       		.uleb128 0x2
 1022 01ca 74       		.byte	0x74
 1023 01cb 00       		.sleb128 0
 1024 01cc 00       		.byte	0
 1025 01cd 00       		.byte	0
 1026 01ce 12       		.uleb128 0x12
 1027 01cf B2020000 		.4byte	.LASF29
 1028 01d3 01       		.byte	0x1
 1029 01d4 4102     		.2byte	0x241
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 54


 1030 01d6 6B000000 		.4byte	0x6b
 1031 01da 00000000 		.4byte	.LFB6
 1032 01de 88000000 		.4byte	.LFE6-.LFB6
 1033 01e2 01       		.uleb128 0x1
 1034 01e3 9C       		.byte	0x9c
 1035 01e4 5F020000 		.4byte	0x25f
 1036 01e8 13       		.uleb128 0x13
 1037 01e9 FB010000 		.4byte	.LASF19
 1038 01ed 01       		.byte	0x1
 1039 01ee 4102     		.2byte	0x241
 1040 01f0 6B000000 		.4byte	0x6b
 1041 01f4 B1000000 		.4byte	.LLST5
 1042 01f8 14       		.uleb128 0x14
 1043 01f9 C9040000 		.4byte	.LASF25
 1044 01fd 01       		.byte	0x1
 1045 01fe 4402     		.2byte	0x244
 1046 0200 6B000000 		.4byte	0x6b
 1047 0204 0F       		.uleb128 0xf
 1048 0205 706F7300 		.ascii	"pos\000"
 1049 0209 01       		.byte	0x1
 1050 020a 4602     		.2byte	0x246
 1051 020c 6B000000 		.4byte	0x6b
 1052 0210 EB000000 		.4byte	.LLST6
 1053 0214 15       		.uleb128 0x15
 1054 0215 D6030000 		.4byte	.LASF24
 1055 0219 01       		.byte	0x1
 1056 021a 4702     		.2byte	0x247
 1057 021c 6B000000 		.4byte	0x6b
 1058 0220 01       		.uleb128 0x1
 1059 0221 53       		.byte	0x53
 1060 0222 14       		.uleb128 0x14
 1061 0223 CF030000 		.4byte	.LASF21
 1062 0227 01       		.byte	0x1
 1063 0228 4902     		.2byte	0x249
 1064 022a 6B000000 		.4byte	0x6b
 1065 022e 11       		.uleb128 0x11
 1066 022f 41000000 		.4byte	.LASF26
 1067 0233 01       		.byte	0x1
 1068 0234 4A02     		.2byte	0x24a
 1069 0236 6B000000 		.4byte	0x6b
 1070 023a FE000000 		.4byte	.LLST7
 1071 023e 11       		.uleb128 0x11
 1072 023f 65010000 		.4byte	.LASF27
 1073 0243 01       		.byte	0x1
 1074 0244 4B02     		.2byte	0x24b
 1075 0246 6B000000 		.4byte	0x6b
 1076 024a 11010000 		.4byte	.LLST8
 1077 024e 11       		.uleb128 0x11
 1078 024f 5C020000 		.4byte	.LASF28
 1079 0253 01       		.byte	0x1
 1080 0254 4C02     		.2byte	0x24c
 1081 0256 6B000000 		.4byte	0x6b
 1082 025a 53010000 		.4byte	.LLST9
 1083 025e 00       		.byte	0
 1084 025f 12       		.uleb128 0x12
 1085 0260 6B030000 		.4byte	.LASF30
 1086 0264 01       		.byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 55


 1087 0265 8902     		.2byte	0x289
 1088 0267 6B000000 		.4byte	0x6b
 1089 026b 00000000 		.4byte	.LFB7
 1090 026f 0E000000 		.4byte	.LFE7-.LFB7
 1091 0273 01       		.uleb128 0x1
 1092 0274 9C       		.byte	0x9c
 1093 0275 C6020000 		.4byte	0x2c6
 1094 0279 13       		.uleb128 0x13
 1095 027a CF030000 		.4byte	.LASF21
 1096 027e 01       		.byte	0x1
 1097 027f 8902     		.2byte	0x289
 1098 0281 6B000000 		.4byte	0x6b
 1099 0285 66010000 		.4byte	.LLST10
 1100 0289 11       		.uleb128 0x11
 1101 028a F3000000 		.4byte	.LASF31
 1102 028e 01       		.byte	0x1
 1103 028f 8C02     		.2byte	0x28c
 1104 0291 6B000000 		.4byte	0x6b
 1105 0295 87010000 		.4byte	.LLST11
 1106 0299 16       		.uleb128 0x16
 1107 029a FC000000 		.4byte	.LASF32
 1108 029e 01       		.byte	0x1
 1109 029f 8D02     		.2byte	0x28d
 1110 02a1 6B000000 		.4byte	0x6b
 1111 02a5 01       		.byte	0x1
 1112 02a6 11       		.uleb128 0x11
 1113 02a7 0C010000 		.4byte	.LASF33
 1114 02ab 01       		.byte	0x1
 1115 02ac 8E02     		.2byte	0x28e
 1116 02ae 6B000000 		.4byte	0x6b
 1117 02b2 A7010000 		.4byte	.LLST12
 1118 02b6 0C       		.uleb128 0xc
 1119 02b7 08000000 		.4byte	.LVL37
 1120 02bb CE010000 		.4byte	0x1ce
 1121 02bf 0A       		.uleb128 0xa
 1122 02c0 01       		.uleb128 0x1
 1123 02c1 50       		.byte	0x50
 1124 02c2 01       		.uleb128 0x1
 1125 02c3 30       		.byte	0x30
 1126 02c4 00       		.byte	0
 1127 02c5 00       		.byte	0
 1128 02c6 12       		.uleb128 0x12
 1129 02c7 1B010000 		.4byte	.LASF34
 1130 02cb 01       		.byte	0x1
 1131 02cc B502     		.2byte	0x2b5
 1132 02ce 6B000000 		.4byte	0x6b
 1133 02d2 00000000 		.4byte	.LFB8
 1134 02d6 1E000000 		.4byte	.LFE8-.LFB8
 1135 02da 01       		.uleb128 0x1
 1136 02db 9C       		.byte	0x9c
 1137 02dc 0F030000 		.4byte	0x30f
 1138 02e0 0F       		.uleb128 0xf
 1139 02e1 6900     		.ascii	"i\000"
 1140 02e3 01       		.byte	0x1
 1141 02e4 B802     		.2byte	0x2b8
 1142 02e6 6B000000 		.4byte	0x6b
 1143 02ea C6010000 		.4byte	.LLST13
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 56


 1144 02ee 11       		.uleb128 0x11
 1145 02ef 0C010000 		.4byte	.LASF33
 1146 02f3 01       		.byte	0x1
 1147 02f4 B902     		.2byte	0x2b9
 1148 02f6 6B000000 		.4byte	0x6b
 1149 02fa F0010000 		.4byte	.LLST14
 1150 02fe 0C       		.uleb128 0xc
 1151 02ff 0E000000 		.4byte	.LVL41
 1152 0303 5F020000 		.4byte	0x25f
 1153 0307 0A       		.uleb128 0xa
 1154 0308 01       		.uleb128 0x1
 1155 0309 50       		.byte	0x50
 1156 030a 02       		.uleb128 0x2
 1157 030b 74       		.byte	0x74
 1158 030c 00       		.sleb128 0
 1159 030d 00       		.byte	0
 1160 030e 00       		.byte	0
 1161 030f 0E       		.uleb128 0xe
 1162 0310 6E020000 		.4byte	.LASF35
 1163 0314 01       		.byte	0x1
 1164 0315 E302     		.2byte	0x2e3
 1165 0317 00000000 		.4byte	.LFB9
 1166 031b 10000000 		.4byte	.LFE9-.LFB9
 1167 031f 01       		.uleb128 0x1
 1168 0320 9C       		.byte	0x9c
 1169 0321 6B030000 		.4byte	0x36b
 1170 0325 17       		.uleb128 0x17
 1171 0326 CF030000 		.4byte	.LASF21
 1172 032a 01       		.byte	0x1
 1173 032b E302     		.2byte	0x2e3
 1174 032d 6B000000 		.4byte	0x6b
 1175 0331 01       		.uleb128 0x1
 1176 0332 50       		.byte	0x50
 1177 0333 18       		.uleb128 0x18
 1178 0334 706F7300 		.ascii	"pos\000"
 1179 0338 01       		.byte	0x1
 1180 0339 E602     		.2byte	0x2e6
 1181 033b 6B000000 		.4byte	0x6b
 1182 033f 00       		.byte	0
 1183 0340 16       		.uleb128 0x16
 1184 0341 CF020000 		.4byte	.LASF23
 1185 0345 01       		.byte	0x1
 1186 0346 E702     		.2byte	0x2e7
 1187 0348 6B000000 		.4byte	0x6b
 1188 034c 01       		.byte	0x1
 1189 034d 11       		.uleb128 0x11
 1190 034e F3000000 		.4byte	.LASF31
 1191 0352 01       		.byte	0x1
 1192 0353 E802     		.2byte	0x2e8
 1193 0355 6B000000 		.4byte	0x6b
 1194 0359 0F020000 		.4byte	.LLST15
 1195 035d 16       		.uleb128 0x16
 1196 035e FC000000 		.4byte	.LASF32
 1197 0362 01       		.byte	0x1
 1198 0363 E902     		.2byte	0x2e9
 1199 0365 6B000000 		.4byte	0x6b
 1200 0369 01       		.byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 57


 1201 036a 00       		.byte	0
 1202 036b 0E       		.uleb128 0xe
 1203 036c DC000000 		.4byte	.LASF36
 1204 0370 01       		.byte	0x1
 1205 0371 1503     		.2byte	0x315
 1206 0373 00000000 		.4byte	.LFB10
 1207 0377 10000000 		.4byte	.LFE10-.LFB10
 1208 037b 01       		.uleb128 0x1
 1209 037c 9C       		.byte	0x9c
 1210 037d C7030000 		.4byte	0x3c7
 1211 0381 17       		.uleb128 0x17
 1212 0382 CF030000 		.4byte	.LASF21
 1213 0386 01       		.byte	0x1
 1214 0387 1503     		.2byte	0x315
 1215 0389 6B000000 		.4byte	0x6b
 1216 038d 01       		.uleb128 0x1
 1217 038e 50       		.byte	0x50
 1218 038f 18       		.uleb128 0x18
 1219 0390 706F7300 		.ascii	"pos\000"
 1220 0394 01       		.byte	0x1
 1221 0395 1803     		.2byte	0x318
 1222 0397 6B000000 		.4byte	0x6b
 1223 039b 00       		.byte	0
 1224 039c 16       		.uleb128 0x16
 1225 039d CF020000 		.4byte	.LASF23
 1226 03a1 01       		.byte	0x1
 1227 03a2 1903     		.2byte	0x319
 1228 03a4 6B000000 		.4byte	0x6b
 1229 03a8 01       		.byte	0x1
 1230 03a9 11       		.uleb128 0x11
 1231 03aa F3000000 		.4byte	.LASF31
 1232 03ae 01       		.byte	0x1
 1233 03af 1A03     		.2byte	0x31a
 1234 03b1 6B000000 		.4byte	0x6b
 1235 03b5 2F020000 		.4byte	.LLST16
 1236 03b9 16       		.uleb128 0x16
 1237 03ba FC000000 		.4byte	.LASF32
 1238 03be 01       		.byte	0x1
 1239 03bf 1B03     		.2byte	0x31b
 1240 03c1 6B000000 		.4byte	0x6b
 1241 03c5 01       		.byte	0x1
 1242 03c6 00       		.byte	0
 1243 03c7 12       		.uleb128 0x12
 1244 03c8 70010000 		.4byte	.LASF37
 1245 03cc 01       		.byte	0x1
 1246 03cd 8E07     		.2byte	0x78e
 1247 03cf 77000000 		.4byte	0x77
 1248 03d3 00000000 		.4byte	.LFB11
 1249 03d7 0C000000 		.4byte	.LFE11-.LFB11
 1250 03db 01       		.uleb128 0x1
 1251 03dc 9C       		.byte	0x9c
 1252 03dd 0E040000 		.4byte	0x40e
 1253 03e1 19       		.uleb128 0x19
 1254 03e2 783100   		.ascii	"x1\000"
 1255 03e5 01       		.byte	0x1
 1256 03e6 8E07     		.2byte	0x78e
 1257 03e8 77000000 		.4byte	0x77
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 58


 1258 03ec 4F020000 		.4byte	.LLST17
 1259 03f0 1A       		.uleb128 0x1a
 1260 03f1 783200   		.ascii	"x2\000"
 1261 03f4 01       		.byte	0x1
 1262 03f5 8E07     		.2byte	0x78e
 1263 03f7 77000000 		.4byte	0x77
 1264 03fb 01       		.uleb128 0x1
 1265 03fc 51       		.byte	0x51
 1266 03fd 0F       		.uleb128 0xf
 1267 03fe 746D7000 		.ascii	"tmp\000"
 1268 0402 01       		.byte	0x1
 1269 0403 9107     		.2byte	0x791
 1270 0405 83000000 		.4byte	0x83
 1271 0409 70020000 		.4byte	.LLST18
 1272 040d 00       		.byte	0
 1273 040e 0E       		.uleb128 0xe
 1274 040f 1C020000 		.4byte	.LASF38
 1275 0413 01       		.byte	0x1
 1276 0414 5A01     		.2byte	0x15a
 1277 0416 00000000 		.4byte	.LFB4
 1278 041a EC000000 		.4byte	.LFE4-.LFB4
 1279 041e 01       		.uleb128 0x1
 1280 041f 9C       		.byte	0x9c
 1281 0420 B2040000 		.4byte	0x4b2
 1282 0424 13       		.uleb128 0x13
 1283 0425 FB010000 		.4byte	.LASF19
 1284 0429 01       		.byte	0x1
 1285 042a 5A01     		.2byte	0x15a
 1286 042c 6B000000 		.4byte	0x6b
 1287 0430 92020000 		.4byte	.LLST19
 1288 0434 11       		.uleb128 0x11
 1289 0435 3A020000 		.4byte	.LASF39
 1290 0439 01       		.byte	0x1
 1291 043a 5D01     		.2byte	0x15d
 1292 043c 83000000 		.4byte	0x83
 1293 0440 B3020000 		.4byte	.LLST20
 1294 0444 11       		.uleb128 0x11
 1295 0445 46050000 		.4byte	.LASF40
 1296 0449 01       		.byte	0x1
 1297 044a 5E01     		.2byte	0x15e
 1298 044c 77000000 		.4byte	0x77
 1299 0450 E0020000 		.4byte	.LLST21
 1300 0454 11       		.uleb128 0x11
 1301 0455 07000000 		.4byte	.LASF41
 1302 0459 01       		.byte	0x1
 1303 045a 5F01     		.2byte	0x15f
 1304 045c 77000000 		.4byte	0x77
 1305 0460 FE020000 		.4byte	.LLST22
 1306 0464 11       		.uleb128 0x11
 1307 0465 CF030000 		.4byte	.LASF21
 1308 0469 01       		.byte	0x1
 1309 046a 6001     		.2byte	0x160
 1310 046c 6B000000 		.4byte	0x6b
 1311 0470 22030000 		.4byte	.LLST23
 1312 0474 11       		.uleb128 0x11
 1313 0475 B6030000 		.4byte	.LASF42
 1314 0479 01       		.byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 59


 1315 047a 6101     		.2byte	0x161
 1316 047c 6B000000 		.4byte	0x6b
 1317 0480 6B030000 		.4byte	.LLST24
 1318 0484 0B       		.uleb128 0xb
 1319 0485 20000000 		.4byte	.LVL59
 1320 0489 C7030000 		.4byte	0x3c7
 1321 048d 09       		.uleb128 0x9
 1322 048e 2C000000 		.4byte	.LVL62
 1323 0492 7B060000 		.4byte	0x67b
 1324 0496 A1040000 		.4byte	0x4a1
 1325 049a 0A       		.uleb128 0xa
 1326 049b 01       		.uleb128 0x1
 1327 049c 50       		.byte	0x50
 1328 049d 02       		.uleb128 0x2
 1329 049e 74       		.byte	0x74
 1330 049f 00       		.sleb128 0
 1331 04a0 00       		.byte	0
 1332 04a1 0C       		.uleb128 0xc
 1333 04a2 60000000 		.4byte	.LVL67
 1334 04a6 B2000000 		.4byte	0xb2
 1335 04aa 0A       		.uleb128 0xa
 1336 04ab 01       		.uleb128 0x1
 1337 04ac 50       		.byte	0x50
 1338 04ad 02       		.uleb128 0x2
 1339 04ae 74       		.byte	0x74
 1340 04af 00       		.sleb128 0
 1341 04b0 00       		.byte	0
 1342 04b1 00       		.byte	0
 1343 04b2 0E       		.uleb128 0xe
 1344 04b3 A2000000 		.4byte	.LASF43
 1345 04b7 01       		.byte	0x1
 1346 04b8 0702     		.2byte	0x207
 1347 04ba 00000000 		.4byte	.LFB5
 1348 04be 2C000000 		.4byte	.LFE5-.LFB5
 1349 04c2 01       		.uleb128 0x1
 1350 04c3 9C       		.byte	0x9c
 1351 04c4 05050000 		.4byte	0x505
 1352 04c8 0F       		.uleb128 0xf
 1353 04c9 6900     		.ascii	"i\000"
 1354 04cb 01       		.byte	0x1
 1355 04cc 0A02     		.2byte	0x20a
 1356 04ce 6B000000 		.4byte	0x6b
 1357 04d2 7E030000 		.4byte	.LLST25
 1358 04d6 10       		.uleb128 0x10
 1359 04d7 706F7300 		.ascii	"pos\000"
 1360 04db 01       		.byte	0x1
 1361 04dc 0B02     		.2byte	0x20b
 1362 04de 6B000000 		.4byte	0x6b
 1363 04e2 01       		.uleb128 0x1
 1364 04e3 52       		.byte	0x52
 1365 04e4 11       		.uleb128 0x11
 1366 04e5 CF020000 		.4byte	.LASF23
 1367 04e9 01       		.byte	0x1
 1368 04ea 0C02     		.2byte	0x20c
 1369 04ec 6B000000 		.4byte	0x6b
 1370 04f0 A8030000 		.4byte	.LLST26
 1371 04f4 0C       		.uleb128 0xc
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 60


 1372 04f5 1E000000 		.4byte	.LVL80
 1373 04f9 0E040000 		.4byte	0x40e
 1374 04fd 0A       		.uleb128 0xa
 1375 04fe 01       		.uleb128 0x1
 1376 04ff 50       		.byte	0x50
 1377 0500 02       		.uleb128 0x2
 1378 0501 74       		.byte	0x74
 1379 0502 00       		.sleb128 0
 1380 0503 00       		.byte	0
 1381 0504 00       		.byte	0
 1382 0505 1B       		.uleb128 0x1b
 1383 0506 77000000 		.4byte	0x77
 1384 050a 15050000 		.4byte	0x515
 1385 050e 1C       		.uleb128 0x1c
 1386 050f AB000000 		.4byte	0xab
 1387 0513 00       		.byte	0
 1388 0514 00       		.byte	0
 1389 0515 1D       		.uleb128 0x1d
 1390 0516 FE040000 		.4byte	.LASF44
 1391 051a 03       		.byte	0x3
 1392 051b B902     		.2byte	0x2b9
 1393 051d 05050000 		.4byte	0x505
 1394 0521 1E       		.uleb128 0x1e
 1395 0522 07030000 		.4byte	.LASF45
 1396 0526 01       		.byte	0x1
 1397 0527 21       		.byte	0x21
 1398 0528 05050000 		.4byte	0x505
 1399 052c 05       		.uleb128 0x5
 1400 052d 03       		.byte	0x3
 1401 052e 00000000 		.4byte	CapSense_rawFilterData1
 1402 0532 1B       		.uleb128 0x1b
 1403 0533 6B000000 		.4byte	0x6b
 1404 0537 42050000 		.4byte	0x542
 1405 053b 1C       		.uleb128 0x1c
 1406 053c AB000000 		.4byte	0xab
 1407 0540 00       		.byte	0
 1408 0541 00       		.byte	0
 1409 0542 1D       		.uleb128 0x1d
 1410 0543 02020000 		.4byte	.LASF46
 1411 0547 04       		.byte	0x4
 1412 0548 0301     		.2byte	0x103
 1413 054a 32050000 		.4byte	0x532
 1414 054e 1B       		.uleb128 0x1b
 1415 054f 5E050000 		.4byte	0x55e
 1416 0553 5E050000 		.4byte	0x55e
 1417 0557 1C       		.uleb128 0x1c
 1418 0558 AB000000 		.4byte	0xab
 1419 055c 00       		.byte	0
 1420 055d 00       		.byte	0
 1421 055e 1F       		.uleb128 0x1f
 1422 055f 6B000000 		.4byte	0x6b
 1423 0563 1D       		.uleb128 0x1d
 1424 0564 48010000 		.4byte	.LASF47
 1425 0568 04       		.byte	0x4
 1426 0569 0401     		.2byte	0x104
 1427 056b 6F050000 		.4byte	0x56f
 1428 056f 1F       		.uleb128 0x1f
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 61


 1429 0570 4E050000 		.4byte	0x54e
 1430 0574 1E       		.uleb128 0x1e
 1431 0575 AC040000 		.4byte	.LASF48
 1432 0579 01       		.byte	0x1
 1433 057a 29       		.byte	0x29
 1434 057b 05050000 		.4byte	0x505
 1435 057f 05       		.uleb128 0x5
 1436 0580 03       		.byte	0x3
 1437 0581 00000000 		.4byte	CapSense_sensorBaseline
 1438 0585 1E       		.uleb128 0x1e
 1439 0586 B7010000 		.4byte	.LASF49
 1440 058a 01       		.byte	0x1
 1441 058b 2A       		.byte	0x2a
 1442 058c 32050000 		.4byte	0x532
 1443 0590 05       		.uleb128 0x5
 1444 0591 03       		.byte	0x3
 1445 0592 00000000 		.4byte	CapSense_sensorBaselineLow
 1446 0596 1E       		.uleb128 0x1e
 1447 0597 68000000 		.4byte	.LASF50
 1448 059b 01       		.byte	0x1
 1449 059c 2B       		.byte	0x2b
 1450 059d 32050000 		.4byte	0x532
 1451 05a1 05       		.uleb128 0x5
 1452 05a2 03       		.byte	0x3
 1453 05a3 00000000 		.4byte	CapSense_sensorSignal
 1454 05a7 1E       		.uleb128 0x1e
 1455 05a8 2B000000 		.4byte	.LASF51
 1456 05ac 01       		.byte	0x1
 1457 05ad 2C       		.byte	0x2c
 1458 05ae 32050000 		.4byte	0x532
 1459 05b2 05       		.uleb128 0x5
 1460 05b3 03       		.byte	0x3
 1461 05b4 00000000 		.4byte	CapSense_sensorOnMask
 1462 05b8 1E       		.uleb128 0x1e
 1463 05b9 7D040000 		.4byte	.LASF52
 1464 05bd 01       		.byte	0x1
 1465 05be 2E       		.byte	0x2e
 1466 05bf 32050000 		.4byte	0x532
 1467 05c3 05       		.uleb128 0x5
 1468 05c4 03       		.byte	0x3
 1469 05c5 00000000 		.4byte	CapSense_lowBaselineResetCnt
 1470 05c9 1E       		.uleb128 0x1e
 1471 05ca EE020000 		.4byte	.LASF53
 1472 05ce 01       		.byte	0x1
 1473 05cf 30       		.byte	0x30
 1474 05d0 32050000 		.4byte	0x532
 1475 05d4 05       		.uleb128 0x5
 1476 05d5 03       		.byte	0x3
 1477 05d6 00000000 		.4byte	CapSense_fingerThreshold
 1478 05da 1E       		.uleb128 0x1e
 1479 05db D6020000 		.4byte	.LASF54
 1480 05df 01       		.byte	0x1
 1481 05e0 34       		.byte	0x34
 1482 05e1 32050000 		.4byte	0x532
 1483 05e5 05       		.uleb128 0x5
 1484 05e6 03       		.byte	0x3
 1485 05e7 00000000 		.4byte	CapSense_noiseThreshold
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 62


 1486 05eb 1E       		.uleb128 0x1e
 1487 05ec 17000000 		.4byte	.LASF55
 1488 05f0 01       		.byte	0x1
 1489 05f1 38       		.byte	0x38
 1490 05f2 32050000 		.4byte	0x532
 1491 05f6 05       		.uleb128 0x5
 1492 05f7 03       		.byte	0x3
 1493 05f8 00000000 		.4byte	CapSense_hysteresis
 1494 05fc 1E       		.uleb128 0x1e
 1495 05fd 9A040000 		.4byte	.LASF56
 1496 0601 01       		.byte	0x1
 1497 0602 3C       		.byte	0x3c
 1498 0603 32050000 		.4byte	0x532
 1499 0607 05       		.uleb128 0x5
 1500 0608 03       		.byte	0x3
 1501 0609 00000000 		.4byte	CapSense_debounce
 1502 060d 1B       		.uleb128 0x1b
 1503 060e 6B000000 		.4byte	0x6b
 1504 0612 1D060000 		.4byte	0x61d
 1505 0616 1C       		.uleb128 0x1c
 1506 0617 AB000000 		.4byte	0xab
 1507 061b 01       		.byte	0x1
 1508 061c 00       		.byte	0
 1509 061d 1E       		.uleb128 0x1e
 1510 061e 2D050000 		.4byte	.LASF57
 1511 0622 01       		.byte	0x1
 1512 0623 40       		.byte	0x40
 1513 0624 0D060000 		.4byte	0x60d
 1514 0628 05       		.uleb128 0x5
 1515 0629 03       		.byte	0x3
 1516 062a 00000000 		.4byte	CapSense_debounceCounter
 1517 062e 1E       		.uleb128 0x1e
 1518 062f D2010000 		.4byte	.LASF58
 1519 0633 01       		.byte	0x1
 1520 0634 44       		.byte	0x44
 1521 0635 3F060000 		.4byte	0x63f
 1522 0639 05       		.uleb128 0x5
 1523 063a 03       		.byte	0x3
 1524 063b 00000000 		.4byte	CapSense_rawDataIndex
 1525 063f 1F       		.uleb128 0x1f
 1526 0640 4E050000 		.4byte	0x54e
 1527 0644 1E       		.uleb128 0x1e
 1528 0645 5E050000 		.4byte	.LASF59
 1529 0649 01       		.byte	0x1
 1530 064a 49       		.byte	0x49
 1531 064b 55060000 		.4byte	0x655
 1532 064f 05       		.uleb128 0x5
 1533 0650 03       		.byte	0x3
 1534 0651 00000000 		.4byte	CapSense_numberOfSensors
 1535 0655 1F       		.uleb128 0x1f
 1536 0656 4E050000 		.4byte	0x54e
 1537 065a 20       		.uleb128 0x20
 1538 065b 84010000 		.4byte	.LASF60
 1539 065f 84010000 		.4byte	.LASF60
 1540 0663 03       		.byte	0x3
 1541 0664 9A       		.byte	0x9a
 1542 0665 20       		.uleb128 0x20
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 63


 1543 0666 4E050000 		.4byte	.LASF61
 1544 066a 4E050000 		.4byte	.LASF61
 1545 066e 03       		.byte	0x3
 1546 066f 99       		.byte	0x99
 1547 0670 20       		.uleb128 0x20
 1548 0671 11050000 		.4byte	.LASF62
 1549 0675 11050000 		.4byte	.LASF62
 1550 0679 03       		.byte	0x3
 1551 067a 9B       		.byte	0x9b
 1552 067b 20       		.uleb128 0x20
 1553 067c 3F020000 		.4byte	.LASF63
 1554 0680 3F020000 		.4byte	.LASF63
 1555 0684 04       		.byte	0x4
 1556 0685 C0       		.byte	0xc0
 1557 0686 00       		.byte	0
 1558              		.section	.debug_abbrev,"",%progbits
 1559              	.Ldebug_abbrev0:
 1560 0000 01       		.uleb128 0x1
 1561 0001 11       		.uleb128 0x11
 1562 0002 01       		.byte	0x1
 1563 0003 25       		.uleb128 0x25
 1564 0004 0E       		.uleb128 0xe
 1565 0005 13       		.uleb128 0x13
 1566 0006 0B       		.uleb128 0xb
 1567 0007 03       		.uleb128 0x3
 1568 0008 0E       		.uleb128 0xe
 1569 0009 1B       		.uleb128 0x1b
 1570 000a 0E       		.uleb128 0xe
 1571 000b 55       		.uleb128 0x55
 1572 000c 17       		.uleb128 0x17
 1573 000d 11       		.uleb128 0x11
 1574 000e 01       		.uleb128 0x1
 1575 000f 10       		.uleb128 0x10
 1576 0010 17       		.uleb128 0x17
 1577 0011 00       		.byte	0
 1578 0012 00       		.byte	0
 1579 0013 02       		.uleb128 0x2
 1580 0014 24       		.uleb128 0x24
 1581 0015 00       		.byte	0
 1582 0016 0B       		.uleb128 0xb
 1583 0017 0B       		.uleb128 0xb
 1584 0018 3E       		.uleb128 0x3e
 1585 0019 0B       		.uleb128 0xb
 1586 001a 03       		.uleb128 0x3
 1587 001b 0E       		.uleb128 0xe
 1588 001c 00       		.byte	0
 1589 001d 00       		.byte	0
 1590 001e 03       		.uleb128 0x3
 1591 001f 24       		.uleb128 0x24
 1592 0020 00       		.byte	0
 1593 0021 0B       		.uleb128 0xb
 1594 0022 0B       		.uleb128 0xb
 1595 0023 3E       		.uleb128 0x3e
 1596 0024 0B       		.uleb128 0xb
 1597 0025 03       		.uleb128 0x3
 1598 0026 08       		.uleb128 0x8
 1599 0027 00       		.byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 64


 1600 0028 00       		.byte	0
 1601 0029 04       		.uleb128 0x4
 1602 002a 16       		.uleb128 0x16
 1603 002b 00       		.byte	0
 1604 002c 03       		.uleb128 0x3
 1605 002d 0E       		.uleb128 0xe
 1606 002e 3A       		.uleb128 0x3a
 1607 002f 0B       		.uleb128 0xb
 1608 0030 3B       		.uleb128 0x3b
 1609 0031 05       		.uleb128 0x5
 1610 0032 49       		.uleb128 0x49
 1611 0033 13       		.uleb128 0x13
 1612 0034 00       		.byte	0
 1613 0035 00       		.byte	0
 1614 0036 05       		.uleb128 0x5
 1615 0037 2E       		.uleb128 0x2e
 1616 0038 01       		.byte	0x1
 1617 0039 3F       		.uleb128 0x3f
 1618 003a 19       		.uleb128 0x19
 1619 003b 03       		.uleb128 0x3
 1620 003c 0E       		.uleb128 0xe
 1621 003d 3A       		.uleb128 0x3a
 1622 003e 0B       		.uleb128 0xb
 1623 003f 3B       		.uleb128 0x3b
 1624 0040 0B       		.uleb128 0xb
 1625 0041 27       		.uleb128 0x27
 1626 0042 19       		.uleb128 0x19
 1627 0043 11       		.uleb128 0x11
 1628 0044 01       		.uleb128 0x1
 1629 0045 12       		.uleb128 0x12
 1630 0046 06       		.uleb128 0x6
 1631 0047 40       		.uleb128 0x40
 1632 0048 18       		.uleb128 0x18
 1633 0049 9742     		.uleb128 0x2117
 1634 004b 19       		.uleb128 0x19
 1635 004c 01       		.uleb128 0x1
 1636 004d 13       		.uleb128 0x13
 1637 004e 00       		.byte	0
 1638 004f 00       		.byte	0
 1639 0050 06       		.uleb128 0x6
 1640 0051 05       		.uleb128 0x5
 1641 0052 00       		.byte	0
 1642 0053 03       		.uleb128 0x3
 1643 0054 0E       		.uleb128 0xe
 1644 0055 3A       		.uleb128 0x3a
 1645 0056 0B       		.uleb128 0xb
 1646 0057 3B       		.uleb128 0x3b
 1647 0058 0B       		.uleb128 0xb
 1648 0059 49       		.uleb128 0x49
 1649 005a 13       		.uleb128 0x13
 1650 005b 02       		.uleb128 0x2
 1651 005c 18       		.uleb128 0x18
 1652 005d 00       		.byte	0
 1653 005e 00       		.byte	0
 1654 005f 07       		.uleb128 0x7
 1655 0060 34       		.uleb128 0x34
 1656 0061 00       		.byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 65


 1657 0062 03       		.uleb128 0x3
 1658 0063 0E       		.uleb128 0xe
 1659 0064 3A       		.uleb128 0x3a
 1660 0065 0B       		.uleb128 0xb
 1661 0066 3B       		.uleb128 0x3b
 1662 0067 0B       		.uleb128 0xb
 1663 0068 49       		.uleb128 0x49
 1664 0069 13       		.uleb128 0x13
 1665 006a 02       		.uleb128 0x2
 1666 006b 17       		.uleb128 0x17
 1667 006c 00       		.byte	0
 1668 006d 00       		.byte	0
 1669 006e 08       		.uleb128 0x8
 1670 006f 05       		.uleb128 0x5
 1671 0070 00       		.byte	0
 1672 0071 03       		.uleb128 0x3
 1673 0072 0E       		.uleb128 0xe
 1674 0073 3A       		.uleb128 0x3a
 1675 0074 0B       		.uleb128 0xb
 1676 0075 3B       		.uleb128 0x3b
 1677 0076 0B       		.uleb128 0xb
 1678 0077 49       		.uleb128 0x49
 1679 0078 13       		.uleb128 0x13
 1680 0079 02       		.uleb128 0x2
 1681 007a 17       		.uleb128 0x17
 1682 007b 00       		.byte	0
 1683 007c 00       		.byte	0
 1684 007d 09       		.uleb128 0x9
 1685 007e 898201   		.uleb128 0x4109
 1686 0081 01       		.byte	0x1
 1687 0082 11       		.uleb128 0x11
 1688 0083 01       		.uleb128 0x1
 1689 0084 31       		.uleb128 0x31
 1690 0085 13       		.uleb128 0x13
 1691 0086 01       		.uleb128 0x1
 1692 0087 13       		.uleb128 0x13
 1693 0088 00       		.byte	0
 1694 0089 00       		.byte	0
 1695 008a 0A       		.uleb128 0xa
 1696 008b 8A8201   		.uleb128 0x410a
 1697 008e 00       		.byte	0
 1698 008f 02       		.uleb128 0x2
 1699 0090 18       		.uleb128 0x18
 1700 0091 9142     		.uleb128 0x2111
 1701 0093 18       		.uleb128 0x18
 1702 0094 00       		.byte	0
 1703 0095 00       		.byte	0
 1704 0096 0B       		.uleb128 0xb
 1705 0097 898201   		.uleb128 0x4109
 1706 009a 00       		.byte	0
 1707 009b 11       		.uleb128 0x11
 1708 009c 01       		.uleb128 0x1
 1709 009d 31       		.uleb128 0x31
 1710 009e 13       		.uleb128 0x13
 1711 009f 00       		.byte	0
 1712 00a0 00       		.byte	0
 1713 00a1 0C       		.uleb128 0xc
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 66


 1714 00a2 898201   		.uleb128 0x4109
 1715 00a5 01       		.byte	0x1
 1716 00a6 11       		.uleb128 0x11
 1717 00a7 01       		.uleb128 0x1
 1718 00a8 31       		.uleb128 0x31
 1719 00a9 13       		.uleb128 0x13
 1720 00aa 00       		.byte	0
 1721 00ab 00       		.byte	0
 1722 00ac 0D       		.uleb128 0xd
 1723 00ad 34       		.uleb128 0x34
 1724 00ae 00       		.byte	0
 1725 00af 03       		.uleb128 0x3
 1726 00b0 08       		.uleb128 0x8
 1727 00b1 3A       		.uleb128 0x3a
 1728 00b2 0B       		.uleb128 0xb
 1729 00b3 3B       		.uleb128 0x3b
 1730 00b4 0B       		.uleb128 0xb
 1731 00b5 49       		.uleb128 0x49
 1732 00b6 13       		.uleb128 0x13
 1733 00b7 02       		.uleb128 0x2
 1734 00b8 17       		.uleb128 0x17
 1735 00b9 00       		.byte	0
 1736 00ba 00       		.byte	0
 1737 00bb 0E       		.uleb128 0xe
 1738 00bc 2E       		.uleb128 0x2e
 1739 00bd 01       		.byte	0x1
 1740 00be 3F       		.uleb128 0x3f
 1741 00bf 19       		.uleb128 0x19
 1742 00c0 03       		.uleb128 0x3
 1743 00c1 0E       		.uleb128 0xe
 1744 00c2 3A       		.uleb128 0x3a
 1745 00c3 0B       		.uleb128 0xb
 1746 00c4 3B       		.uleb128 0x3b
 1747 00c5 05       		.uleb128 0x5
 1748 00c6 27       		.uleb128 0x27
 1749 00c7 19       		.uleb128 0x19
 1750 00c8 11       		.uleb128 0x11
 1751 00c9 01       		.uleb128 0x1
 1752 00ca 12       		.uleb128 0x12
 1753 00cb 06       		.uleb128 0x6
 1754 00cc 40       		.uleb128 0x40
 1755 00cd 18       		.uleb128 0x18
 1756 00ce 9742     		.uleb128 0x2117
 1757 00d0 19       		.uleb128 0x19
 1758 00d1 01       		.uleb128 0x1
 1759 00d2 13       		.uleb128 0x13
 1760 00d3 00       		.byte	0
 1761 00d4 00       		.byte	0
 1762 00d5 0F       		.uleb128 0xf
 1763 00d6 34       		.uleb128 0x34
 1764 00d7 00       		.byte	0
 1765 00d8 03       		.uleb128 0x3
 1766 00d9 08       		.uleb128 0x8
 1767 00da 3A       		.uleb128 0x3a
 1768 00db 0B       		.uleb128 0xb
 1769 00dc 3B       		.uleb128 0x3b
 1770 00dd 05       		.uleb128 0x5
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 67


 1771 00de 49       		.uleb128 0x49
 1772 00df 13       		.uleb128 0x13
 1773 00e0 02       		.uleb128 0x2
 1774 00e1 17       		.uleb128 0x17
 1775 00e2 00       		.byte	0
 1776 00e3 00       		.byte	0
 1777 00e4 10       		.uleb128 0x10
 1778 00e5 34       		.uleb128 0x34
 1779 00e6 00       		.byte	0
 1780 00e7 03       		.uleb128 0x3
 1781 00e8 08       		.uleb128 0x8
 1782 00e9 3A       		.uleb128 0x3a
 1783 00ea 0B       		.uleb128 0xb
 1784 00eb 3B       		.uleb128 0x3b
 1785 00ec 05       		.uleb128 0x5
 1786 00ed 49       		.uleb128 0x49
 1787 00ee 13       		.uleb128 0x13
 1788 00ef 02       		.uleb128 0x2
 1789 00f0 18       		.uleb128 0x18
 1790 00f1 00       		.byte	0
 1791 00f2 00       		.byte	0
 1792 00f3 11       		.uleb128 0x11
 1793 00f4 34       		.uleb128 0x34
 1794 00f5 00       		.byte	0
 1795 00f6 03       		.uleb128 0x3
 1796 00f7 0E       		.uleb128 0xe
 1797 00f8 3A       		.uleb128 0x3a
 1798 00f9 0B       		.uleb128 0xb
 1799 00fa 3B       		.uleb128 0x3b
 1800 00fb 05       		.uleb128 0x5
 1801 00fc 49       		.uleb128 0x49
 1802 00fd 13       		.uleb128 0x13
 1803 00fe 02       		.uleb128 0x2
 1804 00ff 17       		.uleb128 0x17
 1805 0100 00       		.byte	0
 1806 0101 00       		.byte	0
 1807 0102 12       		.uleb128 0x12
 1808 0103 2E       		.uleb128 0x2e
 1809 0104 01       		.byte	0x1
 1810 0105 3F       		.uleb128 0x3f
 1811 0106 19       		.uleb128 0x19
 1812 0107 03       		.uleb128 0x3
 1813 0108 0E       		.uleb128 0xe
 1814 0109 3A       		.uleb128 0x3a
 1815 010a 0B       		.uleb128 0xb
 1816 010b 3B       		.uleb128 0x3b
 1817 010c 05       		.uleb128 0x5
 1818 010d 27       		.uleb128 0x27
 1819 010e 19       		.uleb128 0x19
 1820 010f 49       		.uleb128 0x49
 1821 0110 13       		.uleb128 0x13
 1822 0111 11       		.uleb128 0x11
 1823 0112 01       		.uleb128 0x1
 1824 0113 12       		.uleb128 0x12
 1825 0114 06       		.uleb128 0x6
 1826 0115 40       		.uleb128 0x40
 1827 0116 18       		.uleb128 0x18
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 68


 1828 0117 9742     		.uleb128 0x2117
 1829 0119 19       		.uleb128 0x19
 1830 011a 01       		.uleb128 0x1
 1831 011b 13       		.uleb128 0x13
 1832 011c 00       		.byte	0
 1833 011d 00       		.byte	0
 1834 011e 13       		.uleb128 0x13
 1835 011f 05       		.uleb128 0x5
 1836 0120 00       		.byte	0
 1837 0121 03       		.uleb128 0x3
 1838 0122 0E       		.uleb128 0xe
 1839 0123 3A       		.uleb128 0x3a
 1840 0124 0B       		.uleb128 0xb
 1841 0125 3B       		.uleb128 0x3b
 1842 0126 05       		.uleb128 0x5
 1843 0127 49       		.uleb128 0x49
 1844 0128 13       		.uleb128 0x13
 1845 0129 02       		.uleb128 0x2
 1846 012a 17       		.uleb128 0x17
 1847 012b 00       		.byte	0
 1848 012c 00       		.byte	0
 1849 012d 14       		.uleb128 0x14
 1850 012e 34       		.uleb128 0x34
 1851 012f 00       		.byte	0
 1852 0130 03       		.uleb128 0x3
 1853 0131 0E       		.uleb128 0xe
 1854 0132 3A       		.uleb128 0x3a
 1855 0133 0B       		.uleb128 0xb
 1856 0134 3B       		.uleb128 0x3b
 1857 0135 05       		.uleb128 0x5
 1858 0136 49       		.uleb128 0x49
 1859 0137 13       		.uleb128 0x13
 1860 0138 00       		.byte	0
 1861 0139 00       		.byte	0
 1862 013a 15       		.uleb128 0x15
 1863 013b 34       		.uleb128 0x34
 1864 013c 00       		.byte	0
 1865 013d 03       		.uleb128 0x3
 1866 013e 0E       		.uleb128 0xe
 1867 013f 3A       		.uleb128 0x3a
 1868 0140 0B       		.uleb128 0xb
 1869 0141 3B       		.uleb128 0x3b
 1870 0142 05       		.uleb128 0x5
 1871 0143 49       		.uleb128 0x49
 1872 0144 13       		.uleb128 0x13
 1873 0145 02       		.uleb128 0x2
 1874 0146 18       		.uleb128 0x18
 1875 0147 00       		.byte	0
 1876 0148 00       		.byte	0
 1877 0149 16       		.uleb128 0x16
 1878 014a 34       		.uleb128 0x34
 1879 014b 00       		.byte	0
 1880 014c 03       		.uleb128 0x3
 1881 014d 0E       		.uleb128 0xe
 1882 014e 3A       		.uleb128 0x3a
 1883 014f 0B       		.uleb128 0xb
 1884 0150 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 69


 1885 0151 05       		.uleb128 0x5
 1886 0152 49       		.uleb128 0x49
 1887 0153 13       		.uleb128 0x13
 1888 0154 1C       		.uleb128 0x1c
 1889 0155 0B       		.uleb128 0xb
 1890 0156 00       		.byte	0
 1891 0157 00       		.byte	0
 1892 0158 17       		.uleb128 0x17
 1893 0159 05       		.uleb128 0x5
 1894 015a 00       		.byte	0
 1895 015b 03       		.uleb128 0x3
 1896 015c 0E       		.uleb128 0xe
 1897 015d 3A       		.uleb128 0x3a
 1898 015e 0B       		.uleb128 0xb
 1899 015f 3B       		.uleb128 0x3b
 1900 0160 05       		.uleb128 0x5
 1901 0161 49       		.uleb128 0x49
 1902 0162 13       		.uleb128 0x13
 1903 0163 02       		.uleb128 0x2
 1904 0164 18       		.uleb128 0x18
 1905 0165 00       		.byte	0
 1906 0166 00       		.byte	0
 1907 0167 18       		.uleb128 0x18
 1908 0168 34       		.uleb128 0x34
 1909 0169 00       		.byte	0
 1910 016a 03       		.uleb128 0x3
 1911 016b 08       		.uleb128 0x8
 1912 016c 3A       		.uleb128 0x3a
 1913 016d 0B       		.uleb128 0xb
 1914 016e 3B       		.uleb128 0x3b
 1915 016f 05       		.uleb128 0x5
 1916 0170 49       		.uleb128 0x49
 1917 0171 13       		.uleb128 0x13
 1918 0172 1C       		.uleb128 0x1c
 1919 0173 0B       		.uleb128 0xb
 1920 0174 00       		.byte	0
 1921 0175 00       		.byte	0
 1922 0176 19       		.uleb128 0x19
 1923 0177 05       		.uleb128 0x5
 1924 0178 00       		.byte	0
 1925 0179 03       		.uleb128 0x3
 1926 017a 08       		.uleb128 0x8
 1927 017b 3A       		.uleb128 0x3a
 1928 017c 0B       		.uleb128 0xb
 1929 017d 3B       		.uleb128 0x3b
 1930 017e 05       		.uleb128 0x5
 1931 017f 49       		.uleb128 0x49
 1932 0180 13       		.uleb128 0x13
 1933 0181 02       		.uleb128 0x2
 1934 0182 17       		.uleb128 0x17
 1935 0183 00       		.byte	0
 1936 0184 00       		.byte	0
 1937 0185 1A       		.uleb128 0x1a
 1938 0186 05       		.uleb128 0x5
 1939 0187 00       		.byte	0
 1940 0188 03       		.uleb128 0x3
 1941 0189 08       		.uleb128 0x8
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 70


 1942 018a 3A       		.uleb128 0x3a
 1943 018b 0B       		.uleb128 0xb
 1944 018c 3B       		.uleb128 0x3b
 1945 018d 05       		.uleb128 0x5
 1946 018e 49       		.uleb128 0x49
 1947 018f 13       		.uleb128 0x13
 1948 0190 02       		.uleb128 0x2
 1949 0191 18       		.uleb128 0x18
 1950 0192 00       		.byte	0
 1951 0193 00       		.byte	0
 1952 0194 1B       		.uleb128 0x1b
 1953 0195 01       		.uleb128 0x1
 1954 0196 01       		.byte	0x1
 1955 0197 49       		.uleb128 0x49
 1956 0198 13       		.uleb128 0x13
 1957 0199 01       		.uleb128 0x1
 1958 019a 13       		.uleb128 0x13
 1959 019b 00       		.byte	0
 1960 019c 00       		.byte	0
 1961 019d 1C       		.uleb128 0x1c
 1962 019e 21       		.uleb128 0x21
 1963 019f 00       		.byte	0
 1964 01a0 49       		.uleb128 0x49
 1965 01a1 13       		.uleb128 0x13
 1966 01a2 2F       		.uleb128 0x2f
 1967 01a3 0B       		.uleb128 0xb
 1968 01a4 00       		.byte	0
 1969 01a5 00       		.byte	0
 1970 01a6 1D       		.uleb128 0x1d
 1971 01a7 34       		.uleb128 0x34
 1972 01a8 00       		.byte	0
 1973 01a9 03       		.uleb128 0x3
 1974 01aa 0E       		.uleb128 0xe
 1975 01ab 3A       		.uleb128 0x3a
 1976 01ac 0B       		.uleb128 0xb
 1977 01ad 3B       		.uleb128 0x3b
 1978 01ae 05       		.uleb128 0x5
 1979 01af 49       		.uleb128 0x49
 1980 01b0 13       		.uleb128 0x13
 1981 01b1 3F       		.uleb128 0x3f
 1982 01b2 19       		.uleb128 0x19
 1983 01b3 3C       		.uleb128 0x3c
 1984 01b4 19       		.uleb128 0x19
 1985 01b5 00       		.byte	0
 1986 01b6 00       		.byte	0
 1987 01b7 1E       		.uleb128 0x1e
 1988 01b8 34       		.uleb128 0x34
 1989 01b9 00       		.byte	0
 1990 01ba 03       		.uleb128 0x3
 1991 01bb 0E       		.uleb128 0xe
 1992 01bc 3A       		.uleb128 0x3a
 1993 01bd 0B       		.uleb128 0xb
 1994 01be 3B       		.uleb128 0x3b
 1995 01bf 0B       		.uleb128 0xb
 1996 01c0 49       		.uleb128 0x49
 1997 01c1 13       		.uleb128 0x13
 1998 01c2 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 71


 1999 01c3 19       		.uleb128 0x19
 2000 01c4 02       		.uleb128 0x2
 2001 01c5 18       		.uleb128 0x18
 2002 01c6 00       		.byte	0
 2003 01c7 00       		.byte	0
 2004 01c8 1F       		.uleb128 0x1f
 2005 01c9 26       		.uleb128 0x26
 2006 01ca 00       		.byte	0
 2007 01cb 49       		.uleb128 0x49
 2008 01cc 13       		.uleb128 0x13
 2009 01cd 00       		.byte	0
 2010 01ce 00       		.byte	0
 2011 01cf 20       		.uleb128 0x20
 2012 01d0 2E       		.uleb128 0x2e
 2013 01d1 00       		.byte	0
 2014 01d2 3F       		.uleb128 0x3f
 2015 01d3 19       		.uleb128 0x19
 2016 01d4 3C       		.uleb128 0x3c
 2017 01d5 19       		.uleb128 0x19
 2018 01d6 6E       		.uleb128 0x6e
 2019 01d7 0E       		.uleb128 0xe
 2020 01d8 03       		.uleb128 0x3
 2021 01d9 0E       		.uleb128 0xe
 2022 01da 3A       		.uleb128 0x3a
 2023 01db 0B       		.uleb128 0xb
 2024 01dc 3B       		.uleb128 0x3b
 2025 01dd 0B       		.uleb128 0xb
 2026 01de 00       		.byte	0
 2027 01df 00       		.byte	0
 2028 01e0 00       		.byte	0
 2029              		.section	.debug_loc,"",%progbits
 2030              	.Ldebug_loc0:
 2031              	.LLST0:
 2032 0000 06000000 		.4byte	.LVL1
 2033 0004 26000000 		.4byte	.LVL2
 2034 0008 0100     		.2byte	0x1
 2035 000a 52       		.byte	0x52
 2036 000b 00000000 		.4byte	0
 2037 000f 00000000 		.4byte	0
 2038              	.LLST1:
 2039 0013 00000000 		.4byte	.LVL3
 2040 0017 07000000 		.4byte	.LVL4-1
 2041 001b 0100     		.2byte	0x1
 2042 001d 50       		.byte	0x50
 2043 001e 07000000 		.4byte	.LVL4-1
 2044 0022 18000000 		.4byte	.LFE1
 2045 0026 0400     		.2byte	0x4
 2046 0028 F3       		.byte	0xf3
 2047 0029 01       		.uleb128 0x1
 2048 002a 50       		.byte	0x50
 2049 002b 9F       		.byte	0x9f
 2050 002c 00000000 		.4byte	0
 2051 0030 00000000 		.4byte	0
 2052              	.LLST2:
 2053 0034 02000000 		.4byte	.LVL7
 2054 0038 06000000 		.4byte	.LVL8
 2055 003c 0200     		.2byte	0x2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 72


 2056 003e 30       		.byte	0x30
 2057 003f 9F       		.byte	0x9f
 2058 0040 06000000 		.4byte	.LVL8
 2059 0044 0E000000 		.4byte	.LVL10
 2060 0048 0100     		.2byte	0x1
 2061 004a 54       		.byte	0x54
 2062 004b 10000000 		.4byte	.LVL11
 2063 004f 16000000 		.4byte	.LFE2
 2064 0053 0100     		.2byte	0x1
 2065 0055 54       		.byte	0x54
 2066 0056 00000000 		.4byte	0
 2067 005a 00000000 		.4byte	0
 2068              	.LLST3:
 2069 005e 12000000 		.4byte	.LVL14
 2070 0062 34000000 		.4byte	.LVL18
 2071 0066 0100     		.2byte	0x1
 2072 0068 54       		.byte	0x54
 2073 0069 36000000 		.4byte	.LVL19
 2074 006d 3C000000 		.4byte	.LVL20
 2075 0071 0100     		.2byte	0x1
 2076 0073 54       		.byte	0x54
 2077 0074 00000000 		.4byte	0
 2078 0078 00000000 		.4byte	0
 2079              	.LLST4:
 2080 007c 1C000000 		.4byte	.LVL15
 2081 0080 28000000 		.4byte	.LVL16
 2082 0084 0100     		.2byte	0x1
 2083 0086 53       		.byte	0x53
 2084 0087 28000000 		.4byte	.LVL16
 2085 008b 34000000 		.4byte	.LVL18
 2086 008f 0700     		.2byte	0x7
 2087 0091 31       		.byte	0x31
 2088 0092 74       		.byte	0x74
 2089 0093 00       		.sleb128 0
 2090 0094 37       		.byte	0x37
 2091 0095 1A       		.byte	0x1a
 2092 0096 24       		.byte	0x24
 2093 0097 9F       		.byte	0x9f
 2094 0098 34000000 		.4byte	.LVL18
 2095 009c 36000000 		.4byte	.LVL19
 2096 00a0 0700     		.2byte	0x7
 2097 00a2 31       		.byte	0x31
 2098 00a3 74       		.byte	0x74
 2099 00a4 7F       		.sleb128 -1
 2100 00a5 37       		.byte	0x37
 2101 00a6 1A       		.byte	0x1a
 2102 00a7 24       		.byte	0x24
 2103 00a8 9F       		.byte	0x9f
 2104 00a9 00000000 		.4byte	0
 2105 00ad 00000000 		.4byte	0
 2106              	.LLST5:
 2107 00b1 00000000 		.4byte	.LVL21
 2108 00b5 2C000000 		.4byte	.LVL27
 2109 00b9 0100     		.2byte	0x1
 2110 00bb 50       		.byte	0x50
 2111 00bc 2C000000 		.4byte	.LVL27
 2112 00c0 40000000 		.4byte	.LVL29
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 73


 2113 00c4 0400     		.2byte	0x4
 2114 00c6 F3       		.byte	0xf3
 2115 00c7 01       		.uleb128 0x1
 2116 00c8 50       		.byte	0x50
 2117 00c9 9F       		.byte	0x9f
 2118 00ca 40000000 		.4byte	.LVL29
 2119 00ce 48000000 		.4byte	.LVL30
 2120 00d2 0100     		.2byte	0x1
 2121 00d4 50       		.byte	0x50
 2122 00d5 48000000 		.4byte	.LVL30
 2123 00d9 88000000 		.4byte	.LFE6
 2124 00dd 0400     		.2byte	0x4
 2125 00df F3       		.byte	0xf3
 2126 00e0 01       		.uleb128 0x1
 2127 00e1 50       		.byte	0x50
 2128 00e2 9F       		.byte	0x9f
 2129 00e3 00000000 		.4byte	0
 2130 00e7 00000000 		.4byte	0
 2131              	.LLST6:
 2132 00eb 04000000 		.4byte	.LVL22
 2133 00ef 74000000 		.4byte	.LVL33
 2134 00f3 0100     		.2byte	0x1
 2135 00f5 54       		.byte	0x54
 2136 00f6 00000000 		.4byte	0
 2137 00fa 00000000 		.4byte	0
 2138              	.LLST7:
 2139 00fe 18000000 		.4byte	.LVL24
 2140 0102 74000000 		.4byte	.LVL33
 2141 0106 0100     		.2byte	0x1
 2142 0108 57       		.byte	0x57
 2143 0109 00000000 		.4byte	0
 2144 010d 00000000 		.4byte	0
 2145              	.LLST8:
 2146 0111 1A000000 		.4byte	.LVL25
 2147 0115 2E000000 		.4byte	.LVL28
 2148 0119 0100     		.2byte	0x1
 2149 011b 51       		.byte	0x51
 2150 011c 2E000000 		.4byte	.LVL28
 2151 0120 40000000 		.4byte	.LVL29
 2152 0124 0800     		.2byte	0x8
 2153 0126 72       		.byte	0x72
 2154 0127 00       		.sleb128 0
 2155 0128 03       		.byte	0x3
 2156 0129 08000000 		.4byte	.LANCHOR0+8
 2157 012d 22       		.byte	0x22
 2158 012e 40000000 		.4byte	.LVL29
 2159 0132 4A000000 		.4byte	.LVL31
 2160 0136 0100     		.2byte	0x1
 2161 0138 51       		.byte	0x51
 2162 0139 4A000000 		.4byte	.LVL31
 2163 013d 6A000000 		.4byte	.LVL32
 2164 0141 0800     		.2byte	0x8
 2165 0143 72       		.byte	0x72
 2166 0144 00       		.sleb128 0
 2167 0145 03       		.byte	0x3
 2168 0146 08000000 		.4byte	.LANCHOR0+8
 2169 014a 22       		.byte	0x22
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 74


 2170 014b 00000000 		.4byte	0
 2171 014f 00000000 		.4byte	0
 2172              	.LLST9:
 2173 0153 1C000000 		.4byte	.LVL26
 2174 0157 74000000 		.4byte	.LVL33
 2175 015b 0100     		.2byte	0x1
 2176 015d 56       		.byte	0x56
 2177 015e 00000000 		.4byte	0
 2178 0162 00000000 		.4byte	0
 2179              	.LLST10:
 2180 0166 00000000 		.4byte	.LVL34
 2181 016a 04000000 		.4byte	.LVL36
 2182 016e 0100     		.2byte	0x1
 2183 0170 50       		.byte	0x50
 2184 0171 04000000 		.4byte	.LVL36
 2185 0175 0E000000 		.4byte	.LFE7
 2186 0179 0400     		.2byte	0x4
 2187 017b F3       		.byte	0xf3
 2188 017c 01       		.uleb128 0x1
 2189 017d 50       		.byte	0x50
 2190 017e 9F       		.byte	0x9f
 2191 017f 00000000 		.4byte	0
 2192 0183 00000000 		.4byte	0
 2193              	.LLST11:
 2194 0187 02000000 		.4byte	.LVL35
 2195 018b 0C000000 		.4byte	.LVL38
 2196 018f 0200     		.2byte	0x2
 2197 0191 30       		.byte	0x30
 2198 0192 9F       		.byte	0x9f
 2199 0193 0C000000 		.4byte	.LVL38
 2200 0197 0E000000 		.4byte	.LFE7
 2201 019b 0200     		.2byte	0x2
 2202 019d 31       		.byte	0x31
 2203 019e 9F       		.byte	0x9f
 2204 019f 00000000 		.4byte	0
 2205 01a3 00000000 		.4byte	0
 2206              	.LLST12:
 2207 01a7 02000000 		.4byte	.LVL35
 2208 01ab 0C000000 		.4byte	.LVL38
 2209 01af 0200     		.2byte	0x2
 2210 01b1 30       		.byte	0x30
 2211 01b2 9F       		.byte	0x9f
 2212 01b3 0C000000 		.4byte	.LVL38
 2213 01b7 0E000000 		.4byte	.LFE7
 2214 01bb 0100     		.2byte	0x1
 2215 01bd 50       		.byte	0x50
 2216 01be 00000000 		.4byte	0
 2217 01c2 00000000 		.4byte	0
 2218              	.LLST13:
 2219 01c6 02000000 		.4byte	.LVL39
 2220 01ca 08000000 		.4byte	.LVL40
 2221 01ce 0200     		.2byte	0x2
 2222 01d0 30       		.byte	0x30
 2223 01d1 9F       		.byte	0x9f
 2224 01d2 08000000 		.4byte	.LVL40
 2225 01d6 14000000 		.4byte	.LVL43
 2226 01da 0100     		.2byte	0x1
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 75


 2227 01dc 54       		.byte	0x54
 2228 01dd 16000000 		.4byte	.LVL44
 2229 01e1 1E000000 		.4byte	.LFE8
 2230 01e5 0100     		.2byte	0x1
 2231 01e7 54       		.byte	0x54
 2232 01e8 00000000 		.4byte	0
 2233 01ec 00000000 		.4byte	0
 2234              	.LLST14:
 2235 01f0 02000000 		.4byte	.LVL39
 2236 01f4 08000000 		.4byte	.LVL40
 2237 01f8 0200     		.2byte	0x2
 2238 01fa 30       		.byte	0x30
 2239 01fb 9F       		.byte	0x9f
 2240 01fc 08000000 		.4byte	.LVL40
 2241 0200 1E000000 		.4byte	.LFE8
 2242 0204 0100     		.2byte	0x1
 2243 0206 55       		.byte	0x55
 2244 0207 00000000 		.4byte	0
 2245 020b 00000000 		.4byte	0
 2246              	.LLST15:
 2247 020f 00000000 		.4byte	.LVL45
 2248 0213 0A000000 		.4byte	.LVL46
 2249 0217 0200     		.2byte	0x2
 2250 0219 30       		.byte	0x30
 2251 021a 9F       		.byte	0x9f
 2252 021b 0A000000 		.4byte	.LVL46
 2253 021f 10000000 		.4byte	.LFE9
 2254 0223 0200     		.2byte	0x2
 2255 0225 31       		.byte	0x31
 2256 0226 9F       		.byte	0x9f
 2257 0227 00000000 		.4byte	0
 2258 022b 00000000 		.4byte	0
 2259              	.LLST16:
 2260 022f 00000000 		.4byte	.LVL47
 2261 0233 0A000000 		.4byte	.LVL48
 2262 0237 0200     		.2byte	0x2
 2263 0239 30       		.byte	0x30
 2264 023a 9F       		.byte	0x9f
 2265 023b 0A000000 		.4byte	.LVL48
 2266 023f 10000000 		.4byte	.LFE10
 2267 0243 0200     		.2byte	0x2
 2268 0245 31       		.byte	0x31
 2269 0246 9F       		.byte	0x9f
 2270 0247 00000000 		.4byte	0
 2271 024b 00000000 		.4byte	0
 2272              	.LLST17:
 2273 024f 00000000 		.4byte	.LVL49
 2274 0253 02000000 		.4byte	.LVL50
 2275 0257 0100     		.2byte	0x1
 2276 0259 50       		.byte	0x50
 2277 025a 02000000 		.4byte	.LVL50
 2278 025e 0C000000 		.4byte	.LFE11
 2279 0262 0400     		.2byte	0x4
 2280 0264 F3       		.byte	0xf3
 2281 0265 01       		.uleb128 0x1
 2282 0266 50       		.byte	0x50
 2283 0267 9F       		.byte	0x9f
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 76


 2284 0268 00000000 		.4byte	0
 2285 026c 00000000 		.4byte	0
 2286              	.LLST18:
 2287 0270 02000000 		.4byte	.LVL50
 2288 0274 06000000 		.4byte	.LVL51
 2289 0278 0100     		.2byte	0x1
 2290 027a 50       		.byte	0x50
 2291 027b 06000000 		.4byte	.LVL51
 2292 027f 0A000000 		.4byte	.LVL52
 2293 0283 0500     		.2byte	0x5
 2294 0285 70       		.byte	0x70
 2295 0286 00       		.sleb128 0
 2296 0287 32       		.byte	0x32
 2297 0288 25       		.byte	0x25
 2298 0289 9F       		.byte	0x9f
 2299 028a 00000000 		.4byte	0
 2300 028e 00000000 		.4byte	0
 2301              	.LLST19:
 2302 0292 00000000 		.4byte	.LVL53
 2303 0296 1C000000 		.4byte	.LVL58
 2304 029a 0100     		.2byte	0x1
 2305 029c 50       		.byte	0x50
 2306 029d 1C000000 		.4byte	.LVL58
 2307 02a1 EC000000 		.4byte	.LFE4
 2308 02a5 0400     		.2byte	0x4
 2309 02a7 F3       		.byte	0xf3
 2310 02a8 01       		.uleb128 0x1
 2311 02a9 50       		.byte	0x50
 2312 02aa 9F       		.byte	0x9f
 2313 02ab 00000000 		.4byte	0
 2314 02af 00000000 		.4byte	0
 2315              	.LLST20:
 2316 02b3 80000000 		.4byte	.LVL68
 2317 02b7 88000000 		.4byte	.LVL69
 2318 02bb 0500     		.2byte	0x5
 2319 02bd 72       		.byte	0x72
 2320 02be 00       		.sleb128 0
 2321 02bf 38       		.byte	0x38
 2322 02c0 24       		.byte	0x24
 2323 02c1 9F       		.byte	0x9f
 2324 02c2 88000000 		.4byte	.LVL69
 2325 02c6 8A000000 		.4byte	.LVL70
 2326 02ca 0100     		.2byte	0x1
 2327 02cc 53       		.byte	0x53
 2328 02cd 8A000000 		.4byte	.LVL70
 2329 02d1 9E000000 		.4byte	.LVL72
 2330 02d5 0100     		.2byte	0x1
 2331 02d7 57       		.byte	0x57
 2332 02d8 00000000 		.4byte	0
 2333 02dc 00000000 		.4byte	0
 2334              	.LLST21:
 2335 02e0 3A000000 		.4byte	.LVL63
 2336 02e4 40000000 		.4byte	.LVL64
 2337 02e8 0100     		.2byte	0x1
 2338 02ea 55       		.byte	0x55
 2339 02eb 44000000 		.4byte	.LVL65
 2340 02ef CA000000 		.4byte	.LVL76
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 77


 2341 02f3 0100     		.2byte	0x1
 2342 02f5 55       		.byte	0x55
 2343 02f6 00000000 		.4byte	0
 2344 02fa 00000000 		.4byte	0
 2345              	.LLST22:
 2346 02fe 22000000 		.4byte	.LVL60
 2347 0302 28000000 		.4byte	.LVL61
 2348 0306 0100     		.2byte	0x1
 2349 0308 50       		.byte	0x50
 2350 0309 28000000 		.4byte	.LVL61
 2351 030d 2B000000 		.4byte	.LVL62-1
 2352 0311 0700     		.2byte	0x7
 2353 0313 74       		.byte	0x74
 2354 0314 00       		.sleb128 0
 2355 0315 31       		.byte	0x31
 2356 0316 24       		.byte	0x24
 2357 0317 75       		.byte	0x75
 2358 0318 00       		.sleb128 0
 2359 0319 22       		.byte	0x22
 2360 031a 00000000 		.4byte	0
 2361 031e 00000000 		.4byte	0
 2362              	.LLST23:
 2363 0322 0A000000 		.4byte	.LVL54
 2364 0326 0E000000 		.4byte	.LVL55
 2365 032a 0100     		.2byte	0x1
 2366 032c 53       		.byte	0x53
 2367 032d 0E000000 		.4byte	.LVL55
 2368 0331 18000000 		.4byte	.LVL57
 2369 0335 0900     		.2byte	0x9
 2370 0337 73       		.byte	0x73
 2371 0338 00       		.sleb128 0
 2372 0339 03       		.byte	0x3
 2373 033a 00000000 		.4byte	.LANCHOR0
 2374 033e 1C       		.byte	0x1c
 2375 033f 9F       		.byte	0x9f
 2376 0340 3A000000 		.4byte	.LVL63
 2377 0344 40000000 		.4byte	.LVL64
 2378 0348 0200     		.2byte	0x2
 2379 034a 31       		.byte	0x31
 2380 034b 9F       		.byte	0x9f
 2381 034c 44000000 		.4byte	.LVL65
 2382 0350 48000000 		.4byte	.LVL66
 2383 0354 0200     		.2byte	0x2
 2384 0356 30       		.byte	0x30
 2385 0357 9F       		.byte	0x9f
 2386 0358 48000000 		.4byte	.LVL66
 2387 035c CA000000 		.4byte	.LVL76
 2388 0360 0100     		.2byte	0x1
 2389 0362 58       		.byte	0x58
 2390 0363 00000000 		.4byte	0
 2391 0367 00000000 		.4byte	0
 2392              	.LLST24:
 2393 036b 10000000 		.4byte	.LVL56
 2394 036f A0000000 		.4byte	.LVL73
 2395 0373 0100     		.2byte	0x1
 2396 0375 56       		.byte	0x56
 2397 0376 00000000 		.4byte	0
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 78


 2398 037a 00000000 		.4byte	0
 2399              	.LLST25:
 2400 037e 02000000 		.4byte	.LVL77
 2401 0382 06000000 		.4byte	.LVL78
 2402 0386 0200     		.2byte	0x2
 2403 0388 30       		.byte	0x30
 2404 0389 9F       		.byte	0x9f
 2405 038a 06000000 		.4byte	.LVL78
 2406 038e 20000000 		.4byte	.LVL81
 2407 0392 0100     		.2byte	0x1
 2408 0394 54       		.byte	0x54
 2409 0395 22000000 		.4byte	.LVL82
 2410 0399 28000000 		.4byte	.LVL83
 2411 039d 0100     		.2byte	0x1
 2412 039f 54       		.byte	0x54
 2413 03a0 00000000 		.4byte	0
 2414 03a4 00000000 		.4byte	0
 2415              	.LLST26:
 2416 03a8 10000000 		.4byte	.LVL79
 2417 03ac 1D000000 		.4byte	.LVL80-1
 2418 03b0 0100     		.2byte	0x1
 2419 03b2 53       		.byte	0x53
 2420 03b3 1D000000 		.4byte	.LVL80-1
 2421 03b7 20000000 		.4byte	.LVL81
 2422 03bb 0700     		.2byte	0x7
 2423 03bd 31       		.byte	0x31
 2424 03be 74       		.byte	0x74
 2425 03bf 00       		.sleb128 0
 2426 03c0 37       		.byte	0x37
 2427 03c1 1A       		.byte	0x1a
 2428 03c2 24       		.byte	0x24
 2429 03c3 9F       		.byte	0x9f
 2430 03c4 20000000 		.4byte	.LVL81
 2431 03c8 22000000 		.4byte	.LVL82
 2432 03cc 0700     		.2byte	0x7
 2433 03ce 31       		.byte	0x31
 2434 03cf 74       		.byte	0x74
 2435 03d0 7F       		.sleb128 -1
 2436 03d1 37       		.byte	0x37
 2437 03d2 1A       		.byte	0x1a
 2438 03d3 24       		.byte	0x24
 2439 03d4 9F       		.byte	0x9f
 2440 03d5 00000000 		.4byte	0
 2441 03d9 00000000 		.4byte	0
 2442              		.section	.debug_aranges,"",%progbits
 2443 0000 74000000 		.4byte	0x74
 2444 0004 0200     		.2byte	0x2
 2445 0006 00000000 		.4byte	.Ldebug_info0
 2446 000a 04       		.byte	0x4
 2447 000b 00       		.byte	0
 2448 000c 0000     		.2byte	0
 2449 000e 0000     		.2byte	0
 2450 0010 00000000 		.4byte	.LFB0
 2451 0014 50000000 		.4byte	.LFE0-.LFB0
 2452 0018 00000000 		.4byte	.LFB1
 2453 001c 18000000 		.4byte	.LFE1-.LFB1
 2454 0020 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 79


 2455 0024 16000000 		.4byte	.LFE2-.LFB2
 2456 0028 00000000 		.4byte	.LFB3
 2457 002c 44000000 		.4byte	.LFE3-.LFB3
 2458 0030 00000000 		.4byte	.LFB6
 2459 0034 88000000 		.4byte	.LFE6-.LFB6
 2460 0038 00000000 		.4byte	.LFB7
 2461 003c 0E000000 		.4byte	.LFE7-.LFB7
 2462 0040 00000000 		.4byte	.LFB8
 2463 0044 1E000000 		.4byte	.LFE8-.LFB8
 2464 0048 00000000 		.4byte	.LFB9
 2465 004c 10000000 		.4byte	.LFE9-.LFB9
 2466 0050 00000000 		.4byte	.LFB10
 2467 0054 10000000 		.4byte	.LFE10-.LFB10
 2468 0058 00000000 		.4byte	.LFB11
 2469 005c 0C000000 		.4byte	.LFE11-.LFB11
 2470 0060 00000000 		.4byte	.LFB4
 2471 0064 EC000000 		.4byte	.LFE4-.LFB4
 2472 0068 00000000 		.4byte	.LFB5
 2473 006c 2C000000 		.4byte	.LFE5-.LFB5
 2474 0070 00000000 		.4byte	0
 2475 0074 00000000 		.4byte	0
 2476              		.section	.debug_ranges,"",%progbits
 2477              	.Ldebug_ranges0:
 2478 0000 00000000 		.4byte	.LFB0
 2479 0004 50000000 		.4byte	.LFE0
 2480 0008 00000000 		.4byte	.LFB1
 2481 000c 18000000 		.4byte	.LFE1
 2482 0010 00000000 		.4byte	.LFB2
 2483 0014 16000000 		.4byte	.LFE2
 2484 0018 00000000 		.4byte	.LFB3
 2485 001c 44000000 		.4byte	.LFE3
 2486 0020 00000000 		.4byte	.LFB6
 2487 0024 88000000 		.4byte	.LFE6
 2488 0028 00000000 		.4byte	.LFB7
 2489 002c 0E000000 		.4byte	.LFE7
 2490 0030 00000000 		.4byte	.LFB8
 2491 0034 1E000000 		.4byte	.LFE8
 2492 0038 00000000 		.4byte	.LFB9
 2493 003c 10000000 		.4byte	.LFE9
 2494 0040 00000000 		.4byte	.LFB10
 2495 0044 10000000 		.4byte	.LFE10
 2496 0048 00000000 		.4byte	.LFB11
 2497 004c 0C000000 		.4byte	.LFE11
 2498 0050 00000000 		.4byte	.LFB4
 2499 0054 EC000000 		.4byte	.LFE4
 2500 0058 00000000 		.4byte	.LFB5
 2501 005c 2C000000 		.4byte	.LFE5
 2502 0060 00000000 		.4byte	0
 2503 0064 00000000 		.4byte	0
 2504              		.section	.debug_line,"",%progbits
 2505              	.Ldebug_line0:
 2506 0000 FB010000 		.section	.debug_str,"MS",%progbits,1
 2506      02006B00 
 2506      00000201 
 2506      FB0E0D00 
 2506      01010101 
 2507              	.LASF10:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 80


 2508 0000 75696E74 		.ascii	"uint16\000"
 2508      313600
 2509              	.LASF41:
 2510 0007 66696C74 		.ascii	"filteredRawData\000"
 2510      65726564 
 2510      52617744 
 2510      61746100 
 2511              	.LASF55:
 2512 0017 43617053 		.ascii	"CapSense_hysteresis\000"
 2512      656E7365 
 2512      5F687973 
 2512      74657265 
 2512      73697300 
 2513              	.LASF51:
 2514 002b 43617053 		.ascii	"CapSense_sensorOnMask\000"
 2514      656E7365 
 2514      5F73656E 
 2514      736F724F 
 2514      6E4D6173 
 2515              	.LASF26:
 2516 0041 66696E67 		.ascii	"fingerThreshold\000"
 2516      65725468 
 2516      72657368 
 2516      6F6C6400 
 2517              	.LASF7:
 2518 0051 6C6F6E67 		.ascii	"long long unsigned int\000"
 2518      206C6F6E 
 2518      6720756E 
 2518      7369676E 
 2518      65642069 
 2519              	.LASF50:
 2520 0068 43617053 		.ascii	"CapSense_sensorSignal\000"
 2520      656E7365 
 2520      5F73656E 
 2520      736F7253 
 2520      69676E61 
 2521              	.LASF22:
 2522 007e 43617053 		.ascii	"CapSense_InitializeEnabledBaselines\000"
 2522      656E7365 
 2522      5F496E69 
 2522      7469616C 
 2522      697A6545 
 2523              	.LASF43:
 2524 00a2 43617053 		.ascii	"CapSense_UpdateEnabledBaselines\000"
 2524      656E7365 
 2524      5F557064 
 2524      61746545 
 2524      6E61626C 
 2525              	.LASF6:
 2526 00c2 6C6F6E67 		.ascii	"long long int\000"
 2526      206C6F6E 
 2526      6720696E 
 2526      7400
 2527              	.LASF0:
 2528 00d0 7369676E 		.ascii	"signed char\000"
 2528      65642063 
 2528      68617200 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 81


 2529              	.LASF36:
 2530 00dc 43617053 		.ascii	"CapSense_DisableWidget\000"
 2530      656E7365 
 2530      5F446973 
 2530      61626C65 
 2530      57696467 
 2531              	.LASF31:
 2532 00f3 72617749 		.ascii	"rawIndex\000"
 2532      6E646578 
 2532      00
 2533              	.LASF32:
 2534 00fc 6E756D62 		.ascii	"numberOfSensors\000"
 2534      65724F66 
 2534      53656E73 
 2534      6F727300 
 2535              	.LASF33:
 2536 010c 73746174 		.ascii	"state\000"
 2536      6500
 2537              	.LASF4:
 2538 0112 6C6F6E67 		.ascii	"long int\000"
 2538      20696E74 
 2538      00
 2539              	.LASF34:
 2540 011b 43617053 		.ascii	"CapSense_CheckIsAnyWidgetActive\000"
 2540      656E7365 
 2540      5F436865 
 2540      636B4973 
 2540      416E7957 
 2541              	.LASF9:
 2542 013b 75696E74 		.ascii	"uint8\000"
 2542      3800
 2543              	.LASF13:
 2544 0141 646F7562 		.ascii	"double\000"
 2544      6C6500
 2545              	.LASF47:
 2546 0148 43617053 		.ascii	"CapSense_widgetNumber\000"
 2546      656E7365 
 2546      5F776964 
 2546      6765744E 
 2546      756D6265 
 2547              	.LASF11:
 2548 015e 75696E74 		.ascii	"uint32\000"
 2548      333200
 2549              	.LASF27:
 2550 0165 68797374 		.ascii	"hysteresis\000"
 2550      65726573 
 2550      697300
 2551              	.LASF37:
 2552 0170 43617053 		.ascii	"CapSense_IIR4Filter\000"
 2552      656E7365 
 2552      5F494952 
 2552      3446696C 
 2552      74657200 
 2553              	.LASF60:
 2554 0184 43617053 		.ascii	"CapSense_ScanSensor\000"
 2554      656E7365 
 2554      5F536361 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 82


 2554      6E53656E 
 2554      736F7200 
 2555              	.LASF8:
 2556 0198 756E7369 		.ascii	"unsigned int\000"
 2556      676E6564 
 2556      20696E74 
 2556      00
 2557              	.LASF5:
 2558 01a5 6C6F6E67 		.ascii	"long unsigned int\000"
 2558      20756E73 
 2558      69676E65 
 2558      6420696E 
 2558      7400
 2559              	.LASF49:
 2560 01b7 43617053 		.ascii	"CapSense_sensorBaselineLow\000"
 2560      656E7365 
 2560      5F73656E 
 2560      736F7242 
 2560      6173656C 
 2561              	.LASF58:
 2562 01d2 43617053 		.ascii	"CapSense_rawDataIndex\000"
 2562      656E7365 
 2562      5F726177 
 2562      44617461 
 2562      496E6465 
 2563              	.LASF3:
 2564 01e8 73686F72 		.ascii	"short unsigned int\000"
 2564      7420756E 
 2564      7369676E 
 2564      65642069 
 2564      6E7400
 2565              	.LASF19:
 2566 01fb 73656E73 		.ascii	"sensor\000"
 2566      6F7200
 2567              	.LASF46:
 2568 0202 43617053 		.ascii	"CapSense_sensorEnableMask\000"
 2568      656E7365 
 2568      5F73656E 
 2568      736F7245 
 2568      6E61626C 
 2569              	.LASF38:
 2570 021c 43617053 		.ascii	"CapSense_UpdateSensorBaseline\000"
 2570      656E7365 
 2570      5F557064 
 2570      61746553 
 2570      656E736F 
 2571              	.LASF39:
 2572 023a 63616C63 		.ascii	"calc\000"
 2572      00
 2573              	.LASF63:
 2574 023f 43617053 		.ascii	"CapSense_CalculateThresholds\000"
 2574      656E7365 
 2574      5F43616C 
 2574      63756C61 
 2574      74655468 
 2575              	.LASF28:
 2576 025c 6465626F 		.ascii	"debounce\000"
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 83


 2576      756E6365 
 2576      00
 2577              	.LASF16:
 2578 0265 73697A65 		.ascii	"sizetype\000"
 2578      74797065 
 2578      00
 2579              	.LASF35:
 2580 026e 43617053 		.ascii	"CapSense_EnableWidget\000"
 2580      656E7365 
 2580      5F456E61 
 2580      626C6557 
 2580      69646765 
 2581              	.LASF15:
 2582 0284 6C6F6E67 		.ascii	"long double\000"
 2582      20646F75 
 2582      626C6500 
 2583              	.LASF18:
 2584 0290 43617053 		.ascii	"CapSense_InitializeSensorBaseline\000"
 2584      656E7365 
 2584      5F496E69 
 2584      7469616C 
 2584      697A6553 
 2585              	.LASF29:
 2586 02b2 43617053 		.ascii	"CapSense_CheckIsSensorActive\000"
 2586      656E7365 
 2586      5F436865 
 2586      636B4973 
 2586      53656E73 
 2587              	.LASF23:
 2588 02cf 656E4D61 		.ascii	"enMask\000"
 2588      736B00
 2589              	.LASF54:
 2590 02d6 43617053 		.ascii	"CapSense_noiseThreshold\000"
 2590      656E7365 
 2590      5F6E6F69 
 2590      73655468 
 2590      72657368 
 2591              	.LASF53:
 2592 02ee 43617053 		.ascii	"CapSense_fingerThreshold\000"
 2592      656E7365 
 2592      5F66696E 
 2592      67657254 
 2592      68726573 
 2593              	.LASF45:
 2594 0307 43617053 		.ascii	"CapSense_rawFilterData1\000"
 2594      656E7365 
 2594      5F726177 
 2594      46696C74 
 2594      65724461 
 2595              	.LASF12:
 2596 031f 666C6F61 		.ascii	"float\000"
 2596      7400
 2597              	.LASF66:
 2598 0325 433A5C55 		.ascii	"C:\\Users\\Tri94\\Documents\\PSoC Creator\\EE4450\\"
 2598      73657273 
 2598      5C547269 
 2598      39345C44 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 84


 2598      6F63756D 
 2599 0352 43617053 		.ascii	"CapSence_Proximity.cydsn\000"
 2599      656E6365 
 2599      5F50726F 
 2599      78696D69 
 2599      74792E63 
 2600              	.LASF30:
 2601 036b 43617053 		.ascii	"CapSense_CheckIsWidgetActive\000"
 2601      656E7365 
 2601      5F436865 
 2601      636B4973 
 2601      57696467 
 2602              	.LASF1:
 2603 0388 756E7369 		.ascii	"unsigned char\000"
 2603      676E6564 
 2603      20636861 
 2603      7200
 2604              	.LASF20:
 2605 0396 43617053 		.ascii	"CapSense_InitializeAllBaselines\000"
 2605      656E7365 
 2605      5F496E69 
 2605      7469616C 
 2605      697A6541 
 2606              	.LASF42:
 2607 03b6 6E6F6973 		.ascii	"noiseThreshold\000"
 2607      65546872 
 2607      6573686F 
 2607      6C6400
 2608              	.LASF2:
 2609 03c5 73686F72 		.ascii	"short int\000"
 2609      7420696E 
 2609      7400
 2610              	.LASF21:
 2611 03cf 77696467 		.ascii	"widget\000"
 2611      657400
 2612              	.LASF24:
 2613 03d6 6F6E4D61 		.ascii	"onMask\000"
 2613      736B00
 2614              	.LASF64:
 2615 03dd 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2615      43313120 
 2615      352E342E 
 2615      31203230 
 2615      31363036 
 2616 0410 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2616      20726576 
 2616      6973696F 
 2616      6E203233 
 2616      37373135 
 2617 0443 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2617      66756E63 
 2617      74696F6E 
 2617      2D736563 
 2617      74696F6E 
 2618              	.LASF17:
 2619 046b 43617053 		.ascii	"CapSense_BaseInit\000"
 2619      656E7365 
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 85


 2619      5F426173 
 2619      65496E69 
 2619      7400
 2620              	.LASF52:
 2621 047d 43617053 		.ascii	"CapSense_lowBaselineResetCnt\000"
 2621      656E7365 
 2621      5F6C6F77 
 2621      42617365 
 2621      6C696E65 
 2622              	.LASF56:
 2623 049a 43617053 		.ascii	"CapSense_debounce\000"
 2623      656E7365 
 2623      5F646562 
 2623      6F756E63 
 2623      6500
 2624              	.LASF48:
 2625 04ac 43617053 		.ascii	"CapSense_sensorBaseline\000"
 2625      656E7365 
 2625      5F73656E 
 2625      736F7242 
 2625      6173656C 
 2626              	.LASF14:
 2627 04c4 63686172 		.ascii	"char\000"
 2627      00
 2628              	.LASF25:
 2629 04c9 6465626F 		.ascii	"debounceIndex\000"
 2629      756E6365 
 2629      496E6465 
 2629      7800
 2630              	.LASF65:
 2631 04d7 47656E65 		.ascii	"Generated_Source\\PSoC5\\CapSense_CSHL.c\000"
 2631      72617465 
 2631      645F536F 
 2631      75726365 
 2631      5C50536F 
 2632              	.LASF44:
 2633 04fe 43617053 		.ascii	"CapSense_sensorRaw\000"
 2633      656E7365 
 2633      5F73656E 
 2633      736F7252 
 2633      617700
 2634              	.LASF62:
 2635 0511 43617053 		.ascii	"CapSense_ScanEnabledWidgets\000"
 2635      656E7365 
 2635      5F536361 
 2635      6E456E61 
 2635      626C6564 
 2636              	.LASF57:
 2637 052d 43617053 		.ascii	"CapSense_debounceCounter\000"
 2637      656E7365 
 2637      5F646562 
 2637      6F756E63 
 2637      65436F75 
 2638              	.LASF40:
 2639 0546 74656D70 		.ascii	"tempRaw\000"
 2639      52617700 
 2640              	.LASF61:
ARM GAS  C:\Users\Tri94\AppData\Local\Temp\ccpNRt3N.s 			page 86


 2641 054e 43617053 		.ascii	"CapSense_IsBusy\000"
 2641      656E7365 
 2641      5F497342 
 2641      75737900 
 2642              	.LASF59:
 2643 055e 43617053 		.ascii	"CapSense_numberOfSensors\000"
 2643      656E7365 
 2643      5F6E756D 
 2643      6265724F 
 2643      6653656E 
 2644              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
